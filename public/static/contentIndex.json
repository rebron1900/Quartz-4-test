{"authoring-content":{"title":"Authoring Content","links":["","build","features/callouts","features/wikilinks","features/private-pages"],"tags":[],"content":"All of the content in your Quartz should go in the /content folder. The content for the home page of your Quartz lives in content/index.md. If you’ve setup Quartz already, this folder should already be initailized. Any Markdown in this folder will get processed by Quartz.\nIt is recommended that you use Obsidian as a way to edit and maintain your Quartz. It comes with a nice editor and graphical interface to preview, edit, and link your local files and attachments.\nGot everything setup? Let’s build and preview your Quartz locally!\nSyntax §\nAs Quartz uses Markdown files as the main way of writing content, it fully supports Markdown syntax. By default, Quartz also ships with a few syntax extensions like Github Flavored Markdown (footnotes, strikethrough, tables, tasklists) and Obsidian Flavored Markdown (callouts, wikilinks).\nAdditionally, Quartz also allows you to specify additional metadata in your notes called frontmatter.\ncontent/note.md---\ntitle: Example Title\ndraft: false\ntags:\n  - example-tag\n---\n \nThe rest of your content lives here. You can use **Markdown** here :)\nSome common frontmatter fields that are natively supported by Quartz:\n\ntitle: Title of the page. If it isn’t provided, Quartz will use the name of the file as the title.\naliases: Other names for this note. This is a list of strings.\ndraft: Whether to publish the page or not. This is one way to make pages private in Quartz.\ndate: A string representing the day the note was published. Normally uses YYYY-MM-DD format.\n"},"build":{"title":"Building your Quartz","links":[""],"tags":[],"content":"Once you’ve initialized Quartz, let’s see what it looks like locally:\nnpx quartz build --serve\nThis will start a local web server to run your Quartz on your computer. Open a web browser and visit http://localhost:8080/ to view it.\n\n\n                  \n                  Flags and options \n                  \n                \nFor full help options, you can run npx quartz build --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n-o or --output: the output folder. This is normally just public\n--serve: run a local hot-reloading server to preview your Quartz\n--port: what port to run the local preview server on\n--concurrency: how many threads to use to parse notes\n\n"},"configuration":{"title":"Configuration","links":["layout","features/RSS-Feed","features/SPA-Routing","features/popover-previews","hosting","features/private-pages","features/graph-view","features/syntax-highlighting","advanced/making-plugins","features/Latex"],"tags":[],"content":"Quartz is meant to be extremely configurable, even if you don’t know any coding. Most of the configuration you should need can be done by just editing quartz.config.ts or changing the layout in quartz.layout.ts.\n\n\n                  \n                  Tip \n                  \n                \nIf you edit Quartz configuration using a text-editor that has TypeScript language support like VSCode, it will warn you when you you’ve made an error in your configuration, helping you avoid configuration mistakes!\n\nThe configuration of Quartz can be broken down into two main parts:\nquartz.config.tsconst config: QuartzConfig = {\n  configuration: { ... },\n  plugins: { ... },\n}\nGeneral Configuration §\nThis part of the configuration concerns anything that can affect the whole site. The following is a list breaking down all the things you can configure:\n\npageTitle: title of the site. This is also used when generating the RSS Feed for your site.\nenableSPA: whether to enable SPA Routing on your site.\nenablePopovers: whether to enable popover previews on your site.\nanalytics: what to use for analytics on your site. Values can be\n\nnull: don’t use analytics;\n{ provider: &#039;plausible&#039; }: use Plausible, a privacy-friendly alternative to Google Analytics; or\n{ provider: &#039;google&#039;, tagId: &lt;your-google-tag&gt; }: use Google Analytics\n\n\nbaseUrl: this is used for sitemaps and RSS feeds that require an absolute URL to know where the canonical ‘home’ of your site lives. This is normally the deployed URL of your site (e.g. quartz.jzhao.xyz for this site). Do not include the protocol (i.e. https://) or any leading or trailing slashes.\n\nThis should also include the subpath if you are hosting on GitHub pages without a custom domain. For example, if my repository is jackyzha0/quartz, GitHub pages would deploy to https://jackyzha0.github.io/quartz and the baseUrl would be jackyzha0.github.io/quartz\nNote that Quartz 4 will avoid using this as much as possible and use relative URLs whenever it can to make sure your site works no matter where you end up actually deploying it.\n\n\nignorePatterns: a list of glob patterns that Quartz should ignore and not search through when looking for files inside the content folder. See private pages for more details.\ntheme: configure how the site looks.\n\ntypography: what fonts to use. Any font available on Google Fonts works here.\n\nheader: Font to use for headers\ncode: Font for inline and block quotes.\nbody: Font for everything\n\n\ncolors: controls the theming of the site.\n\nlight: page background\nlightgray: borders\ngray: graph links, heavier borders\ndarkgray: body text\ndark: header text and icons\nsecondary: link colour, current graph node\ntertiary: hover states and visited graph nodes\nhighlight: internal link background, highlighted text, highlighted lines of code\n\n\n\n\n\nPlugins §\nYou can think of Quartz plugins as a series of transformations over content.\n\nplugins: {\n  transformers: [...],\n  filters: [...],\n  emitters: [...],\n}\n\nTransformers map over content (e.g. parsing frontmatter, generating a description)\nFilters filter content (e.g. filtering out drafts)\nEmitters reduce over content (e.g. creating an RSS feed or pages that list all files with a specific tag)\n\nBy adding, removing, and reordering plugins from the tranformers, filters, and emitters fields, you can customize the behaviour of Quartz.\n\n\n                  \n                  Note \n                  \n                \nEach node is modified by every transformer in order. Some transformers are position-sensitive so you may need to take special note of whether it needs come before or after any other particular plugins.\n\nAdditionally, plugins may also have their own configuration settings that you can pass in. For example, the Latex plugin allows you to pass in a field specifying the renderEngine to choose between Katex and MathJax.\ntransformers: [\n  Plugin.FrontMatter(), // uses default options\n  Plugin.Latex({ renderEngine: &quot;katex&quot; }), // specify some options\n]\nIf you’d like to make your own plugins, read the guide on making plugins for more information."},"hosting":{"title":"Hosting","links":["features/RSS-Feed","configuration"],"tags":[],"content":"Quartz effectively turns your Markdown files and other resources into a bundle of HTML, JS, and CSS files (a website!).\nHowever, if you’d like to publish your site to the world, you need a way to host it online. This guide will detail how to deploy with either GitHub Pages or Cloudflare pages but any service that allows you to deploy static HTML should work as well (e.g. Netlify, Replit, etc.)\n\n\n                  \n                  Tip \n                  \n                \nSome Quartz features (like RSS Feed and sitemap generation) require baseUrl to be configured properly in your configuration to work properly. Make sure you set this before deploying!\n\nCloudflare Pages §\n\nLog in to the Cloudflare dashboard and select your account.\nIn Account Home, select Workers &amp; Pages &gt; Create application &gt; Pages &gt; Connect to Git.\nSelect the new GitHub repository that you created and, in the Set up builds and deployments section, provide the following information:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration optionValueProduction branchv4-alphaFramework presetNoneBuild commandnpx quartz buildBuild output directorypublic\nPress “Save and deploy” and Cloudflare should have a deployed version of your site in about a minute. Then, every time you sync your Quartz changes to GitHub, your site should be updated.\nTo add a custom domain, check out Cloudflare’s documentation.\nGitHub Pages §\nLike Quartz 3, you can deploy the site generated by Quartz 4 via GitHub Pages.\nIn your local Quartz, create a new file quartz/.github/workflows/deploy.yaml.\nquartz/.github/workflows/deploy.yamlname: Deploy Quartz site to GitHub Pages\n \non:\n  push:\n    branches:\n      - v4-alpha\n \npermissions:\n  contents: read\n  pages: write\n  id-token: write\n \nconcurrency:\n  group: &quot;pages&quot;\n  cancel-in-progress: false\n \njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0 # Fetch all history for git info\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18.14\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build Quartz\n        run: npx quartz build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: public\n \n  deploy:\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\nThen, commit these changes by doing npx quartz sync. This should deploy your site to &lt;github-username&gt;.github.io/&lt;repository-name&gt;.\nCustom Domain §\nHere’s how to add a custom domain to your GitHub pages deployment.\n\nHead to the “Settings” tab of your forked repository.\nIn the “Code and automation” section of the sidebar, click “Pages”.\nUnder “Custom Domain”, type your custom domain and click “Save”.\nThis next step depends on whether you are using an apex domain (example.com) or a subdomain (subdomain.example.com).\n\nIf you are using an apex domain, navigate to your DNS provider and create an A record that points your apex domain to GitHub’s name servers which have the following IP addresses:\n\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n\n\nIf you are using a subdomain, navigate to your DNS provider and create a CNAME record that points your subdomain to the default domain for your site. For example, if you want to use the subdomain quartz.example.com for your user site, create a CNAME record that points quartz.example.com to &lt;github-username&gt;.github.io.\n\n\n\nThe above shows a screenshot of Google Domains configured for both jzhao.xyz (an apex domain) and quartz.jzhao.xyz (a subdomain).\nSee the GitHub documentation for more detail about how to setup your own custom domain with GitHub Pages.\n\n\n                  \n                  Why aren&#039;t my changes showing up? \n                  \n                \nThere could be many different reasons why your changes aren’t showing up but the most likely reason is that you forgot to push your changes to GitHub.\nMake sure you save your changes to Git and sync it to GitHub by doing npx quartz sync. This will also make sure to pull any updates you may have made from other devices so you have them locally.\n"},"":{"title":"Welcome to Quartz 4","links":["showcase","authoring-content","configuration","layout","build","hosting","migrating-from-Quartz-3","features/Obsidian-compatibility","features/full-text-search","features/graph-view","features/wikilinks","features/backlinks","features/Latex","features/syntax-highlighting","features/popover-previews","features","advanced/creating-components","features/SPA-Routing","advanced/making-plugins","philosophy","advanced/architecture","upgrading"],"tags":[],"content":"Quartz is a fast, batteries-included static-site generator that transforms Markdown content into fully functional websites. Thousands of students, developers, and teachers are already using Quartz to publish personal notes, wikis, and digital gardens to the web.\n🪴 Get Started §\nQuartz requires at least Node v18.14 to function correctly. Ensure you have this installed on your machine before continuing.\nThen, in your terminal of choice, enter the following commands line by line:\ngit clone https://github.com/jackyzha0/quartz.git\ncd quartz\ngit checkout v4-alpha\nnpm i\nnpx quartz create\nThis will guide you through initializing your Quartz with content. Once you’ve done so, see how to:\n\nAuthor content in Quartz\nConfigure Quartz’s behaviour\nChange Quartz’s layout\nBuild and preview Quartz\nHost Quartz online\n\n\n\n                  \n                  Info \n                  \n                \nComing from Quartz 3? See the migration guide for the differences between Quartz 3 and Quartz 4 and how to migrate.\n\n🔧 Features §\n\nObsidian compatibility, full-text search, graph view, wikilinks, backlinks, Latex, syntax highlighting, popover previews, and many more right out of the box\nHot-reload for both configuration and content\nSimple JSX layouts and page components\nRidiculously fast page loads and tiny bundle sizes\nFully-customizable parsing, filtering, and page generation through plugins\n\nFor a comprehensive list of features, visit the features page. You can read more about the why behind these features on the philosophy page and a technical overview on the architecture page.\n🚧 Troubleshooting + Updating §\nHaving trouble with Quartz? Try searching for your issue using the search feature. If you haven’t already, upgrade to the newest version of Quartz to see if this fixes your issue.\nIf you’re still having trouble, feel free to submit an issue if you feel you found a bug or ask for help in our Discord Community."},"layout":{"title":"Layout","links":["tags/component","advanced/creating-components","configuration"],"tags":[],"content":"Certain emitters may also output HTML files. To enable easy customization, these emitters allow you to fully rearrange the layout of the page. The default page layouts can be found in quartz.layout.ts.\nEach page is composed of multiple different sections which contain QuartzComponents. The following code snippet lists all of the valid sections that you can add components to:\nquartz/cfg.tsexport interface FullPageLayout {\n  head: QuartzComponent // single component\n  header: QuartzComponent[] // laid out horizontally\n  beforeBody: QuartzComponent[] // laid out vertically\n  pageBody: QuartzComponent // single component\n  left: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  right: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  footer: QuartzComponent // single component\n}\nThese correspond to following parts of the page:\n\n\n\n                  \n                  Note \n                  \n                \nThere are two additional layout fields that are not shown in the above diagram.\n\nhead is a single component that renders the &lt;head&gt; tag in the HTML. This doesn’t appear visually on the page and is only is responsible for metadata about the document like the tab title, scripts, and styles.\nheader is a set of components that are laid out horizontally and appears before the beforeBody section. This enables you to replicate the old Quartz 3 header bar where the title, search bar, and dark mode toggle. By default, Quartz 4 doesn’t place any components in the header.\n\n\nQuartz components, like plugins, can take in additional properties as configuration options. If you’re familiar with React terminology, you can think of them as Higher-order Components.\nSee a list of all the components for all available components along with their configuration options. You can also checkout the guide on creating components if you’re interested in further customizing the behaviour of Quartz.\nStyle §\nMost meaningful style changes like colour scheme and font can be done simply through the general configuration options. However, if you’d like to make more involved style changes, you can do this by writing your own styles. Quartz 4, like Quartz 3, uses Sass for styling.\nYou can see the base style sheet in quartz/styles/base.scss and write your own in quartz/styles/custom.scss.\n\n\n                  \n                  Note \n                  \n                \nSome components may provide their own styling as well! For example, quartz/components/Darkmode.tsx imports styles from quartz/components/styles/darkmode.scss. If you’d like to customize styling for a specific component, double check the component definition to see how its styles are defined.\n"},"migrating-from-Quartz-3":{"title":"Migrating from Quartz 3","links":["configuration","advanced/creating-components","hosting"],"tags":[],"content":"As you already have Quartz locally, you don’t need to fork or clone it again. Simply just checkout the alpha branch, install the dependencies, and import your old vault.\ngit checkout v4-alpha\ngit pull upstream v4-alpha\nnpm i\nnpx quartz create\nWhen running npx quartz create, you will be prompted as to how to initialize your content folder. Here, you can choose to import or link your previous content folder and Quartz should work just as you expect it to.\n\n\n                  \n                  Note \n                  \n                \nIf the existing content folder you’d like to use is at the same path on a different branch, clone the repo again somewhere at a different path in order to use it.\n\nKey changes §\n\nRemoving Hugo and hugo-obsidian: Hugo worked well for earlier versions of Quartz but it also made it hard for people outside of the Golang and Hugo communities to fully understand what Quartz was doing under the hood and be able to properly customize it to their needs. Quartz 4 now uses a Node-based static-site generation process which should lead to a much more helpful error messages and an overall smoother user experience.\nFull-hot reload: The many rough edges of how hugo-obsidian integrated with Hugo meant that watch mode didn’t re-trigger hugo-obsidian to update the content index. This lead to a lot of weird cases where the watch mode output wasn’t accurate. Quartz 4 now uses a cohesive parse, filter, and emit pipeline which gets run on every change so hot-reloads are always accurate.\nReplacing Go template syntax with JSX: Quartz 3 used Go templates to create layouts for pages. However, the syntax isn’t great for doing any sort of complex rendering (like text processing) and it got very difficult to make any meaningful layout changes to Quartz 3. Quartz 4 uses an extension of JavaScript syntax called JSX which allows you to write layout code that looks like HTML in JavaScript which is significantly easier to understand and maintain.\nA new extensible configuration and plugin system: Quartz 3 was hard to configure without technical knowledge of how Hugo’s partials worked. Extensions were even hard to make. Quartz 4’s configuration and plugin system is designed to be extended by users while making updating to new versions of Quartz easy.\n\nThings to update §\n\nSome HTML layout may not be the same between Quartz 3 and Quartz 4. If you depended on a particular HTML hierarchy or class names, you may need to update your custom CSS to reflect these changes.\nIf you customized the layout of Quartz 3, you may need to translate these changes from Go templates back to JSX as Quartz 4 no longer uses Hugo. For components, check out the guide on creating components for more details on this.\nYou will also need to update your deploy scripts. See the hosting guide for more details.\n"},"philosophy":{"title":"Philosophy of Quartz","links":[],"tags":[],"content":"A garden should be a true hypertext §\n\nThe garden is the web as topology. Every walk through the garden creates new paths, new meanings, and when we add things to the garden we add them in a way that allows many future, unpredicted relationships.\n(The Garden and the Stream)\n\nThe problem with the file cabinet is that it focuses on efficiency of access and interoperability rather than generativity and creativity. Thinking is not linear, nor is it hierarchical. In fact, not many things are linear or hierarchical at all. Then why is it that most tools and thinking strategies assume a nice chronological or hierarchical order for my thought processes? The ideal tool for thought for me would embrace the messiness of my mind, and organically help insights emerge from chaos instead of forcing an artificial order. A rhizomatic, not arboresecent, form of note taking.\nMy goal with a digital garden is not purely as an organizing system and information store (though it works nicely for that). I want my digital garden to be a playground for new ways ideas can connect together. As a result, existing formal organizing systems like Zettelkasten or the hierarchical folder structures of Notion don’t work well for me. There is way too much upfront friction that by the time I’ve thought about how to organize my thought into folders categories, I’ve lost it.\nQuartz embraces the inherent rhizomatic and web-like nature of our thinking and tries to encourage note-taking in a similar form.\n\nA garden should be shared §\nThe goal of digital gardening should be to tap into your network’s collective intelligence to create constructive feedback loops. If done well, I have a shareable representation of my thoughts that I can send out into the world and people can respond. Even for my most half-baked thoughts, this helps me create a feedback cycle to strengthen and fully flesh out that idea.\nQuartz is designed first and foremost as a tool for publishing digital gardens to the web. To me, digital gardening is not just passive knowledge collection. It’s a form of expression and sharing.\n\n“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.”\n— Richard Hamming\n\nThe goal of Quartz is to make sharing your digital garden free and simple. At its core, Quartz is designed to be easy to use enough for non-technical people to get going but also powerful enough that senior developers can tweak it to work how they’d like it to work."},"showcase":{"title":"Quartz Showcase","links":[],"tags":[],"content":"Want to see what Quartz can do? Here are some cool community gardens:\n\nQuartz Documentation (this site!)\nJacky Zhao’s Garden\nBrandon Boswell’s Garden\nScaling Synthesis - A hypertext research notebook\nAWAGMI Intern Notes\nCourse notes for Information Technology Advanced Theory\nData Dictionary 🧠\nsspaeti.com’s Second Brain\noldwinterの数字花园\nAbhijeet’s Math Wiki\nMike’s AI Garden 🤖🪴\n\nIf you want to see your own on here, submit a Pull Request adding yourself to this file!"},"upgrading":{"title":"Upgrading Quartz","links":["migrating-from-Quartz-3"],"tags":[],"content":"tet\n\n\n                  \n                  Note \n                  \n                \nThis is specifically a guide for upgrading Quartz 4 version to a more recent update. If you are coming from Quartz 3, check out the migration guide for more info.\n\nTo fetch the latest Quartz updates, simply run\nnpx quartz upgrade\nAs Quartz uses git under the hood for versioning, updating effectively ‘pulls’ in the updates from the official Quartz GitHub repository. If you have local changes that might conflict with the updates, you may need to resolve these manually yourself (or, pull manually using git pull origin upstream).\nIf you have the GitHub desktop app, this will automatically open to help you resolve the conflicts. Otherwise, you will need to resolve this in a text editor like VSCode. For more help on resolving conflicts manually, check out the GitHub guide on resolving merge conflicts."},"advanced/architecture":{"title":"Architecture","links":["configuration","advanced/paths","layout","features/SPA-Routing","advanced/making-plugins"],"tags":[],"content":"Quartz is a static site generator. How does it work?\nThis question is best answered by tracing what happens when a user (you!) runs npx quartz build in the command line:\nOn the server §\n\nAfter running npx quartz build, npm will look at package.json to find the bin entry for quartz which points at ./quartz/bootstrap-cli.mjs.\nThis file has a shebang line at the top which tells npm to execute it using Node.\nbootstrap-cli.mjs is responsible for a few things:\n\nParsing the command-line arguments using yargs.\nTranspiling and bundling the rest of Quartz (which is in Typescript) to regular JavaScript using esbuild. The esbuild configuration here is slightly special as it also handles .scss file imports using esbuild-sass-plugin v2. Additionally, we bundle ‘inline’ client-side scripts (any .inline.ts file) that components declare using a custom esbuild plugin that runs another instance of esbuild which bundles for the browser instead of node. Modules of both types are imported as plain text.\nRunning the local preview server if --serve is set. This starts two servers:\n\nA WebSocket server on port 3001 to handle hot-reload signals. This tracks all inbound connections and sends a ‘rebuild’ message a server-side change is detected (either content or configuration).\nAn HTTP file-server on a user defined port (normally 8080) to serve the actual website files.\n\n\nIf the --serve flag is set, it also starts a file watcher to detect source-code changes (e.g. anything that is .ts, .tsx, .scss, or packager files). On a change, we rebuild the module (step 2 above) using esbuild’s rebuild API which drastically reduces the build times.\nAfter transpiling the main Quartz build module (quartz/build.ts), we write it to a cache file .quartz-cache/transpiled-build.mjs and then dynamically import this using await import(cacheFile). However, we need to be pretty smart about how to bust Node’s import cache so we add a random query string to fake Node into thinking it’s a new module. This does, however, cause memory leaks so we just hope that the user doesn’t hot-reload their configuration too many times in a single session :)) (it leaks about ~350kB memory on each reload). After importing the module, we then invoke it, passing in the command line arguments we parsed earlier along with a callback function to signal the client to refresh.\n\n\nIn build.ts, we start by installing source map support manually to account for the query string cache busting hack we introduced earlier. Then, we start processing content:\n\nClean the output directory.\nRecursively glob all files in the content folder, respecting the .gitignore.\nParse the Markdown files.\n\nQuartz detects the number of threads available and chooses to spawn worker threads if there are &gt;128 pieces of content to parse (rough heuristic). If it needs to spawn workers, it will invoke esbuild again to transpile the worker script quartz/worker.ts. Then, a work-stealing workerpool is then created and batches of 128 files are assigned to workers.\nEach worker (or just the main thread if there is no concurrency) creates a unified parser based off of the plugins defined in the configuration.\nParsing has three steps:\n\nRead the file into a vfile.\nApplied plugin-defined text transformations over the content.\nSlugify the file path and store it in the data for the file. See the page on paths for more details about how path logic works in Quartz (spoiler: its complicated).\nMarkdown parsing using remark-parse (text to mdast).\nApply plugin-defined Markdown-to-Markdown transformations.\nConvert Markdown into HTML using remark-rehype (mdast to hast).\nApply plugin-defined HTML-to-HTML transformations.\n\n\n\n\nFilter out unwanted content using plugins.\nEmit files using plugins.\n\nGather all the static resources (e.g. external CSS, JS modules, etc.) each emitter plugin declares.\nEmitters that emit HTML files do a bit of extra work here as they need to transform the hast produced in the parse step to JSX. This is done using hast-util-to-jsx-runtime with the Preact runtime. Finally, the JSX is rendered to HTML using preact-render-to-string which statically renders the JSX to HTML (i.e. doesn’t care about useState, useEffect, or any other React/Preact interactive bits). Here, we also do a bunch of fun stuff like assemble the page layout from quartz.layout.ts, assemble all the inline scripts that actually get shipped to the client, and all the transpiled styles. The bulk of this logic can be found in quartz/components/renderPage.tsx. Other fun things of note:\n\nCSS is minified and transformed using Lightning CSS to add vendor prefixes and do syntax lowering.\nScripts are split into beforeDOMLoaded and afterDOMLoaded and are inserted in the &lt;head&gt; and &lt;body&gt; respectively.\n\n\nFinally, each emitter plugin is responsible for emitting and writing it’s own emitted files to disk.\n\n\nIf the --serve flag was detected, we also set up another file watcher to detect content changes (only .md files). We keep a content map that tracks the parsed AST and plugin data for each slug and update this on file changes. Newly added or modified paths are rebuilt and added to the content map. Then, all the filters and emitters are run over the resulting content map. This file watcher is debounced with a threshold of 250ms. On success, we send a client refresh signal using the passed in callback function.\n\n\n\nOn the client §\n\nThe browser opens a Quartz page and loads the HTML. The &lt;head&gt; also links to page styles (emitted to public/index.css) and page-critical JS (emitted to public/prescript.js)\nThen, once the body is loaded, the browser loads the non-critical JS (emitted to public/postscript.js)\nOnce the page is done loading, the page will then dispatch a custom synthetic browser event &quot;nav&quot;. This is used so client-side scripts declared by components can ‘setup’ anything that requires access to the page DOM.\n\nIf the enableSPA option is enabled in the configuration, this &quot;nav&quot; event is also fired on any client-navigation to allow for components to unregister and reregister any event handlers and state.\nIf it’s not, we wire up the &quot;nav&quot; event to just be fired a single time after page load to allow for consistency across how state is setup across both SPA and non-SPA contexts.\n\n\n\nThe architecture and design of the plugin system was intentionally left pretty vague here as this is described in much more depth in the guide on making your own plugin."},"advanced/creating-components":{"title":"Creating your own Quartz components","links":["advanced/making-plugins","features/SPA-Routing","configuration"],"tags":[],"content":"\n\n                  \n                  Warning \n                  \n                \nThis guide assumes you have experience writing JavaScript and are familiar with TypeScript.\n\nNormally on the web, we write layout code using HTML which looks something like the following:\n&lt;article&gt;\n  &lt;h1&gt;An article header&lt;/h1&gt;\n  &lt;p&gt;Some content&lt;/p&gt;\n&lt;/article&gt;\nThis piece of HTML represents an article with a leading header that says “An article header” and a paragraph that contains the text “Some content”. This is combined with CSS to style the page and JavaScript to add interactivity.\nHowever, HTML doesn’t let you create reusable templates. If you wanted to create a new page, you would need to copy and paste the above snippet and edit the header and content yourself. This isn’t great if we have a lot of content on our site that shares a lot of similar layout. The smart people who created React also had similar complaints and invented the concept of Components — JavaScript functions that return JSX — to solve the code duplication problem.\nIn effect, components allow you to write a JavaScript function that takes some data and produces HTML as an output. While Quartz doesn’t use React, it uses the same component concept to allow you to easily express layout templates in your Quartz site.\nAn Example Component §\nConstructor §\nComponent files are written in .tsx files that live in the quartz/components folder. These are re-exported in quartz/components/index.ts so you can use them in layouts and other components more easily.\nEach component file should have a default export that satisfies the QuartzComponentConstructor function signature. It’s a function that takes in a single optional parameter opts and returns a Quartz Component. The type of the parameters opts is defined by the interface Options which you as the component creator also decide.\nIn your component, you can use the values from the configuration option to change the rendering behaviour inside of your component. For example, the component in the code snippet below will not render if the favouriteNumber option is below 0.\ninterface Options {\n  favouriteNumber: number\n}\n \nconst defaultOptions: Options = {\n  favouriteNumber: 42,\n}\n \nexport default ((userOpts?: Options) =&gt; {\n  const opts = { ...userOpts, ...defaultOpts }\n  function YourComponent(props: QuartzComponentProps) {\n    if (opts.favouriteNumber &lt; 0) {\n      return null\n    }\n \n    return &lt;p&gt;My favourite number is {opts.favouriteNumber}&lt;/p&gt;\n  }\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nProps §\nThe Quartz component itself (lines 11-17 highlighted above) looks like a React component. It takes in properties (sometimes called props) and returns JSX.\nAll Quartz components accept the same set of props:\nquartz/components/types.ts// simplified for sake of demonstration\nexport type QuartzComponentProps = {\n  fileData: QuartzPluginData\n  cfg: GlobalConfiguration\n  tree: Node&lt;QuartzPluginData&gt;\n  allFiles: QuartzPluginData[]\n  displayClass?: &quot;mobile-only&quot; | &quot;desktop-only&quot;\n}\n\nfileData: Any metadata plugins may have added to the current page.\n\nfileData.slug: slug of the current page.\nfileData.frontmatter: any frontmatter parsed.\n\n\ncfg: The configuration field in quartz.config.ts.\ntree: the resulting HTML AST after processing and transforming the file. This is useful if you’d like to render the content using hast-util-to-jsx-runtime (you can find an example of this in quartz/components/pages/Content.tsx).\nallFiles: Metadata for all files that have been parsed. Useful for doing page listings or figuring out the overall site structure.\ndisplayClass: a utility class that indicates a preference from the user about how to render it in a mobile or desktop setting. Helpful if you want to conditionally hide a component on mobile or desktop.\n\nStyling §\nQuartz components can also define a .css property on the actual function component which will get picked up by Quartz. This is expected to be a CSS string which can either be inlined or imported from a .scss file.\nNote that inlined styles must be plain vanilla CSS:\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p class=&quot;red-text&quot;&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = `\n  p.red-text {\n    color: red;\n  }\n  `\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nImported styles, however, can be from SCSS files:\nquartz/components/YourComponent.tsx// assuming your stylesheet is in quartz/components/styles/YourComponent.scss\nimport styles from &quot;./styles/YourComponent.scss&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = styles\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Warning \n                  \n                \nQuartz does not use CSS modules so any styles you declare here apply globally. If you only want it to apply to your component, make sure you use specific class names and selectors.\n\nScripts and Interactivity §\nWhat about interactivity? Suppose you want to add an-click handler for example. Like the .css property on the component, you can also declare .beforeDOMLoaded and .afterDOMLoaded properties that are strings that contain the script.\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.beforeDOM = `\n  console.log(&quot;hello from before the page loads!&quot;)\n  `\n \n  YourComponent.afterDOM = `\n  document.getElementById(&#039;btn&#039;).onclick = () =&gt; {\n    alert(&#039;button clicked!&#039;)\n  }\n  `\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Tip \n                  \n                \nFor those coming from React, Quartz components are different from React components in that it only uses JSX for templating and layout. Hooks like useEffect, useState, etc. are not rendered and other properties that accept functions like onClick handlers will not work. Instead, do it using a regular JS script that modifies the DOM element directly.\n\nAs the names suggest, the .beforeDOMLoaded scripts are executed before the page is done loading so it doesn’t have access to any elements on the page. This is mostly used to prefetch any critical data.\nThe .afterDOMLoaded script executes once the page has been completely loaded. This is a good place to setup anything that should last for the duration of a site visit (e.g. getting something saved from local storage).\nIf you need to create an afterDOMLoaded script that depends on page specific elements that may change when navigating to a new page, you can listen for the &quot;nav&quot; event that gets fired whenever a page loads (which may happen on navigation if SPA Routing is enabled).\ndocument.addEventListener(&quot;nav&quot;, () =&gt; {\n  // do page specific logic here\n  // e.g. attach event listeners\n  const toggleSwitch = document.querySelector(&quot;#switch&quot;) as HTMLInputElement\n  toggleSwitch.removeEventListener(&quot;change&quot;, switchTheme)\n  toggleSwitch.addEventListener(&quot;change&quot;, switchTheme)\n})\nIt is best practice to also unmount any existing event handlers to prevent memory leaks.\nImporting Code §\nOf course, it isn’t always practical (nor desired!) to write your code as a string literal in the component.\nQuartz supports importing component code through .inline.ts files.\nquartz/components/YourComponent.tsx// @ts-ignore: typescript doesn&#039;t know about our inline bundling system\n// so we need to silence the error\nimport script from &quot;./scripts/graph.inline&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.afterDOM = script\n  return YourComponent\n}) satisfies QuartzComponentConstructor\nquartz/components/scripts/graph.inline.ts// any imports here are bundled for the browser\nimport * as d3 from &quot;d3&quot;\n \ndocument.getElementById(&quot;btn&quot;).onclick = () =&gt; {\n  alert(&quot;button clicked!&quot;)\n}\nAdditionally, like what is shown in the example above, you can import packages in .inline.ts files. This will be bundled by Quartz and included in the actual script.\nUsing a Component §\nAfter creating your custom component, re-export it in quartz/components/index.ts:\nquartz/components/index.tsimport ArticleTitle from &quot;./ArticleTitle&quot;\nimport Content from &quot;./pages/Content&quot;\nimport Darkmode from &quot;./Darkmode&quot;\nimport YourComponent from &quot;./YourComponent&quot;\n \nexport { ArticleTitle, Content, Darkmode, YourComponent }\nThen, you can use it like any other component in quartz.layout.ts via Component.YourComponent(). See the layout section for more details.\nAs Quartz components are just functions that return React components, you can compositionally use them in other Quartz components.\nquartz/components/AnotherComponent.tsximport YourComponent from &quot;./YourComponent&quot;\n \nexport default (() =&gt; {\n  function AnotherComponent(props: QuartzComponentProps) {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;It&#039;s nested!&lt;/p&gt;\n        &lt;YourComponent {...props} /&gt;\n      &lt;/div&gt;\n    )\n  }\n \n  return AnotherComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Tip \n                  \n                \nLook in quartz/components for more examples of components in Quartz as reference for your own components!\n"},"advanced/making-plugins":{"title":"Making your own plugins","links":["build","configuration","advanced/paths","features/Latex","advanced/creating-components"],"tags":[],"content":"\n\n                  \n                  Warning \n                  \n                \nThis part of the documentation will assume you have working knowledge in TypeScript and will include code snippets that describe the interface of what Quartz plugins should look like.\n\nQuartz’s plugins are a series of transformations over content. This is illustrated in the diagram of the processing pipeline below:\n\nAll plugins are defined as a function that takes in a single parameter for options type OptionType = object | undefined and return an object that corresponds to the type of plugin it is.\ntype OptionType = object | undefined\ntype QuartzPlugin&lt;Options extends OptionType = undefined&gt; = (opts?: Options) =&gt; QuartzPluginInstance\ntype QuartzPluginInstance =\n  | QuartzTransformerPluginInstance\n  | QuartzFilterPluginInstance\n  | QuartzEmitterPluginInstance\nThe following sections will go into detail for what methods can be implemented for each plugin type. Before we do that, let’s clarify a few more ambiguous types:\n\nBuildCtx is defined in quartz/ctx.ts. It consists of\n\nargv: The command line arguments passed to the Quartz build command\ncfg: The full Quartz configuration\nallSlugs: a list of all the valid content slugs (see paths for more information on what a ServerSlug is)\n\n\nStaticResources is defined in quartz/resources.tsx. It consists of\n\ncss: a list of URLs for stylesheets that should be loaded\njs: a list of scripts that should be loaded. A script is described with the JSResource type which is also defined in quartz/resources.tsx. It allows you to define a load time (either before or after the DOM has been loaded), whether it should be a module, and either the source URL or the inline content of the script.\n\n\n\nTransformers §\nTransformers map over content, taking a Markdown file and outputting modified content or adding metadata to the file itself.\nexport type QuartzTransformerPluginInstance = {\n  name: string\n  textTransform?: (ctx: BuildCtx, src: string | Buffer) =&gt; string | Buffer\n  markdownPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  htmlPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  externalResources?: (ctx: BuildCtx) =&gt; Partial&lt;StaticResources&gt;\n}\nAll transformer plugins must define at least a name field to register the plugin and a few optional functions that allow you to hook into various parts of transforming a single Markdown file.\n\ntextTransform performs a text-to-text transformation before a file is parsed into the Markdown AST.\nmarkdownPlugins defines a list of remark plugins. remark is a tool that transforms Markdown to Markdown in a structured way.\nhtmlPlugins defines a list of rehype plugins. Similar to how remark works, rehype is a tool that transforms HTML to HTML in a structured way.\nexternalResources defines any external resources the plugin may need to load on the client-side for it to work properly.\n\nNormally for both remark and rehype, you can find existing plugins that you can use to . If you’d like to create your own remark or rehype plugin, checkout the guide to creating a plugin using unified (the underlying AST parser and transformer library).\nA good example of a transformer plugin that borrows from the remark and rehype ecosystems is the Latex plugin:\nquartz/plugins/transformers/latex.tsimport remarkMath from &quot;remark-math&quot;\nimport rehypeKatex from &quot;rehype-katex&quot;\nimport rehypeMathjax from &quot;rehype-mathjax/svg.js&quot;\nimport { QuartzTransformerPlugin } from &quot;../types&quot;\n \ninterface Options {\n  renderEngine: &quot;katex&quot; | &quot;mathjax&quot;\n}\n \nexport const Latex: QuartzTransformerPlugin&lt;Options&gt; = (opts?: Options) =&gt; {\n  const engine = opts?.renderEngine ?? &quot;katex&quot;\n  return {\n    name: &quot;Latex&quot;,\n    markdownPlugins() {\n      return [remarkMath]\n    },\n    htmlPlugins() {\n      if (engine === &quot;katex&quot;) {\n        // if you need to pass options into a plugin, you\n        // can use a tuple of [plugin, options]\n        return [[rehypeKatex, { output: &quot;html&quot; }]]\n      } else {\n        return [rehypeMathjax]\n      }\n    },\n    externalResources() {\n      if (engine === &quot;katex&quot;) {\n        return {\n          css: [&quot;https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css&quot;],\n          js: [\n            {\n              src: &quot;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/contrib/copy-tex.min.js&quot;,\n              loadTime: &quot;afterDOMReady&quot;,\n              contentType: &quot;external&quot;,\n            },\n          ],\n        }\n      } else {\n        return {}\n      }\n    },\n  }\n}\nAnother common thing that transformer plugins will do is parse a file and add extra data for that file:\nexport const AddWordCount: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;AddWordCount&quot;,\n    markdownPlugins() {\n      return [\n        () =&gt; {\n          return (tree, file) =&gt; {\n            // tree is an `mdast` root element\n            // file is a `vfile`\n            const text = file.value\n            const words = text.split(&quot; &quot;).length\n            file.data.wordcount = words\n          }\n        },\n      ]\n    },\n  }\n}\n \n// tell typescript about our custom data fields we are adding\n// other plugins will then also be aware of this data field\ndeclare module &quot;vfile&quot; {\n  interface DataMap {\n    wordcount: number\n  }\n}\nFinally, you can also perform transformations over Markdown or HTML ASTs using the visit function from the unist-util-visit package or the findAndReplace function from the mdast-util-find-and-replace package.\nexport const TextTransforms: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;TextTransforms&quot;,\n    markdownPlugins() {\n      return [() =&gt; {\n        return (tree, file) =&gt; {\n          // replace _text_ with the italics version\n          findAndReplace(tree, /_(.+)_/, (_value: string, ...capture: string[]) =&gt; {\n            // inner is the text inside of the () of the regex\n            const [inner] = capture\n            // return an mdast node\n            // https://github.com/syntax-tree/mdast\n            return {\n              type: &quot;emphasis&quot;,\n              children: [{ type: &#039;text&#039;, value: inner }]\n            }\n          })\n \n         // remove all links (replace with just the link content)\n         // match by &#039;type&#039; field on an mdast node\n         // https://github.com/syntax-tree/mdast#link in this example\n          visit(tree, &quot;link&quot;, (link: Link) =&gt; {\n            return {\n              type: &quot;paragraph&quot;\n              children: [{ type: &#039;text&#039;, value: link.title }]\n            }\n          })\n        }\n      }]\n    }\n  }\n}\nAll transformer plugins can be found under quartz/plugins/transformers. If you decide to write your own transformer plugin, don’t forget to re-export it under quartz/plugins/transformers/index.ts\nA parting word: transformer plugins are quite complex so don’t worry if you don’t get them right away. Take a look at the built in transformers and see how they operate over content to get a better sense for how to accomplish what you are trying to do.\nFilters §\nFilters filter content, taking the output of all the transformers and determining what files to actually keep and what to discard.\nexport type QuartzFilterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzFilterPluginInstance\n \nexport type QuartzFilterPluginInstance = {\n  name: string\n  shouldPublish(ctx: BuildCtx, content: ProcessedContent): boolean\n}\nA filter plugin must define a name field and a shouldPublish function that takes in a piece of content that has been processed by all the transformers and returns a true or false depending on whether it should be passed to the emitter plugins or not.\nFor example, here is the built-in plugin for removing drafts:\nquartz/plugins/filters/draft.tsimport { QuartzFilterPlugin } from &quot;../types&quot;\n \nexport const RemoveDrafts: QuartzFilterPlugin&lt;{}&gt; = () =&gt; ({\n  name: &quot;RemoveDrafts&quot;,\n  shouldPublish(_ctx, [_tree, vfile]) {\n    // uses frontmatter parsed from transformers\n    const draftFlag: boolean = vfile.data?.frontmatter?.draft ?? false\n    return !draftFlag\n  },\n})\nEmitters §\nEmitters reduce over content, taking in a list of all the transformed and filtered content and creating output files.\nexport type QuartzEmitterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzEmitterPluginInstance\n \nexport type QuartzEmitterPluginInstance = {\n  name: string\n  emit(\n    ctx: BuildCtx,\n    content: ProcessedContent[],\n    resources: StaticResources,\n    emitCallback: EmitCallback,\n  ): Promise&lt;FilePath[]&gt;\n  getQuartzComponents(ctx: BuildCtx): QuartzComponent[]\n}\nAn emitter plugin must define a name field an emit function and a getQuartzComponents function. emit is responsible for looking at all the parsed and filtered content and then appropriately creating files and returning a list of paths to files the plugin created.\nCreating new files can be done via regular Node fs module (i.e. fs.cp or fs.writeFile) or via the emitCallback if you are creating files that contain text. The emitCallback function is the 4th argument of the emit function. It’s interface looks something like this:\nexport type EmitCallback = (data: {\n  // the name of the file to emit (not including the file extension)\n  slug: ServerSlug\n  // the file extension\n  ext: `.${string}` | &quot;&quot;\n  // the file content to add\n  content: string\n}) =&gt; Promise&lt;FilePath&gt;\nThis is a thin wrapper around writing to the appropriate output folder and ensuring that intermediate directories exist. If you choose to use the native Node fs APIs, ensure you emit to the argv.output folder as well.\nIf you are creating an emitter plugin that needs to render components, there are three more things to be aware of:\n\nYour component should use getQuartzComponents to declare a list of QuartzComponents that it uses to construct the page. See the page on creating components for more information.\nYou can use the renderPage function defined in quartz/components/renderPage.tsx to render Quartz components into HTML.\nIf you need to render an HTML AST to JSX, you can use the toJsxRuntime function from hast-util-to-jsx-runtime library. An example of this can be found in quartz/components/pages/Content.tsx.\n\nFor example, the following is a simplified version of the content page plugin that renders every single page.\nquartz/plugins/emitters/contentPage.tsxexport const ContentPage: QuartzEmitterPlugin = () =&gt; {\n  // construct the layout\n  const layout: FullPageLayout = {\n    ...sharedPageComponents,\n    ...defaultContentPageLayout,\n    pageBody: Content(),\n  }\n  const { head, header, beforeBody, pageBody, left, right, footer } = layout\n  return {\n    name: &quot;ContentPage&quot;,\n    getQuartzComponents() {\n      return [head, ...header, ...beforeBody, pageBody, ...left, ...right, footer]\n    },\n    async emit(ctx, content, resources, emit): Promise&lt;FilePath[]&gt; {\n      const cfg = ctx.cfg.configuration\n      const fps: FilePath[] = []\n      const allFiles = content.map((c) =&gt; c[1].data)\n      for (const [tree, file] of content) {\n        const slug = canonicalizeServer(file.data.slug!)\n        const externalResources = pageResources(slug, resources)\n        const componentData: QuartzComponentProps = {\n          fileData: file.data,\n          externalResources,\n          cfg,\n          children: [],\n          tree,\n          allFiles,\n        }\n \n        const content = renderPage(slug, componentData, opts, externalResources)\n        const fp = await emit({\n          content,\n          slug: file.data.slug!,\n          ext: &quot;.html&quot;,\n        })\n \n        fps.push(fp)\n      }\n      return fps\n    },\n  }\n}\nNote that it takes in a FullPageLayout as the options. It’s made by combining a SharedLayout and a PageLayout both of which are provided through the quartz.layout.ts file.\n\n\n                  \n                  Tip \n                  \n                \nLook in quartz/plugins for more examples of plugins in Quartz as reference for your own plugins!\n"},"advanced/paths":{"title":"Paths in Quartz","links":[],"tags":[],"content":"Paths are pretty complex to reason about because, especially for a static site generator, they can come from so many places.\nThe current browser URL? Technically a path. A full file path to a piece of content? Also a path. What about a slug for a piece of content? Yet another path.\nIt would be silly to type these all as string and call it a day as it’s pretty common to accidentally mistake one type of path for another. Unfortunately, TypeScript does not have nominal types for type aliases meaning even if you made custom types of a server-side slug or a client-slug slug, you can still accidentally assign one to another and TypeScript wouldn’t catch it.\nLuckily, we can mimic nominal typing using brands.\n// instead of\ntype ClientSlug = string\n \n// we do\ntype ClientSlug = string &amp; { __brand: &quot;client&quot; }\n \n// that way, the following will fail typechecking\nconst slug: ClientSlug = &quot;some random slug&quot;\nWhile this prevents most typing mistakes within our nominal typing system (e.g. mistaking a server slug for a client slug), it doesn’t prevent us from accidentally mistaking a string for a client slug when we forcibly cast it.\nThus, we still need to be careful when casting from a string to one of these nominal types in the ‘entrypoints’, illustrated with hexagon shapes in the diagram below.\nThe following diagram draws the relationships between all the path sources, nominal path types, and what functions in quartz/path.ts convert between them.\ngraph LR\n    Browser{{Browser}} --&gt; Window{{Window}} &amp; LinkElement{{Link Element}}\n    Window --&quot;getCanonicalSlug()&quot;--&gt; Canonical[Canonical Slug]\n    Window --&quot;getClientSlug()&quot;--&gt; Client[Client Slug]\n    LinkElement --&quot;.href&quot;--&gt; Relative[Relative URL]\n    Client --&quot;canonicalizeClient()&quot;--&gt; Canonical\n    Canonical --&quot;pathToRoot()&quot;--&gt; Relative\n    Canonical --&quot;resolveRelative()&quot; --&gt; Relative\n    MD{{Markdown File}} --&gt; FilePath{{File Path}} &amp; Links[Markdown links]\n    Links --&quot;transformLink()&quot;--&gt; Relative\n    FilePath --&quot;slugifyFilePath()&quot;--&gt; Server[Server Slug]\n    Server --&gt; HTML[&quot;HTML File&quot;]\n    Server --&quot;canonicalizeServer()&quot;--&gt; Canonical\n    style Canonical stroke-width:4px\n\nHere are the main types of slugs with a rough description of each type of path:\n\nClientSlug: client-side slug, usually obtained through window.location. Contains the protocol (i.e. starts with https://)\nCanonicalSlug: should be used whenever you need to refer to the location of a file/note. Shouldn’t be a relative path and shouldn’t have leading or trailing slashes / either. Also shouldn’t have /index as an ending or a file extension.\nRelativeURL: must start with . or .. to indicate it’s a relative URL. Shouldn’t have /index as an ending or a file extension.\nServerSlug: cannot be relative and may not have leading or trailing slashes.\nFilePath: a real file path to a file on disk. Cannot be relative and must have a file extension.\n\nTo get a clearer picture of how these relate to each other, take a look at the path tests in quartz/path.test.ts."},"features/Latex":{"title":"Latex","links":[],"tags":["plugin/transformer"],"content":"Quartz uses Katex by default to typeset both inline and block math expressions at build time.\nSyntax §\nBlock Math §\nBlock math can be rendered by delimiting math expression with $$.\n$$\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n\nf(x)=∫−∞∞​f(^​ξ),e2πiξxdξ\na​=b+c=e+f​\n[1a​2b​3c​]\nInline Math §\nSimilarly, inline math can be rendered by delimiting math expression with a single $. For example, $e^{i\\pi} = -1$ produces eiπ=−1\nEscaping symbols §\nThere will be cases where you may have more than one $ in a paragraph at once which may accidentally trigger MathJax/Katex.\nTo get around this, you can escape the dollar sign by doing \\$ instead.\nFor example:\n\nIncorrect: I have $1 and you have $2 produces I have 1andyouhave2\nCorrect: I have \\$1 and you have \\$2 produces I have $1 and you have $2\n\nMathJax §\nIn quartz.config.ts, you can configure Quartz to use MathJax SVG rendering by replacing Plugin.Latex({ renderEngine: &#039;katex&#039; }) with Plugin.Latex({ renderEngine: &#039;mathjax&#039; })\nCustomization §\n\nRemoving Latex support: remove all instances of Plugin.Latex() from quartz.config.ts.\nPlugin: quartz/plugins/transformers/latex.ts\n"},"features/Mermaid-diagrams":{"title":"Mermaid diagrams","links":["features/Obsidian-compatibility"],"tags":[],"content":"Quartz supports Mermaid which allows you to add diagrams and charts to your notes. Mermaid supports a range of diagrams, such as flow charts, sequence diagrams, and timelines. This is enabled as a part of Obsidian compatibility and can be configured and enabled/disabled from that plugin.\nBy default, Quartz will render Mermaid diagrams to match the site theme.\n\n\n                  \n                  Warning \n                  \n                \nWondering why Mermaid diagrams may not be showing up even if you have them enabled? You may need to reorder your plugins so that Plugin.ObsidianFlavoredMarkdown() is after Plugin.SyntaxHighlighting().\n\nSyntax §\nTo add a Mermaid diagram, create a mermaid code block.\n```mermaid\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n```\n\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n"},"features/Obsidian-compatibility":{"title":"Obsidian compatibility","links":["features/wikilinks","features/Mermaid-diagrams","features/callouts"],"tags":["plugin/transformer"],"content":"Quartz was originally designed as a tool to publish Obsidian vaults as websites. Even as the scope of Quartz has widened over time, it hasn’t lost the ability to seamlessly interoperate with Obsidian.\nBy default, Quartz ships with Plugin.ObsidianFlavoredMarkdown which is a transformer plugin that adds support for Obsidian Flavored Markdown. This includes support for features like wikilinks and Mermaid diagrams.\nIt also ships with support for frontmatter parsing with the same fields that Obsidian uses through the Plugin.FrontMatter transformer plugin.\nFinally, Quartz also provides Plugin.CrawlLinks which allows you to customize Quartz’s link resolution behaviour to match Obsidian.\nConfiguration §\n\nFrontmatter parsing:\n\nDisabling: remove all instances of Plugin.FrontMatter() from quartz.config.ts.\nCustomize default values for frontmatter: edit quartz/plugins/transformers/frontmatter.ts\n\n\nObsidian Flavored Markdown:\n\nDisabling: remove all instances of Plugin.ObsidianFlavoredMarkdown() from quartz.config.ts\nCustomizing features: Plugin.ObsidianFlavoredMarkdown has several other options to toggle on and off:\n\ncomments: whether to enable %% style Obsidian comments. Defaults to true\nhighlight: whether to enable == style highlights. Defaults to true\nwikilinks: whether to enable turning wikilinks into regular links. Defaults to true\ncallouts: whether to enable callouts. Defaults to true\nmermaid: whether to enable Mermaid diagrams. Defaults to true\nparseTags: whether to try and parse tags in the content body. Defaults to true\nenableInHtmlEmbed: whether to try and parse Obsidian flavoured markdown in raw HTML. Defaults to false\n\n\n\n\nLink resolution behaviour:\n\nDisabling: remove all instances of Plugin.CrawlLinks() from quartz.config.ts\nChanging link resolution preference: set markdownLinkResolution to one of absolute, relative or shortest\n\n\n"},"features/RSS-Feed":{"title":"RSS Feed","links":["configuration"],"tags":[],"content":"Quartz creates an RSS feed for all the content on your site by generating an index.xml file that RSS readers can subscribe to. Because of the RSS spec, this requires the baseUrl property in your configuration to be set properly for RSS readers to pick it up properly.\nConfiguration §\n\nRemove RSS feed: set the enableRSS field of Plugin.ContentIndex in quartz.config.ts to be false.\n"},"features/SPA-Routing":{"title":"SPA Routing","links":["configuration"],"tags":[],"content":"Single-page-app style rendering. This prevents flashes of unstyled content and improves the smoothness of Quartz.\nUnder the hood, this is done by hijacking page navigations and instead fetching the HTML via a GET request and then diffing and selectively replacing parts of the page using micromorph. This allows us to change the content of the page without fully refreshing the page, reducing the amount of content that the browser needs to load.\nConfiguration §\n\nDisable SPA Routing: set the enableSPA field of the configuration in quartz.config.ts to be false.\n"},"features/backlinks":{"title":"Backlinks","links":["features/popover-previews"],"tags":["component"],"content":"A backlink for a note is a link from another note to that note. Links in the backlink pane also feature rich popover previews if you have that feature enabled.\nCustomization §\n\nRemoving backlinks: delete all usages of Component.Backlinks() from quartz.layout.ts.\nComponent: quartz/components/Backlinks.tsx\nStyle: quartz/components/styles/backlinks.scss\nScript: quartz/components/scripts/search.inline.ts\n"},"features/callouts":{"title":"Callouts","links":[],"tags":["plugin/transformer"],"content":"Quartz supports the same Admonition-callout syntax as Obsidian.\nThis includes\n\n12 Distinct callout types (each with several aliases)\nCollapsable callouts\n\n&gt; [!info] Title\n&gt; \n&gt; This is a callout!\n\nSee documentation on supported types and syntax here.\n\n\n                  \n                  Warning \n                  \n                \nWondering why callouts may not be showing up even if you have them enabled? You may need to reorder your plugins so that Plugin.ObsidianFlavoredMarkdown() is after Plugin.SyntaxHighlighting().\n\nCustomization §\n\nDisable callouts: simply pass callouts: false to the plugin: Plugin.ObsidianFlavoredMarkdown({ callouts: false })\nEditing icons: quartz/plugins/transformers/ofm.ts\n\nShowcase §\n\n\n                  \n                  Info \n                  \n                \nDefault title\n\n\n\n                  \n                  Can callouts be nested? \n                  \n                  \n                \n                \n\n\n                  \n                  Yes!, they can. \n                  \n                  \n                \n                \n\n\n                  \n                  You can even use multiple layers of nesting. \n                  \n                \n\n\n\n\n\n                  \n                  Examples \n                  \n                \nAliases: example\n\n\n\n                  \n                  Notes \n                  \n                \nAliases: note\n\n\n\n                  \n                  Summaries \n                  \n                \nAliases: abstract, summary, tldr\n\n\n\n                  \n                  Info \n                  \n                \nAliases: info, todo\n\n\n\n                  \n                  Hint \n                  \n                \nAliases: tip, hint, important\n\n\n\n                  \n                  Success \n                  \n                \nAliases: success, check, done\n\n\n\n                  \n                  Question \n                  \n                \nAliases: question, help, faq\n\n\n\n                  \n                  Warning \n                  \n                \nAliases: warning, caution, attention\n\n\n\n                  \n                  Failure \n                  \n                \nAliases: failure, fail, missing\n\n\n\n                  \n                  Error \n                  \n                \nAliases: danger, error\n\n\n\n                  \n                  Bug \n                  \n                \nAliases: bug\n\n\n\n                  \n                  Quote \n                  \n                \nAliases: quote, cite\n"},"features/darkmode":{"title":"Darkmode","links":[],"tags":["component"],"content":"Quartz supports darkmode out of the box that respects the user’s theme preference. Any future manual toggles of the darkmode switch will be saved in the browser’s local storage so it can be persisted across future page loads.\nCustomization §\n\nRemoving darkmode: delete all usages of Component.Darkmode() from quartz.layout.ts.\nComponent: quartz/components/Darkmode.tsx\nStyle: quartz/components/styles/darkmode.scss\nScript: quartz/components/scripts/darkmode.inline.ts\n"},"features/folder-and-tag-listings":{"title":"Folder and Tag Listings","links":["authoring-content","advanced/creating-components"],"tags":["plugin/emitter"],"content":"Quartz creates listing pages for any folders and tags you have.\nFolder Listings §\nQuartz will generate an index page for all the pages under that folder. This includes any content that is multiple levels deep.\nAdditionally, Quartz will also generate pages for subfolders. Say you have a note in a nested folder content/abc/def/note.md. Then, Quartz would generate a page for all the notes under abc and a page for all the notes under abc/def.\nBy default, Quartz will title the page Folder: &lt;name of folder&gt; and no description. You can override this by creating an index.md file in the folder with the title frontmatter field. Any content you write in this file will also be used in the description of the folder.\nTag Listings §\nQuartz will also create an index page for each unique tag in your vault and render a list of all notes with that tag.\nQuartz also supports tag hierarchies as well (e.g. plugin/emitter) and will also render a separate tag page for each layer of the tag hierarchy. It will also create a default global tag index page at /tags that displays a list of all the tags in your Quartz.\nCustomization §\nThe layout for both the folder and content pages can be customized. By default, they use the defaultListPageLayout in quartz.layouts.ts. If you’d like to make more involved changes to the layout and don’t mind editing some Quartz components, you can take a look at quartz/components/pages/FolderContent.tsx and quartz/components/pages/TagContent.tsx respectively.\n\nRemoving folder listings: remove Plugin.FolderPage() from emitters in quartz.config.ts\nRemoving tag listings: remove Plugin.TagPage() from emitters in quartz.config.ts\n"},"features/full-text-search":{"title":"Full-text Search","links":["configuration"],"tags":["component"],"content":"Full-text search in Quartz is powered by Flexsearch. It’s fast enough to return search results in under 10ms for Quartzs as large as half a million words.\nIt can be opened by either clicking on the search bar or pressing ⌘+K. The top 5 search results are shown on each query. Matching subterms are highlighted and the most relevant 30 words are excerpted. Clicking on a search result will navigate to that page.\nThis component is also keyboard accessible: Tab and Shift+Tab will cycle forward and backward through search results and Enter will navigate to the highlighted result (first result by default).\n\n\n                  \n                  Info \n                  \n                \nSearch requires the ContentIndex emitter plugin to be present in the configuration.\n\nIndexing Behaviour §\nBy default, it indexes every page on the site with Markdown syntax removed. This means link URLs for instance are not indexed.\nIt properly tokenizes Chinese, Korean, and Japenese characters and constructs separate indexes for the title and content, weighing title matches above content matches.\nCustomization §\n\nRemoving search: delete all usages of Component.Search() from quartz.layout.ts.\nComponent: quartz/components/Search.tsx\nStyle: quartz/components/styles/search.scss\nScript: quartz/components/scripts/search.inline.ts\n\nYou can edit contextWindowWords or numSearchResults to suit your needs\n\n\n"},"features/graph-view":{"title":"Graph View","links":["configuration"],"tags":["component"],"content":"Quartz features a graph-view that can show both a local graph view and a global graph view.\n\nThe local graph view shows files that either link to the current file or are linked from the current file. In other words, it shows all notes that are at most one hop away.\nThe global graph view can be toggled by clicking the graph icon on the top-right of the local graph view. It shows all the notes in your graph and how they connect to each other.\n\nBy default, the node radius is proportional to the total number of incoming and outgoing internal links from that file.\nAdditionally, similar to how browsers highlight visited links a different colour, the graph view will also show nodes that you have visited in a different colour.\n\n\n                  \n                  Info \n                  \n                \nGraph View requires the ContentIndex emitter plugin to be present in the configuration.\n\nCustomization §\nMost configuration can be done by passing in options to Component.Graph().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Graph({\n  localGraph: {\n    drag: true, // whether to allow panning the view around\n    zoom: true, // whether to allow zooming in and out\n    depth: 1, // how many hops of notes to display\n    scale: 1.1, // default view scale\n    repelForce: 0.5, // how much nodes should repel each other\n    centerForce: 0.3, // how much force to use when trying to center the nodes\n    linkDistance: 30, // how long should the links be by default?\n    fontSize: 0.6, // what size should the node labels be?\n    opacityScale: 1, // how quickly do we fade out the labels when zooming out?\n  },\n  globalGraph: {\n    drag: true,\n    zoom: true,\n    depth: -1,\n    scale: 0.9,\n    repelForce: 0.5,\n    centerForce: 0.3,\n    linkDistance: 30,\n    fontSize: 0.6,\n    opacityScale: 1,\n  },\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nWant to customize it even more?\n\nRemoving graph view: delete all usages of Component.Graph() from quartz.layout.ts.\nComponent: quartz/components/Graph.tsx\nStyle: quartz/components/styles/graph.scss\nScript: quartz/components/scripts/graph.inline.ts\n"},"features/popover-previews":{"title":"Popover Previews","links":["advanced/creating-components"],"tags":[],"content":"Like Wikipedia, when you hover over a link in Quartz, there is a popup of a page preview that you can scroll to see the entire content. Links to headers will also scroll the popup to show that specific header in view.\nBy default, Quartz only fetches previews for pages inside your vault due to CORS. It does this by selecting all HTML elements with the popover-hint class. For most pages, this includes the page title, page metadata like words and time to read, tags, and the actual page content.\nWhen creating your own components, you can include this popover-hint class to also include it in the popover.\nConfiguration §\n\nRemove popovers: set the enablePopovers field in quartz.config.ts to be false.\nStyle: quartz/components/styles/popover.scss\nScript: quartz/components/scripts/popover.inline.ts\n"},"features/private-pages":{"title":"Private Pages","links":["advanced/making-plugins","configuration"],"tags":["plugin/filter"],"content":"There may be some notes you want to avoid publishing as a website. Quartz supports this through two mechanisms which can be used in conjunction:\nFilter Plugins §\nFilter plugins are plugins that filter out content based off of certain criteria. By default, Quartz uses the Plugin.RemoveDrafts plugin which filters out any note that has drafts: true in the frontmatter.\nIf you’d like to only publish a select number of notes, you can instead use Plugin.ExplicitPublish which will filter out all notes except for any that have publish: true in the frontmatter.\nignoreFiles §\nThis is a field in quartz.config.ts under the main configuration which allows you to specify a list of patterns to effectively exclude from parsing all together. Any valid glob pattern works here.\nCommon examples include:\n\nsome/folder: exclude the entire of some/folder\n*.md: exclude all files with a .md extension\n!*.md exclude all files that don’t have a .md extension\n**/private: exclude any files or folders named private at any level of nesting\n\n\n\n                  \n                  Warning \n                  \n                \nMarking something as private via either a plugin or through the ignoreFiles pattern will only prevent a page from being included in the final built site. If your GitHub repository is public, also be sure to include an ignore for those in the .gitignore of your Quartz. See the git documentation for more information.\n"},"features/syntax-highlighting":{"title":"Syntax Highlighting","links":[],"tags":["plugin/transformer"],"content":"Syntax highlighting in Quartz is completely done at build-time. This means that Quartz only ships pre-calculated CSS to highlight the right words so there is no heavy client-side bundle that does the syntax highlighting.\nAnd, unlike some client-side highlighters, it has a full TextMate parser grammar instead of using Regexes, allowing for highly accurate code highlighting.\nIn short, it generates HTML that looks exactly like your code in an editor like VS Code. Under the hood, it’s powered by Rehype Pretty Code which uses Shiki.\n\n\n                  \n                  Warning \n                  \n                \nSyntax highlighting does have an impact on build speed if you have a lot of code snippets in your notes.\n\nFormatting §\nText inside backticks on a line will be formatted like code.\n```ts\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n\n  return cleanPath + anchor\n}\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nTitles §\nAdd a file title to your code block, with text inside double quotes (&quot;&quot;):\n```js title=&quot;...&quot;\n\n```\n\nquartz/path.tsexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nLine highlighting §\nPlace a numeric range inside {}.\n```js {1-3,4}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nWord highlighting §\nA series of characters, like a literal regex.\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n\nconst [age, setAge] = useState(50)\nconst [name, setName] = useState(&quot;Taylor&quot;)\nLine numbers §\nSyntax highlighting has line numbers configured automatically. If you want to start line numbers at a specific number, use showLineNumbers{number}:\n```js showLineNumbers{number}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nEscaping code blocks §\nYou can format a codeblock inside of a codeblock by wrapping it with another level of backtick fences that has one more backtick than the previous fence.\n````\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n````\n\nCustomization §\n\nRemoving syntax highlighting: delete all usages of Plugin.SyntaxHighlighting() from quartz.config.ts.\nStyle: By default, Quartz uses derivatives of the GitHub light and dark themes. You can customize the colours in the quartz/styles/syntax.scss file.\nPlugin: quartz/plugins/transformers/syntax.ts\n"},"features/table-of-contents":{"title":"Table of Contents","links":[],"tags":["component","plugin/transformer"],"content":"Quartz can automatically generate a table of contents from a list of headings on each page. It will also show you your current scroll position on the site by marking headings you’ve scrolled through with a different colour.\nBy default, it will show all headers from H1 (# Title) all the way to H3 (### Title) and will only show the table of contents if there is more than 1 header on the page.\n\n\n                  \n                  Info \n                  \n                \nThis feature requires both Plugin.TableOfContents in your quartz.config.ts and Component.TableOfContents in your quartz.layout.ts to function correctly.\n\nCustomization §\n\nRemoving table of contents: remove all instances of Plugin.TableOfContents() from quartz.config.ts. and Component.TableOfContents() from quartz.layout.ts\nChanging the max depth: pass in a parameter to Plugin.TableOfContents({ maxDepth: 4 })\nChanging the minimum number of entries in the Table of Contents before it renders: pass in a parameter to Plugin.TableOfContents({ minEntries: 3 })\nComponent: quartz/components/TableOfContents.tsx\nStyle:\n\nModern (default): quartz/components/styles/toc.scss\nLegacy Quartz 3 style: quartz/components/styles/legacyToc.scss\n\n\nScript: quartz/components/scripts/toc.inline.ts\n"},"features/wikilinks":{"title":"Wikilinks","links":["features/Obsidian-compatibility"],"tags":[],"content":"Wikilinks were pioneered by earlier internet wikis to make it easier to write links across pages without needing to write Markdown or HTML links each time.\nQuartz supports Wikilinks by default and these links are resolved by Quartz using Plugin.CrawlLinks. See the Obsidian Help page on Internal Links for more information on Wikilink syntax.\nThis is enabled as a part of Obsidian compatibility and can be configured and enabled/disabled from that plugin.\nSyntax §\n\n[[Path to file]]: produces a link to Path to file with the text Path to file\n[[Path to file | Here&#039;s the title override]]: produces a link to Path to file with the text Here&#039;s the title override\n[[Path to file#anchor|Anchor]]: produces a link to the anchor Anchor in the file Path to file\n\n\n\n                  \n                  Warning \n                  \n                \nCurrently, Quartz does not support block references or note embed syntax.\n"},"tags/component":{"title":"Components","links":["advanced/creating-components"],"tags":[],"content":"Want to create your own custom component? Check out the advanced guide on creating components for more information."}}