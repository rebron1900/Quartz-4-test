{"Knowledge":{"title":"Knowledge","links":["showcase"],"tags":[],"content":"Quartz is a fast, batteries-included static-site generator that transforms Markdown content into fully functional websites. Thousands of students, developers, and teachers are already using Quartz to publish personal notes, wikis, and digital gardens to the web."},"authoring-content":{"title":"Authoring Content","links":["","build","features/callouts","features/wikilinks","features/private-pages"],"tags":[],"content":"All of the content in your Quartz should go in the /content folder. The content for the home page of your Quartz lives in content/index.md. If you’ve setup Quartz already, this folder should already be initailized. Any Markdown in this folder will get processed by Quartz.\nIt is recommended that you use Obsidian as a way to edit and maintain your Quartz. It comes with a nice editor and graphical interface to preview, edit, and link your local files and attachments.\nGot everything setup? Let’s build and preview your Quartz locally!\nSyntax §\nAs Quartz uses Markdown files as the main way of writing content, it fully supports Markdown syntax. By default, Quartz also ships with a few syntax extensions like Github Flavored Markdown (footnotes, strikethrough, tables, tasklists) and Obsidian Flavored Markdown (callouts, wikilinks).\nAdditionally, Quartz also allows you to specify additional metadata in your notes called frontmatter.\ncontent/note.md---\ntitle: Example Title\ndraft: false\ntags:\n  - example-tag\n---\n \nThe rest of your content lives here. You can use **Markdown** here :)\nSome common frontmatter fields that are natively supported by Quartz:\n\ntitle: Title of the page. If it isn’t provided, Quartz will use the name of the file as the title.\naliases: Other names for this note. This is a list of strings.\ndraft: Whether to publish the page or not. This is one way to make pages private in Quartz.\ndate: A string representing the day the note was published. Normally uses YYYY-MM-DD format.\n"},"build":{"title":"Building your Quartz","links":[""],"tags":[],"content":"Once you’ve initialized Quartz, let’s see what it looks like locally:\nnpx quartz build --serve\nThis will start a local web server to run your Quartz on your computer. Open a web browser and visit http://localhost:8080/ to view it.\n\n\n                  \n                  Flags and options \n                  \n                \nFor full help options, you can run npx quartz build --help.\nMost of these have sensible defaults but you can override them if you have a custom setup:\n\n-d or --directory: the content folder. This is normally just content\n-v or --verbose: print out extra logging information\n-o or --output: the output folder. This is normally just public\n--serve: run a local hot-reloading server to preview your Quartz\n--port: what port to run the local preview server on\n--concurrency: how many threads to use to parse notes\n\n"},"configuration":{"title":"Configuration","links":["layout","features/RSS-Feed","features/SPA-Routing","features/popover-previews","hosting","features/private-pages","features/graph-view","features/syntax-highlighting","advanced/making-plugins","features/Latex"],"tags":[],"content":"Quartz is meant to be extremely configurable, even if you don’t know any coding. Most of the configuration you should need can be done by just editing quartz.config.ts or changing the layout in quartz.layout.ts.\n\n\n                  \n                  Tip \n                  \n                \nIf you edit Quartz configuration using a text-editor that has TypeScript language support like VSCode, it will warn you when you you’ve made an error in your configuration, helping you avoid configuration mistakes!\n\nThe configuration of Quartz can be broken down into two main parts:\nquartz.config.tsconst config: QuartzConfig = {\n  configuration: { ... },\n  plugins: { ... },\n}\nGeneral Configuration §\nThis part of the configuration concerns anything that can affect the whole site. The following is a list breaking down all the things you can configure:\n\npageTitle: title of the site. This is also used when generating the RSS Feed for your site.\nenableSPA: whether to enable SPA Routing on your site.\nenablePopovers: whether to enable popover previews on your site.\nanalytics: what to use for analytics on your site. Values can be\n\nnull: don’t use analytics;\n{ provider: &#039;plausible&#039; }: use Plausible, a privacy-friendly alternative to Google Analytics; or\n{ provider: &#039;google&#039;, tagId: &lt;your-google-tag&gt; }: use Google Analytics\n\n\nbaseUrl: this is used for sitemaps and RSS feeds that require an absolute URL to know where the canonical ‘home’ of your site lives. This is normally the deployed URL of your site (e.g. quartz.jzhao.xyz for this site). Do not include the protocol (i.e. https://) or any leading or trailing slashes.\n\nThis should also include the subpath if you are hosting on GitHub pages without a custom domain. For example, if my repository is jackyzha0/quartz, GitHub pages would deploy to https://jackyzha0.github.io/quartz and the baseUrl would be jackyzha0.github.io/quartz\nNote that Quartz 4 will avoid using this as much as possible and use relative URLs whenever it can to make sure your site works no matter where you end up actually deploying it.\n\n\nignorePatterns: a list of glob patterns that Quartz should ignore and not search through when looking for files inside the content folder. See private pages for more details.\ntheme: configure how the site looks.\n\ntypography: what fonts to use. Any font available on Google Fonts works here.\n\nheader: Font to use for headers\ncode: Font for inline and block quotes.\nbody: Font for everything\n\n\ncolors: controls the theming of the site.\n\nlight: page background\nlightgray: borders\ngray: graph links, heavier borders\ndarkgray: body text\ndark: header text and icons\nsecondary: link colour, current graph node\ntertiary: hover states and visited graph nodes\nhighlight: internal link background, highlighted text, highlighted lines of code\n\n\n\n\n\nPlugins §\nYou can think of Quartz plugins as a series of transformations over content.\n\nplugins: {\n  transformers: [...],\n  filters: [...],\n  emitters: [...],\n}\n\nTransformers map over content (e.g. parsing frontmatter, generating a description)\nFilters filter content (e.g. filtering out drafts)\nEmitters reduce over content (e.g. creating an RSS feed or pages that list all files with a specific tag)\n\nBy adding, removing, and reordering plugins from the tranformers, filters, and emitters fields, you can customize the behaviour of Quartz.\n\n\n                  \n                  Note \n                  \n                \nEach node is modified by every transformer in order. Some transformers are position-sensitive so you may need to take special note of whether it needs come before or after any other particular plugins.\n\nAdditionally, plugins may also have their own configuration settings that you can pass in. For example, the Latex plugin allows you to pass in a field specifying the renderEngine to choose between Katex and MathJax.\ntransformers: [\n  Plugin.FrontMatter(), // uses default options\n  Plugin.Latex({ renderEngine: &quot;katex&quot; }), // specify some options\n]\nIf you’d like to make your own plugins, read the guide on making plugins for more information."},"hosting":{"title":"Hosting","links":["features/RSS-Feed","configuration"],"tags":[],"content":"Quartz effectively turns your Markdown files and other resources into a bundle of HTML, JS, and CSS files (a website!).\nHowever, if you’d like to publish your site to the world, you need a way to host it online. This guide will detail how to deploy with either GitHub Pages or Cloudflare pages but any service that allows you to deploy static HTML should work as well (e.g. Netlify, Replit, etc.)\n\n\n                  \n                  Tip \n                  \n                \nSome Quartz features (like RSS Feed and sitemap generation) require baseUrl to be configured properly in your configuration to work properly. Make sure you set this before deploying!\n\nCloudflare Pages §\n\nLog in to the Cloudflare dashboard and select your account.\nIn Account Home, select Workers &amp; Pages &gt; Create application &gt; Pages &gt; Connect to Git.\nSelect the new GitHub repository that you created and, in the Set up builds and deployments section, provide the following information:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfiguration optionValueProduction branchv4-alphaFramework presetNoneBuild commandnpx quartz buildBuild output directorypublic\nPress “Save and deploy” and Cloudflare should have a deployed version of your site in about a minute. Then, every time you sync your Quartz changes to GitHub, your site should be updated.\nTo add a custom domain, check out Cloudflare’s documentation.\nGitHub Pages §\nLike Quartz 3, you can deploy the site generated by Quartz 4 via GitHub Pages.\nIn your local Quartz, create a new file quartz/.github/workflows/deploy.yaml.\nquartz/.github/workflows/deploy.yamlname: Deploy Quartz site to GitHub Pages\n \non:\n  push:\n    branches:\n      - v4-alpha\n \npermissions:\n  contents: read\n  pages: write\n  id-token: write\n \nconcurrency:\n  group: &quot;pages&quot;\n  cancel-in-progress: false\n \njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0 # Fetch all history for git info\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18.14\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build Quartz\n        run: npx quartz build\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: public\n \n  deploy:\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\nThen, commit these changes by doing npx quartz sync. This should deploy your site to &lt;github-username&gt;.github.io/&lt;repository-name&gt;.\nCustom Domain §\nHere’s how to add a custom domain to your GitHub pages deployment.\n\nHead to the “Settings” tab of your forked repository.\nIn the “Code and automation” section of the sidebar, click “Pages”.\nUnder “Custom Domain”, type your custom domain and click “Save”.\nThis next step depends on whether you are using an apex domain (example.com) or a subdomain (subdomain.example.com).\n\nIf you are using an apex domain, navigate to your DNS provider and create an A record that points your apex domain to GitHub’s name servers which have the following IP addresses:\n\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n\n\nIf you are using a subdomain, navigate to your DNS provider and create a CNAME record that points your subdomain to the default domain for your site. For example, if you want to use the subdomain quartz.example.com for your user site, create a CNAME record that points quartz.example.com to &lt;github-username&gt;.github.io.\n\n\n\nThe above shows a screenshot of Google Domains configured for both jzhao.xyz (an apex domain) and quartz.jzhao.xyz (a subdomain).\nSee the GitHub documentation for more detail about how to setup your own custom domain with GitHub Pages.\n\n\n                  \n                  Why aren&#039;t my changes showing up? \n                  \n                \nThere could be many different reasons why your changes aren’t showing up but the most likely reason is that you forgot to push your changes to GitHub.\nMake sure you save your changes to Git and sync it to GitHub by doing npx quartz sync. This will also make sure to pull any updates you may have made from other devices so you have them locally.\n"},"":{"title":"Welcome to Quartz 4","links":["showcase","authoring-content","configuration","layout","build","hosting","migrating-from-Quartz-3","features/Obsidian-compatibility","features/full-text-search","features/graph-view","features/wikilinks","features/backlinks","features/Latex","features/syntax-highlighting","features/popover-previews","features","advanced/creating-components","features/SPA-Routing","advanced/making-plugins","philosophy","advanced/architecture","upgrading"],"tags":[],"content":"Quartz is a fast, batteries-included static-site generator that transforms Markdown content into fully functional websites. Thousands of students, developers, and teachers are already using Quartz to publish personal notes, wikis, and digital gardens to the web.\n🪴 Get Started §\nQuartz requires at least Node v18.14 to function correctly. Ensure you have this installed on your machine before continuing.\nThen, in your terminal of choice, enter the following commands line by line:\ngit clone https://github.com/jackyzha0/quartz.git\ncd quartz\ngit checkout v4-alpha\nnpm i\nnpx quartz create\nThis will guide you through initializing your Quartz with content. Once you’ve done so, see how to:\n\nAuthor content in Quartz\nConfigure Quartz’s behaviour\nChange Quartz’s layout\nBuild and preview Quartz\nHost Quartz online\n\n\n\n                  \n                  Info \n                  \n                \nComing from Quartz 3? See the migration guide for the differences between Quartz 3 and Quartz 4 and how to migrate.\n\n🔧 Features §\n\nObsidian compatibility, full-text search, graph view, wikilinks, backlinks, Latex, syntax highlighting, popover previews, and many more right out of the box\nHot-reload for both configuration and content\nSimple JSX layouts and page components\nRidiculously fast page loads and tiny bundle sizes\nFully-customizable parsing, filtering, and page generation through plugins\n\nFor a comprehensive list of features, visit the features page. You can read more about the why behind these features on the philosophy page and a technical overview on the architecture page.\n🚧 Troubleshooting + Updating §\nHaving trouble with Quartz? Try searching for your issue using the search feature. If you haven’t already, upgrade to the newest version of Quartz to see if this fixes your issue.\nIf you’re still having trouble, feel free to submit an issue if you feel you found a bug or ask for help in our Discord Community."},"layout":{"title":"Layout","links":["tags/component","advanced/creating-components","configuration"],"tags":[],"content":"Certain emitters may also output HTML files. To enable easy customization, these emitters allow you to fully rearrange the layout of the page. The default page layouts can be found in quartz.layout.ts.\nEach page is composed of multiple different sections which contain QuartzComponents. The following code snippet lists all of the valid sections that you can add components to:\nquartz/cfg.tsexport interface FullPageLayout {\n  head: QuartzComponent // single component\n  header: QuartzComponent[] // laid out horizontally\n  beforeBody: QuartzComponent[] // laid out vertically\n  pageBody: QuartzComponent // single component\n  left: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  right: QuartzComponent[] // vertical on desktop, horizontal on mobile\n  footer: QuartzComponent // single component\n}\nThese correspond to following parts of the page:\n\n\n\n                  \n                  Note \n                  \n                \nThere are two additional layout fields that are not shown in the above diagram.\n\nhead is a single component that renders the &lt;head&gt; tag in the HTML. This doesn’t appear visually on the page and is only is responsible for metadata about the document like the tab title, scripts, and styles.\nheader is a set of components that are laid out horizontally and appears before the beforeBody section. This enables you to replicate the old Quartz 3 header bar where the title, search bar, and dark mode toggle. By default, Quartz 4 doesn’t place any components in the header.\n\n\nQuartz components, like plugins, can take in additional properties as configuration options. If you’re familiar with React terminology, you can think of them as Higher-order Components.\nSee a list of all the components for all available components along with their configuration options. You can also checkout the guide on creating components if you’re interested in further customizing the behaviour of Quartz.\nStyle §\nMost meaningful style changes like colour scheme and font can be done simply through the general configuration options. However, if you’d like to make more involved style changes, you can do this by writing your own styles. Quartz 4, like Quartz 3, uses Sass for styling.\nYou can see the base style sheet in quartz/styles/base.scss and write your own in quartz/styles/custom.scss.\n\n\n                  \n                  Note \n                  \n                \nSome components may provide their own styling as well! For example, quartz/components/Darkmode.tsx imports styles from quartz/components/styles/darkmode.scss. If you’d like to customize styling for a specific component, double check the component definition to see how its styles are defined.\n"},"migrating-from-Quartz-3":{"title":"Migrating from Quartz 3","links":["configuration","advanced/creating-components","hosting"],"tags":[],"content":"As you already have Quartz locally, you don’t need to fork or clone it again. Simply just checkout the alpha branch, install the dependencies, and import your old vault.\ngit checkout v4-alpha\ngit pull upstream v4-alpha\nnpm i\nnpx quartz create\nWhen running npx quartz create, you will be prompted as to how to initialize your content folder. Here, you can choose to import or link your previous content folder and Quartz should work just as you expect it to.\n\n\n                  \n                  Note \n                  \n                \nIf the existing content folder you’d like to use is at the same path on a different branch, clone the repo again somewhere at a different path in order to use it.\n\nKey changes §\n\nRemoving Hugo and hugo-obsidian: Hugo worked well for earlier versions of Quartz but it also made it hard for people outside of the Golang and Hugo communities to fully understand what Quartz was doing under the hood and be able to properly customize it to their needs. Quartz 4 now uses a Node-based static-site generation process which should lead to a much more helpful error messages and an overall smoother user experience.\nFull-hot reload: The many rough edges of how hugo-obsidian integrated with Hugo meant that watch mode didn’t re-trigger hugo-obsidian to update the content index. This lead to a lot of weird cases where the watch mode output wasn’t accurate. Quartz 4 now uses a cohesive parse, filter, and emit pipeline which gets run on every change so hot-reloads are always accurate.\nReplacing Go template syntax with JSX: Quartz 3 used Go templates to create layouts for pages. However, the syntax isn’t great for doing any sort of complex rendering (like text processing) and it got very difficult to make any meaningful layout changes to Quartz 3. Quartz 4 uses an extension of JavaScript syntax called JSX which allows you to write layout code that looks like HTML in JavaScript which is significantly easier to understand and maintain.\nA new extensible configuration and plugin system: Quartz 3 was hard to configure without technical knowledge of how Hugo’s partials worked. Extensions were even hard to make. Quartz 4’s configuration and plugin system is designed to be extended by users while making updating to new versions of Quartz easy.\n\nThings to update §\n\nSome HTML layout may not be the same between Quartz 3 and Quartz 4. If you depended on a particular HTML hierarchy or class names, you may need to update your custom CSS to reflect these changes.\nIf you customized the layout of Quartz 3, you may need to translate these changes from Go templates back to JSX as Quartz 4 no longer uses Hugo. For components, check out the guide on creating components for more details on this.\nYou will also need to update your deploy scripts. See the hosting guide for more details.\n"},"philosophy":{"title":"Philosophy of Quartz","links":[],"tags":[],"content":"A garden should be a true hypertext §\n\nThe garden is the web as topology. Every walk through the garden creates new paths, new meanings, and when we add things to the garden we add them in a way that allows many future, unpredicted relationships.\n(The Garden and the Stream)\n\nThe problem with the file cabinet is that it focuses on efficiency of access and interoperability rather than generativity and creativity. Thinking is not linear, nor is it hierarchical. In fact, not many things are linear or hierarchical at all. Then why is it that most tools and thinking strategies assume a nice chronological or hierarchical order for my thought processes? The ideal tool for thought for me would embrace the messiness of my mind, and organically help insights emerge from chaos instead of forcing an artificial order. A rhizomatic, not arboresecent, form of note taking.\nMy goal with a digital garden is not purely as an organizing system and information store (though it works nicely for that). I want my digital garden to be a playground for new ways ideas can connect together. As a result, existing formal organizing systems like Zettelkasten or the hierarchical folder structures of Notion don’t work well for me. There is way too much upfront friction that by the time I’ve thought about how to organize my thought into folders categories, I’ve lost it.\nQuartz embraces the inherent rhizomatic and web-like nature of our thinking and tries to encourage note-taking in a similar form.\n\nA garden should be shared §\nThe goal of digital gardening should be to tap into your network’s collective intelligence to create constructive feedback loops. If done well, I have a shareable representation of my thoughts that I can send out into the world and people can respond. Even for my most half-baked thoughts, this helps me create a feedback cycle to strengthen and fully flesh out that idea.\nQuartz is designed first and foremost as a tool for publishing digital gardens to the web. To me, digital gardening is not just passive knowledge collection. It’s a form of expression and sharing.\n\n“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.”\n— Richard Hamming\n\nThe goal of Quartz is to make sharing your digital garden free and simple. At its core, Quartz is designed to be easy to use enough for non-technical people to get going but also powerful enough that senior developers can tweak it to work how they’d like it to work."},"showcase":{"title":"Quartz Showcase","links":[],"tags":[],"content":"Want to see what Quartz can do? Here are some cool community gardens:\n\nQuartz Documentation (this site!)\nJacky Zhao’s Garden\nBrandon Boswell’s Garden\nScaling Synthesis - A hypertext research notebook\nAWAGMI Intern Notes\nCourse notes for Information Technology Advanced Theory\nData Dictionary 🧠\nsspaeti.com’s Second Brain\noldwinterの数字花园\nAbhijeet’s Math Wiki\nMike’s AI Garden 🤖🪴\n\nIf you want to see your own on here, submit a Pull Request adding yourself to this file!"},"upgrading":{"title":"Upgrading Quartz","links":["migrating-from-Quartz-3"],"tags":[],"content":"tet\n\n\n                  \n                  Note \n                  \n                \nThis is specifically a guide for upgrading Quartz 4 version to a more recent update. If you are coming from Quartz 3, check out the migration guide for more info.\n\nTo fetch the latest Quartz updates, simply run\nnpx quartz upgrade\nAs Quartz uses git under the hood for versioning, updating effectively ‘pulls’ in the updates from the official Quartz GitHub repository. If you have local changes that might conflict with the updates, you may need to resolve these manually yourself (or, pull manually using git pull origin upstream).\nIf you have the GitHub desktop app, this will automatically open to help you resolve the conflicts. Otherwise, you will need to resolve this in a text editor like VSCode. For more help on resolving conflicts manually, check out the GitHub guide on resolving merge conflicts."},"Linux/Systemd-入门教程-实战篇":{"title":"Systemd 入门教程：实战篇","links":[],"tags":["linux"],"content":"上一篇文章，我介绍了 Systemd 的主要命令，今天介绍如何使用它完成一些基本的任务。\n\n一、开机启动 §\n对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。\n如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。\n$ sudo systemctl enable httpd\n上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。\n这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\n二、启动服务 §\n设置开机启动以后，软件并不会立即启动，必须等到下一次开机。如果想现在就运行该软件，那么要执行systemctl start命令。\n\n \n$ sudo systemctl start httpd\n\n执行上面的命令以后，有可能启动失败，因此要用systemctl status命令查看一下该服务的状态。\n\n \n$ sudo systemctl status httpd\n \nhttpd.service - The Apache HTTP Server\n   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled)\n   Active: active (running) since 金 2014-12-05 12:18:22 JST; 7min ago\n Main PID: 4349 (httpd)\n   Status: &quot;Total requests: 1; Current requests/sec: 0; Current traffic:   0 B/sec&quot;\n   CGroup: /system.slice/httpd.service\n           ├─4349 /usr/sbin/httpd -DFOREGROUND\n           ├─4350 /usr/sbin/httpd -DFOREGROUND\n           ├─4351 /usr/sbin/httpd -DFOREGROUND\n           ├─4352 /usr/sbin/httpd -DFOREGROUND\n           ├─4353 /usr/sbin/httpd -DFOREGROUND\n           └─4354 /usr/sbin/httpd -DFOREGROUND\n \n12月 05 12:18:22 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...\n12月 05 12:18:22 localhost.localdomain systemd[1]: Started The Apache HTTP Server.\n12月 05 12:22:40 localhost.localdomain systemd[1]: Started The Apache HTTP Server.\n\n上面的输出结果含义如下。\n\n\nLoaded行：配置文件的位置，是否设为开机启动\nActive行：表示正在运行\nMain PID行：主进程ID\nStatus行：由应用本身（这里是 httpd ）提供的软件当前状态\nCGroup块：应用的所有子进程\n日志块：应用的日志\n\n\n三、停止服务 §\n终止正在运行的服务，需要执行systemctl stop命令。\n\n \n$ sudo systemctl stop httpd.service\n\n有时候，该命令可能没有响应，服务停不下来。这时候就不得不”杀进程”了，向正在运行的进程发出kill信号。\n\n \n$ sudo systemctl kill httpd.service\n\n此外，重启服务要执行systemctl restart命令。\n\n \n$ sudo systemctl restart httpd.service\n\n四、读懂配置文件 §\n一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。\n前面说过，配置文件主要放在/usr/lib/systemd/system目录，也可能在/etc/systemd/system目录。找到配置文件以后，使用文本编辑器打开即可。\nsystemctl cat命令可以用来查看配置文件，下面以sshd.service文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。\n\n \n$ systemctl cat sshd.service\n \n[Unit]\nDescription=OpenSSH server daemon\nDocumentation=man:sshd(8) man:sshd_config(5)\nAfter=network.target sshd-keygen.service\nWants=sshd-keygen.service\n \n[Service]\nEnvironmentFile=/etc/sysconfig/sshd\nExecStart=/usr/sbin/sshd -D $OPTIONS\nExecReload=/bin/kill -HUP $MAINPID\nType=simple\nKillMode=process\nRestart=on-failure\nRestartSec=42s\n \n[Install]\nWantedBy=multi-user.target\n\n可以看到，配置文件分成几个区块，每个区块包含若干条键值对。\n下面依次解释每个区块的内容。\n五、 [Unit] 区块：启动顺序与依赖关系。 §\nUnit区块的Description字段给出当前服务的简单描述，Documentation字段给出文档位置。\n接下来的设置是启动顺序和依赖关系，这个比较重要。\n\nAfter字段：表示如果network.target或sshd-keygen.service需要启动，那么sshd.service应该在它们之后启动。\n\n相应地，还有一个Before字段，定义sshd.service应该在哪些服务之前启动。\n注意，After和Before字段只涉及启动顺序，不涉及依赖关系。\n举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在 postgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。\n设置依赖关系，需要使用Wants字段和Requires字段。\n\nWants字段：表示sshd.service与sshd-keygen.service之间存在”弱依赖”关系，即如果”sshd-keygen.service”启动失败或停止运行，不影响sshd.service继续执行。\n\nRequires字段则表示”强依赖”关系，即如果该服务启动失败或异常退出，那么sshd.service也必须退出。\n注意，Wants字段与Requires字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。\n六、[Service] 区块：启动行为 §\nService区块定义如何启动当前服务。\n6.1 启动命令 §\n许多软件都有自己的环境参数文件，该文件可以用EnvironmentFile字段读取。\n\nEnvironmentFile字段：指定当前服务的环境参数文件。该文件内部的key=value键值对，可以用$key的形式，在当前配置文件中获取。\n\n上面的例子中，sshd 的环境参数文件是/etc/sysconfig/sshd。\n配置文件里面最重要的字段是ExecStart。\n\nExecStart字段：定义启动进程时执行的命令。\n\n上面的例子中，启动sshd，执行的命令是/usr/sbin/sshd -D $OPTIONS，其中的变量$OPTIONS就来自EnvironmentFile字段指定的环境参数文件。\n与之作用相似的，还有如下这些字段。\n\n\nExecReload字段：重启服务时执行的命令\nExecStop字段：停止服务时执行的命令\nExecStartPre字段：启动服务之前执行的命令\nExecStartPost字段：启动服务之后执行的命令\nExecStopPost字段：停止服务之后执行的命令\n\n\n请看下面的例子。\n\n \n[Service]\nExecStart=/bin/echo execstart1\nExecStart=\nExecStart=/bin/echo execstart2\nExecStartPost=/bin/echo post1\nExecStartPost=/bin/echo post2\n\n上面这个配置文件，第二行ExecStart设为空值，等于取消了第一行的设置，运行结果如下。\n\n \nexecstart2\npost1\npost2\n\n所有的启动设置之前，都可以加上一个连词号（-），表示”抑制错误”，即发生错误的时候，不影响其他命令的执行。比如，EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），就表示即使/etc/sysconfig/sshd文件不存在，也不会抛出错误。\n6.2 启动类型 §\nType字段定义启动类型。它可以设置的值如下。\n\n\nsimple（默认值）：ExecStart字段启动的进程为主进程\nforking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程\noneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务\ndbus：类似于simple，但会等待 D-Bus 信号后启动\nnotify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务\nidle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合\n\n\n下面是一个oneshot的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。\n\n \n[Unit]\nDescription=Switch-off Touchpad\n \n[Service]\nType=oneshot\nExecStart=/usr/bin/touchpad-off\n \n[Install]\nWantedBy=multi-user.target\n\n上面的配置文件，启动类型设为oneshot，就表明这个服务只要运行一次就够了，不需要长期运行。\n如果关闭以后，将来某个时候还想打开，配置文件修改如下。\n\n \n[Unit]\nDescription=Switch-off Touchpad\n \n[Service]\nType=oneshot\nExecStart=/usr/bin/touchpad-off start\nExecStop=/usr/bin/touchpad-off stop\nRemainAfterExit=yes\n \n[Install]\nWantedBy=multi-user.target\n\n上面配置文件中，RemainAfterExit字段设为yes，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用systemctl stop命令停止服务，ExecStop指定的命令就会执行，从而重新开启触摸板。\n6.3 重启行为 §\nService区块有一些字段，定义了重启行为。\n\nKillMode字段：定义 Systemd 如何停止 sshd 服务。\n\n上面这个例子中，将KillMode设为process，表示只停止主进程，不停止任何sshd 子进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。\nKillMode字段可以设置的值如下。\n\n\ncontrol-group（默认值）：当前控制组里面的所有子进程，都会被杀掉\nprocess：只杀主进程\nmixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号\nnone：没有进程会被杀掉，只是执行服务的 stop 命令。\n\n\n接下来是Restart字段。\n\nRestart字段：定义了 sshd 退出后，Systemd 的重启方式。\n\n上面的例子中，Restart设为on-failure，表示任何意外的失败，就将重启sshd。如果 sshd 正常停止（比如执行systemctl stop命令），它就不会重启。\nRestart字段可以设置的值如下。\n\n\nno（默认值）：退出后不会重启\non-success：只有正常退出时（退出状态码为0），才会重启\non-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启\non-abnormal：只有被信号终止和超时，才会重启\non-abort：只有在收到没有捕捉到的信号终止时，才会重启\non-watchdog：超时退出，才会重启\nalways：不管是什么退出原因，总是重启\n\n\n对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal。\n最后是RestartSec字段。\n\nRestartSec字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待42秒。\n\n七、[Install] 区块 §\nInstall区块，定义如何安装这个配置文件，即怎样做到开机启动。\n\nWantedBy字段：表示该服务所在的 Target。\n\nTarget的含义是服务组，表示一组服务。WantedBy=multi-user.target指的是，sshd 所在的 Target 是multi-user.target。\n这个设置非常重要，因为执行systemctl enable sshd.service命令时，sshd.service的一个符号链接，就会放在/etc/systemd/system目录下面的multi-user.target.wants子目录之中。\nSystemd 有默认的启动 Target。\n\n \n$ systemctl get-default\nmulti-user.target\n\n上面的结果表示，默认的启动 Target 是multi-user.target。在这个组里的所有服务，都将开机启动。这就是为什么systemctl enable命令能设置开机启动的原因。\n使用 Target 的时候，systemctl list-dependencies命令和systemctl isolate命令也很有用。\n\n \n# 查看 multi-user.target 包含的所有服务\n$ systemctl list-dependencies multi-user.target\n \n# 切换到另一个 target\n# shutdown.target 就是关机状态\n$ sudo systemctl isolate shutdown.target\n\n一般来说，常用的 Target 有两个：一个是multi-user.target，表示多用户命令行状态；另一个是graphical.target，表示图形用户状态，它依赖于multi-user.target。官方文档有一张非常清晰的 Target 依赖关系图。\n八、Target 的配置文件 §\nTarget 也有自己的配置文件。\n\n \n$ systemctl cat multi-user.target\n \n[Unit]\nDescription=Multi-User System\nDocumentation=man:systemd.special(7)\nRequires=basic.target\nConflicts=rescue.service rescue.target\nAfter=basic.target rescue.service rescue.target\nAllowIsolate=yes\n\n注意，Target 配置文件里面没有启动命令。\n上面输出结果中，主要字段含义如下。\n\nRequires字段：要求basic.target一起运行。\nConflicts字段：冲突字段。如果rescue.service或rescue.target正在运行，multi-user.target就不能运行，反之亦然。\nAfter：表示multi-user.target在basic.target 、 rescue.service、 rescue.target之后启动，如果它们有启动的话。\nAllowIsolate：允许使用systemctl isolate命令切换到multi-user.target。\n\n九、修改配置文件后重启 §\n修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。\n\n \n# 重新加载配置文件\n$ sudo systemctl daemon-reload\n \n# 重启相关服务\n$ sudo systemctl restart foobar\n\n（完）"},"Linux/var-lib-docker-overlay2-占用很大-清理Docker占用的磁盘空间":{"title":"/var/lib/docker/overlay2 占用很大，清理Docker占用的磁盘空间","links":[],"tags":[],"content":"今天收到一个磁盘告警，告警的原因是一台 Jenkins 机器上某个磁盘空间满了。\n马上使用 df -h 命令看下使用情况\n\n上图是我优化后的截图，告警的时候磁盘使用量已经接近 100%。\n上图中看到的 overlay 分区是 Docker 的虚拟文件系统，其真实的文件系统是 /dev/vda1。所以我们要找到是什么原因大量占据了 /dev/vda1。\n一般有两种情况。\n无用的镜像和容器太多# §\n我们可以使用以下命令大致看下情况\ndocker system df -v\n\n# 用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及无tag的镜像。\ndocker system prune\n# 可以将没有容器使用 Docker 镜像都删掉。注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的Docker镜像都删掉了\ndocker system prune -a\n容器输出的日志太大# §\n这种情况往往是容器长时间运行，容器打印了大量的日志未清理，占据了大量磁盘空间。比如之前运行的一个Jenkins容器，运行几个月后，打印的日志占了近10个G的磁盘。这种情况下清理日志文件就行了。\n容器的日志文件在/var/lib/docker/containers/{containerId}下。\n[root@i-h8v5dv1n 55406a3ac6f4a59555897c606677201853973f4266c32284eeb8274682fd099d]# ls -al\ntotal 512\ndrwx-----x 4 root root   4096 Feb  8 17:57 .\ndrwx-----x 4 root root   4096 Feb  8 17:54 ..\n# -json.log就是日志文件\n-rw-r----- 1 root root 478546 Feb  8 18:05 55406a3ac6f4a59555897c606677201853973f4266c32284eeb8274682fd099d-json.log\ndrwx------ 2 root root   4096 Oct 28 15:01 checkpoints\n-rw------- 1 root root   4911 Feb  8 17:57 config.v2.json\n-rw-r--r-- 1 root root   1782 Feb  8 17:57 hostconfig.json\n-rw-r--r-- 1 root root     13 Feb  8 17:57 hostname\n-rw-r--r-- 1 root root    174 Feb  8 17:57 hosts\ndrwx-----x 2 root root   4096 Oct 28 15:01 mounts\n-rw-r--r-- 1 root root    131 Feb  8 17:57 resolv.conf\n-rw-r--r-- 1 root root     71 Feb  8 17:57 resolv.conf.hash\n可以删除日志文件，也可调整应用程序让打印的日志保持在某种大小。\n日志、大文件占用了 /dev/vda1 分区# §\n还有一种情况就是 一些日志文件，大文件占用了 /dev/vda1 分区。这个分区一般是挂载在 “/” 下面。\n所以我们可以重点关注下面几个目录：\n\n/var/tmp\n/var/log\n/root\n"},"Linux/常用命令":{"title":"常用命令","links":["../tags/nvm"],"tags":["nvm"],"content":"\n#nvm nvm 改 node 默认版本的方法：1、打开终端命令窗口；2、通过执行 nvm alias default v4.3.0 命令设置 nodejs 默认版本即可。\n"},"Obsidian/Minimal主题手册":{"title":"Minimal主题手册","links":[],"tags":[],"content":"Home - Minimal Documentation\nMinimal is an open source distraction-free interface for Obsidian, by @kepano.\nMinimal is the most popular Obsidian theme, and winner of the official Best Theme award. Minimal aims to make Obsidian feel native across platforms, and offer the flexibility to create your ideal second brain.\nSupport development on Buy me a coffee and Twitter\nGet started §\nInstall Minimal theme\n\nOpen Obsidian Settings\nGo to Appearance and click Manage\nUnder community themes search for “Minimal” and click Use\n\nInstall the companion plugin\n\nGo to Community plugins and turn off Safe mode\nSearch for Minimal Theme Settings and click Install, then Enable\n\nScreenshots §\nMinimal offers multiple options for background contrast including a true black option ideal for OLED devices. This feature also supports popular color schemes such as Solarized, Nord, and Gruvbox.\n\nHelper classes for tables and cards allow you to create powerful workflows.\n\nCombining focus mode with image grids and block width options allows you to immerse yourself in visual projects.\n\nMinimal includes support for dozens of popular plugins like Calendar, Kanban, Dataview, Outliner, Excalidraw, and more.\n\nEvery screen in the Obsidian app has been revised to create a cohesive experience, including settings, plugin browser, sync, publish, and file recovery.\n\nRecommended plugins §\nTo customize Minimal, install the following plugins:\n\nMinimal Theme Settings allows you to customize color schemes, fonts, Hotkeys, and theme features. This plugin is highly recommended for all users of Minimal\nHider hides Obsidian UI elements such as window frame, scrollbars, tooltips, etc. When using Hider to turn off the app toolbar/ribbon, it can be accessed by hovering over the bottom left edge of the window\nContextual Typography is required for advanced layout features such as Image grids and Block width\nStyle Settings allows you to create custom Color schemes\n\nApp-level features §\n\nActive line highlighting\nBackground contrast\nColor schemes\nColorful frame\nColorful headings\nFocus mode\nHotkeys\nImage zoom\nLine width\nMatch system theme\nTab styles\nText labels for primary navigation\nTranslucency\n\nBlock-level features §\n\nBlock width\nHelper classes\nImage filters\n\nBlock types §\n\nCards\nCharts\nChecklists\nEmbeds and transclusions\nIframes\nImages\nImage grids\nMaps\nProgress bars\nTables\n\nPlugin support §\n\nCalendar\nChecklist\nCharts plugin\nContextual Typography — required for Image grids and Block width\nDataview\nDictionary\nExcalidraw\nGit\nHider\nKanban\nLeaflet\nOutliner\nQuickAdd\nSortable — recommended for Cards and Tables\nStyle Settings\n\nGuides §\n\nCreate a movie database\nMake Obsidian feel like a native macOS app\n\nTroubleshooting §\nVisit the Help page for troubleshooting. Have a question? Join the Minimal channel on the official Obsidian Discord.\nContributing §\nIf you would like add Plugin support, or have found a bug you would like to help fix, don’t hesitate to open a pull request. Have a question? Join the Minimal channel on the official Obsidian Discord.\n\nSponsorship\nLocal development\nLocalization\nPlugin support\nLicense\nHelp\n"},"Obsidian/Obsidian1-0快开网页教程":{"title":"Obsidian1.0快开网页教程","links":[],"tags":["obsidian"],"content":"\n需要Obsidian1.0版本及以上\n\n所需插件 §\n如何下载和手动安装插件方法在最后。\n\nQuickAdd\nobsidian-web-browser\n插件发布页： releases\nCommander\n\n设置流程 §\n脚本设置 §\n新建txt文件，将下面代码粘贴到txt文件并将https://www.notion.so/ 替换想要的网址后保存。\nmodule.exports = startob  async function startob () {  window.open(&#039;https://www.notion.so/&#039;) }\n重命名为**.js文件并放到Obsidian主库中的任意位置。\nQuickadd §\n\n添加宏\n\n\n\n配置宏，点击Configure\n\n\n在User Scripts选择上步创建的脚本，点击Add添加。\n\n\n添加命令\n\n\n\n\n配置命令，选择刚创建的宏，然后点击⚡启动即可。\n\n\n\nCommander §\n可选择添加命令到侧边栏、页首、状态栏等位置，还可隐藏不常用的命令。\n\n选择添加命令，选择配置好的QuickAdd命令设置图标保存即大功告成。\n插件下载 §\n\n插件在如下网站搜索下载\n\nJohnny-插件下载地址\n插件安装 §\n知乎-如何安装插件"},"Obsidian/Termux配置Git搭配Obsidian":{"title":"Termux配置Git搭配Obsidian","links":[],"tags":["obsidian","git"],"content":"Install Termux and Termux Widget §\nFrom Github Termux ,[^1] Github Termux Widget [^2] download the APKs and install them. You can use F-Droid as well.\nGive Termux access to your storage using the following command :[^3]\ntermux-setup-storage\nSetup Git and Github for Manipulating Repositories §\nUse the following commands to setup git and github via HTTPS :\npkg update &amp;&amp; pkg upgrade\npkg install git\npkg install gh\nYou can use SSH as well\nLogin to your Github account :\ngh auth login\nUpdate the git configs :\ngit config --global user.name &quot;name&quot;\ngit config --global user.email &quot;email&quot;\nNow you should clone your repository, try to use the following commands :\ngit status\ngit pull\ngit commit\ngit push\nIf you are on Android 12, you’ll get an error with the command required to add the repository to a security list or something like that. Do it, and these commands should work.\nSetup the Sync Script Shortcut §\nCreate a directory for the shortcuts :[^4]\nmkdir -p /data/data/com.termux/files/home/.shortcuts\nchmod 700 -R /data/data/com.termux/files/home/.shortcuts\nmkdir -p /data/data/com.termux/files/home/.shortcuts/tasks\nchmod 700 -R /data/data/com.termux/files/home/.shortcuts/tasks\nCreate the sync script :\nnano /data/data/com.termux/files/home/.shortcuts/tasks/sync_script.sh\nAdd the following script :[^5]\n#!/bin/bash\ncd storage/shared/LifeWiki\ngit pull &amp;&amp; git add -A &amp;&amp; git commit -a -m &quot;android vault backup: `date +&#039;%Y-%m-%d %H-%M-%S&#039;`&quot; &amp;&amp; git pull\nCreate the widget and add it to your home screen. That’s it, you just need to launch it to sync your Obsidian vault. It means you need to launch it before and after editing notes. If you putted your script inside ~/.shortcuts it will launch in the foreground, and if it was inside ~/.shortcuts/tasks then it will launch in the background. I recommend using as a widget the one that execute the code in the foreground and keep the other one for the Cron job.\nSetting up an Automatic Execution of the Script §\nIf you want to automatically sync your vault every hour, for instance, you can do it using a Cron job. [^6] [^7] [^8]\nFirst, you need to install Cron :\npkg install cronie termux-services\nThen, you’ll restart Termux then run the following :\nsv-enable crond\ncrontab -e \nFinally, you’ll end up with the crontab -e command in the nano text editor. Add the following :\n* */1 * * * bash ~/.shortcuts/tasks/sync_script.sh\nYou can find information about Cron job easily on the internet.[^9]"},"Obsidian/基于Obsidian的双链笔记文件夹搭建方案":{"title":"基于Obsidian的双链笔记文件夹搭建方案","links":[],"tags":["obsidian","结构","转存"],"content":"2021年下半年关注到 Obsidian，到目前用了近一年时间，了解学习了卢曼卡片盒、《卡片笔记写作法》、PARA笔记法，最近关注到 Nick Milo 的 Access 方法，对自己的 Obsidian 文件夹做了第三次迭代，下面分享下方案设计来源、原则和具体的文件夹设置。\n方案设计来源 §\n\n文件夹结构主要借鉴 Access（Atlas、Calendar、Cards、Extras、Sources、Spaces）方法，将 Atlas 改为Map，Sources 改为 Resource；Spaces 拆分为 Life（Work、Study）；\nInbox：来源于印象笔记的文件夹设置；\nMyNote：来源于《卡片笔记写作法》的文献笔记和永久笔记；\nKeyArea：来源于 Flomo少楠“积累知识的复利”直播中的“一定要有自己知识领域，卢曼是社会学家，天生就有自己的领域”的观点；\nHome：应该是源于 Nick Milo 的 LYT方案，存疑；\n\n遵循的原则 §\n\n一切从需求出发，文中的文件夹体系仅作为参考，根据自己的使用场景调优；\n不做知识的搬用工，知识库的内容必须是用自己的话描述的、自己整理的内容（Resource 除外）；\n每篇文章、每个卡片都要做好标签，方便 MOC的搭建，知识的链接；\n\n文件夹体系 §\nInbox §\n\n\n定位：收集箱，存放临时性的文档，包括：未完成的文档、待归档的文档、外部导入文档等\n\n\n原则：定期整理，进入 Inbox 超过一定期限的文档直接删除\n\n\n文件夹结构\n\n\n根目录：不需要区分来源的文档，直接丢进去\n\n\nSimpRead：使用 简悦导入的文档\n\n\n公众号：专门收集公众号文章\n\n\n其他自定义的内容渠道\n\n\nMap §\n\n\n定位： 聚合零散的内容，个人知识库 的“高德地图为您导航”；\n\n\n原则：信息汇总展现的主要方式，常用常新，需要不断的更新、优化、扩充；\n\n\n文件夹结构\n\n\nMOC：Map of Content\n\n\nLogs：日志文件，例如：Obsidian优化日志、插件迭代日志；\n\n\nDashboard ：数据看板，使用插件输出的图形，例如：文档数量饼图、标签词云；\n\n\nCalendar §\n\n\n定位：记录基于时间维度的内容，用于记录、跟踪、回顾事件；\n\n\n原则：使用 间歇日记 记录当日的学习工作日志、关注的新闻热点、收集的好句子、看的书籍电影等；\n\n\n文件夹结构\n\n\nDaily：日记\n\n\nWeekly：周记\n\n\nPlans：计划（GTD 系统，建议轻量化使用，高频需求建议使用 滴答清单）\n\n\nReviews：回顾\n\n\nCard §\n\n\n定位：收集来源于外部的信息、观点、知识点、兴趣点，转化为原子化的卡片；\n\n\n原则：围绕单一关键词，内容精简易读；\n\n\n文件夹结构\n\n\n根目录：未能归类的“知识点”类型的卡片，比如：边际效益递减、邓宁—克鲁格效应；\n\n\nPeople：人物卡片，类似豆瓣的人物介绍页面，包括：生卒年、职业、成就、作品等；\n\n\nTime：时间卡片，统计该时间点发生的事件；\n\n\nPlace：地点卡片；\n\n\nMovie：电影卡片，记录电影的元数据（导演、编剧、演员、上映时间等）、截图、金句等，但不包括影评、观后感；\n\n\nReeding：书籍卡片，记录数据的元数据（作者、译者、出版社等）、原文摘录等，但不包括读后感；\n\n\nMyNote §\n\n\n定位：完全原创的内容，短则一句话一条灵感，长则一篇专题文章，相当于 卡片盒笔记法 里面的文献笔记+常青笔记；\n\n\n原则：不要有孤立的文件，要链接到 Card、Resource的文档；\n\n\n文件夹结构\n\n\nIdea：想法、创意、灵感；\n\n\nMovieReview：电影观后感，链接到对应电影的 电影卡片\n\n\nBookReview：书籍读后感，链接到对应书籍的 书籍卡片\n\n\nPermanent：常青笔记或永久笔记，会不定期迭代的内容\n\n\nPublish：发表到知乎、公众号、社区等渠道的文章（也可以用 MOC或Log 管理）\n\n\nKeyArea §\n\n\n定位：专精的领域，安身立命的技能点；\n\n\n原则：兴趣点可以很多，但不能被 乱花迷眼，KeyArea 才是 PKM的核心，刻意练习是一切进步的阶梯；\n\n\n文件夹结构\n\n\n根据领域的特点自定义文件夹结构，卡片文档、长篇文档都可以；\n\n\nLife（Work、Study） §\n\n\n定位：用于管理生活、工作、学习、特定项目等领域的内容，需要专项管理的部分，非必须；\n\n\n原则：Obsidian 的富文本能力比较弱，不适合管理图片、表格、音视频多的内容；\n\n\n文件夹结构\n\n\nFamily：家人\n\n\nCost：花销\n\n\nTravel：旅行\n\n\nExtras §\n\n\n定位：辅助性的内容，用来拓展 MarkDown 的富文本能力；\n\n\n原则：给每一个附件重命名，保证附件可识别、可引用；\n\n\n文件夹结构\n\n\nAttachements：附件\n\n\nTemplaters：模板\n\n\nResource §\n\n\n定位：收录来源于外部资料，用于引用、学习、备份的内容；\n\n\n原则：尽量不修改原文内容，阅读产生的批注、想法制作文献笔记，添加源文档的引用；\n\n\n文件夹结构\n\n\nBooks：电子书\n\n\nArticles：收集的文章\n\n\nOffice：Word、Excel、PPT\n\n\nReport：数据报告\n\n\nResearch Papers：研究论文\n\n\nHome §\n\n定位：主页，链接其他常用文档、MOC、Dashboard等，可以是单一主页或多个主页，非必须\n原则：根据个性化需求定制，颜值控必选\n\n结语 §\n每个人的需求各有不同，此文件夹体系如能起到灵犀一点的效果，能够帮助你优化、迭代自己的知识管理系统，就达成目的了。\n如有疑问，请留言；如有帮助，请点赞收藏。\n拱手\n---\n参考文档\n1. @Nick Milo 的 Access 方法\n2. PARA笔记法\n3. 卡片笔记写作法\n4. @少楠 的 积累知识的复利"},"Obsidian/插件说明":{"title":"1. 插件更新目录","links":[],"tags":[],"content":"1. 插件更新目录 §\n集成了常用且较为稳定的插件能力，这些插件不是面面俱到，但是可以解决原始 Markdown 和 Obsidian 在书写体验上的一定问题。遵循”即开即用”\n列表如下：\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n插件名称解释开启状态better-fn更好的脚注插件和样式默认开启buttons按钮插件默认开启calendar日历插件默认开启consistent-attachments-and-links默认开启cm-chs-patch（可选）中文分词插件默认开启editing-toolbar更好的快捷文档编辑工具栏，支持置顶，浮动，跟随光标等多种方式默认开启dataview用于数据痴迷的复杂数据视图默认开启file-explorer-note-count为文件管理添加文件夹中文件的数量计数默认开启lapel支持快捷调整大纲标题默认开启metaedit可编辑markdown 的meta信息，或者叫 yaml区默认开启obsidian-banners主页显示头图默认开启obsidian-booknote-pluginpdf 查看和标注插件默认开启number-headings-obsidian在黑曜石文档中自动编号或重新编号标题默认开启obsidian-attachment-name-formatting默认开启obsidian-copy-block-link右键菜单获得链接到块和标题默认开启obsidian-core-search-assistant-plugin增强搜索插件，搜索结果卡片显示默认开启obsidian-custom-frames默认开启obsidian-dynamic-highlights实时预览模式下，按高亮指定文档比如日记中的时间默认开启obsidian-diagrams-net使用diagrams.net嵌入式编辑器启用diagrams类型图。默认开启obsidian-emoji-toolbar图形化的方式快速搜索并将 Emoji 插入您的笔记。默认开启obsidian-kanban在Obsidian 中创建标记支持的Kanban板。默认开启obsidian-local-images本地图像插件在你的笔记中找到所有外部图像的链接，然后下载并在本地保存图像，最后调整你的笔记中的图像链接指向保存的图像文件。默认开启obsidian-metatable将完整的 frontmatter (yaml区域)显示为表格形式默认开启obsidian-pandoc将markdown 文件输出成常见的其他文件类型默认开启obsidian-quiet-outline使大纲安静和更强大，包括是否自动展开，渲染标题作为标记，和搜索支持。默认开启obsidian-remember-file-state记住每个文件的光标位置、选择、滚动等默认开启obsidian-reminder-plugin为 task 或待办 添加提醒功能默认开启obsidian-rich-links将 你写入的URL，转化成类似notion 的网页裁剪样式默认开启obsidian-sortable表格列排序插件默认开启obsidian-minimal-settings更改 minimal 主题的颜色，字体和功能。默认开启obsidian-style-settings提供调整主题，插件和代码段CSS变量的控件默认开启obsidian-table-generator可以像Typora一样快速生成表格默认开启ob-table-enhancer默认开启obsidian-tasks-plugin将Obsidian 中一些内容转换成任务，且这些任务可以管理和更丰富的事件默认开启obsidian-task-progress-bar在Obsidian中为每个任务添加进度条，支持嵌套任务默认开启obsidian-version-history-diff文档修改历史恢复插件，比目前官方体验更佳，但需要打开核心插件的“文件恢复”才可使用默认开启obsidian-view-mode-by-frontmatter通过 yaml 设置文档默认打开是预览还是编辑模式默认开启omnisearch一个能正常工作的搜索引擎默认开启quickadd快速添加命令和动作，如将新页面或内容添加到Vault。默认开启recent-files-obsidian显示最近文件列表默认开启tag-wrangler重命名，合并，切换和标记窗格的标记默认开启templater-obsidianObsidian 模板插件，让你可以快速建立跟中模板化，简化输入默认开启various-complements自动补全插件默认开启obsidian42-brat用于更新哪些还没来得及上架社区插件，但是依然很好插件。我配置的主要是以下插件【Enhanced-editing】【obsidian-editing-toolbar】【ob-table-enhancer】默认开启Enhanced-editing（又名ZH 增强编辑）提供大量格式排版相关快捷操作默认开启quick-explorer使用鼠标或键盘从标题栏执行文件资源管理器操作(并查看当前文件路径)默认开启pane-relief每个窗格历史，窗格运动的热键+导航等等默认开启oz-image-plugin您可以在不需要阅读模式的情况下，粘贴在编辑器内部查看图像。默认开启\n2. 选择性开启 §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n插件名称功能概述状态quick-latex加速 latex 打字与自动分数，对齐块快捷方式，矩阵快捷方式等选择性开启obsidian-proxy-github-v1.1.0选择性开启music-code-blocks选择性开启Search on Internetob 中快捷进行网络搜索选择性开启obsidian-day-planner选择性开启Advanced Tables表格辅助选择性开启obsidian-math-plus提供 Obsidian 支持使用 latex 等方式书写数学公式选择性开启\n3. 待测试和融入插 §\n可以关注这些插件，他们未来也许会很伟大\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n插件名称功能概述waypoint文件夹 moc 生成插件Obsidian Icon Folder文件自定义图标插件Obsidian-Agtable普通表格转为可视化编辑表格obsidian-checklist-plugin任务列表插件notion-like-tables类似notion 的database 功能tq-obsidianexcalibrain画板插件supercharged-links-obsidian将属性和菜单选项添加到内部链接folder note添加描述，摘要以及带有文件夹笔记的文件夹的信息。markmind思维导图，大纲和pdf注释工具。\n4. 感谢那些曾经让Obsidian 更伟大的插件 §\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n插件名称功能概述状态obsidian-admonition支持自定义callouts ，自定义程度非常高。【后续】官方已经内置已经从库中移除cMenu plus被同一坐着的 【edit toolbar】 代替已经从库中移除obsidian-collapse-all支持文件目录和管理上的折叠/展开管理。【后续】官方已经v1.0.0支持已经从库中移除obsidian-tabs支持Obsidian的tabs管理。【后续】官方已经v1.0.0支持已经从库中移除"},"Obsidian/用-Git-在-Android-和-Windows-间同步-Obsidian-数据库":{"title":"用 Git 在 Android 和 Windows 间同步 Obsidian 数据库","links":[],"tags":["obsidian","git"],"content":"用 Git 在 Android 和 Windows 间同步 Obsidian 数据库 §\n前言 §\n如果你使用 Android 版 Obsidian，一个必须考虑的问题就是如何与电脑端同步笔记。\n对此，诚然可以选择官方的 Obsidian Sync 服务，或者使用 Dropbox 等第三方同步工具，但我最推荐的还是使用 Git 同步。理由在于：\n\n相比其他解决方案，Git 是开源的，不仅免费，而且安全性有保证；\n作为最先进的分布式版本控制系统（没有之一），用 Git 可以方便地实现版本回溯和协同编辑等功能；\nGit 支持多种操作系统（Windows、macOS、Linux、Android、iOS），可以按需托管在国内外多家平台上（国外的 GitHub、GitLab，国内的 Gitee、CODING）。\n\n当然，用 Git 同步的方案也有局限，包括有一定的学习成本，对纯新手不友好；多设备同时编辑容易产生冲突；以及需要另行手动备份存档等。\n但瑕不掩瑜，Git 仍然是我在 Windows 桌面端和 Android 端同步 Obsidian 的首选。本文就为大家介绍我的具体实现方案。\n（**注：**行文简洁起见，本文假定读者掌握命令行环境的基本操作，对于 Git 的功能和机制有初步了解。如果你不了解Git，那么本文食用起来可能会比较困难，不妨先通过廖雪峰的 Git 教程简单学习后再来尝试。）\nWindows 桌面端的准备工作 §\n第一步：安装 Git §\n在开始之前，请确保自己的 Windows 系统中已经安装了 Git。如果还没有安装，可以参考廖雪峰的教程。如果你已经安装了，那么可以跳过这一步。\n第二步：在 Git 托管平台中新建仓库 §\n接下来，我们在自己选用的 Git 托管平台上新建一个笔记专用仓库。\n考虑到国内用户的访问便捷程度和中文支持，本文将主要使用国产服务 Gitee 演示（官网注册链接），并简单说明更为主流的 GitHub 平台的对应操作。\n\n**如果使用 Gitee：**在顶部导航条点击「+」&gt;「新建仓库」，根据提示填写信息即可（暂不勾选给出的初始化选项）。\n**如果使用 GitHub：**在顶部导航条点击「+」&gt;「New Repository」，根据提示填写信息即可（暂不勾选给出的初始化选项）。\n\n\n第三步：生成 SSH 密钥 §\n接着，我们需要生成一个 SSH 密钥（SSH Key），用于在本地和远程 Git 仓库同步时验证身份。\n方法一：自动配置 §\n为方便新手用户，我准备了一个配置脚本，按照如下步骤运行即可完成配置：\n\n创建一个空白的 txt（后缀为 .txt）文档；\n将下面的代码复制粘贴到上面的空白文档中，将其中标注的用户名、邮箱等信息修改为你自己的相应信息，然后保存；\n修改文档后缀为 .sh 并保存，双击执行脚本。\n\n#!/bin/bash\n \nsplitLine=&quot;=====================================================&quot;\nuserName=&quot;这里改成你的用户名&quot;\nemail=&quot;这里改成你的Email&quot;\n \n# 配置 git 用户名和邮箱\ngit config --global  user.name ${userName}\ngit config --global user.email ${email}\ngit config --global  --list \necho &quot;Enter 或者 y 键确认&quot;\nssh-keygen -t rsa -C &quot;${email}&quot;\n \n# 打印公钥\necho &quot;复制保存下面的公钥添加到远程仓库&quot;\necho ${splitLine}\ncat ~/.ssh/id_rsa.pub\necho ${splitLine}\necho &quot;按任意键退出&quot;\nread -n 1\necho &quot;继续运行&quot;\n注意：\n\n如果你本地之前生成过 SSH，那么脚本会提示你是否覆盖，此时输入 y 回车即可。\n如果操作中途不小心关掉了脚本窗口，不要慌，双击重新执行脚本即可。\n执行过程中会出现如下图所示的四次提示确认步骤，简单起见，建议大家直接回车不设置参数（当然如果你明白这些步骤的具体含义，也可以设置需要的参数）。\n\n\n脚本执行完后，将分割线里面的内容复制出来保存好。后面会用到。\n方法二：手动配置 §\n如果你希望自己动手完成配置过程，下面介绍手动配置方法，这与前述脚本是等效的。\n在空白位置点击鼠标右键，选择 Git Bash（或者用你习惯的其他终端模拟器，如 Windows Terminal 等访问 Bash 亦可）：\n\n在弹出的 Bash 窗口中，输入下面的命令配置用户名：\ngit config --global  user.name 你的用户名\n以及用下面的命令配置邮箱：\ngit config --global user.email 你的邮箱\n完成前两步后，可以用下面的命令检查是否配置成功：\ngit config --global  --list \n如下图所示，如果返回的结果正确显示了你输入的用户名和邮箱，说明配置是正确的：\n\n接着，输入下面的命令生成 SSH Key。参考上面脚本教程的截图，按四个回车即可。\nssh-keygen -t rsa -C &quot;你的邮箱替换中文&quot;\n最后，用如下命令显示生成的公钥，将其复制出来备用：\ncat ~/.ssh/id_rsa.pub\n第四步：上传 SSH 公钥 §\n下面，我们将生成的 SSH 公钥上传至 Git 托管平台。\n\n**对于 Gitee：**点击导航栏右上角头像，选择「设置」，然后在侧边栏菜单选择「SSH 公钥」，填入上一步保存的公钥内容并保存确认。\n**对于 GitHub：**点击导航栏右上角头像，选择「Settings」，然后在侧边栏菜单选择「SSH and GPG keys」，填入上一步保存的公钥内容并保存确认。\n\n\n第五步：配置本地 Obsidian 仓库 §\n下面，我们在本地配置用于同步的 Obsidian 笔记文件夹。\n从 Gitee 或 GitHub 网页端访问刚才新建的仓库，由于尚未初始化，网页上会展示下图所示的配置指引：\n\n这里，我们按其中的「创建 Git 仓库」一节配置。\n具体而言，进入你用作 Obsidian 笔记库的文件夹，进入后在空白处点击右键进入 Bash，依次执行如下命令：\ntouch README.md\ngit init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit branch -M main\ngit remote add origin &quot;替换为上图中本条命令位置提示的远端地址（形如 git@gitee.com:user/repo.git）&quot;\ngit push -u origin main\n第六步：配置 Git 仓库同步 §\n完成了本地仓库的配置，接下来要解决的就是在本地和远端之间推送和拉取笔记文件。这里，固然可以定期、手动通过命令行的 git 命令来同步，但那未免繁琐。\n笔者惯用的方式是使用 GitKraken。这是一款免费、图形界面的 Git 管理工具。\n\n安装后，先点击左上角的文件夹图标，选择本地 Obsidian 笔记库打开。然后即可通过工具栏按钮快捷地同步，或者在主界面中追踪同步历史等。\n\n除了用 GitKraken 外，你也可以通过 Obsidian Git 插件，直接在 Obsidian 内部完成仓库的同步。\nAndroid 端的准备工作 §\nAndroid 端的配置相对简单，除了 Obsidian app，只需要另外安装一个 Git 客户端即可。\nObsidianplay.google.com\n这里，我推荐使用 MGit，它是笔者能找到的最符合个人需求的 app；其他的如 GitJournal 等 app 多少有些小问题。如果你有更好用的推荐，欢迎在评论区分享。\nMGitplay.google.com\nMGit 的配置步骤如下：\n\n在设置界面的「repos 的根存储位置」拟用于存放 Android 设备上 Obsidian 笔记的路径：\n在设置页面，点击「SSH Keys」&gt;「+」，新建 SSH 密钥；\n参考前面的方法，将生成的公钥上传到 Gitee 或 GitHub；\n从 Gitee 或 GitHub 复制 SSH Remote 地址（即上述 Windows 配置部分第五步用到的地址，也可以在仓库主页面点击「下载/克隆」（GitHub 点击「Code」）查看），填入远程地址，点击克隆。\n\n\n\n成功之后，打开 Obsidian for Android。一般来说，Obsidian自动扫描到你克隆到手机的工作空间。如果没有扫描到，那么手动从 Obsidian 进入上述步骤设置的仓库路径，用作工作空间即可。\n\n结语 §\n细心的朋友可能已经看出来了，就是 Obsidian 的工作空间在PC和手机上都是通用的。这方面要为 Obsidian 的开发团队点赞。\n不过，个人不建议在手机端编辑文档。因为手机端屏幕太小影响体验和发挥，只负责查阅即可，编辑还是放到 PC 端比较好。\n如果大家对本文方案有什么更好的建议，可以在评论区提出。\n"},"Python/Conda相关资料":{"title":"Powershel下Conda安装和配置","links":["Python/pip-install-和conda-install的区别"],"tags":["python","conda","配置"],"content":"我在考虑要不要把Nodejs、Python、Ruby都用Conda来管理。\n不过先看看相关资料。\n已经用上了，真香。\n关于Conda的发行版本 §\n\nconda是一个包和环境管理工具，它不仅能管理包，还能隔离和管理不同python版本的环境。类似管理nodejs环境的nvm工具。\nanaconda和miniconda都是conda的一种发行版。只是包含的包不同。\nanaconda包含了conda、python等180多个科学包及其依赖项，体格比较大。但很多东西你未必用到，所以才有mini版。\nminiconda是最小的conda安装环境，只有conda+python+pip+zlib和一些其他常用的包，体格非常迷你。\npip也叫包管理器，和conda的区别是，pip只管理python的包，而conda可以安装所有语言的包。而且conda可以管理python环境，pip不行。\n\n安装Conda §\n我这里选择安装miniconda，conda完全安装似乎要3个多G，没有必要。\n我使用的是 Winget 安装（不得不说Winget是挺方便的），命令如下：\nwinget install miniconda3\n常用命令 §\nclean        Remove unused packages and caches.\ncompare      Compare packages between conda environments.\nconfig       Modify configuration values in .condarc. This is modeled after the git config \n                    command. Writes to the   user .condarc file (C:\\Users\\me\\.condarc) by default.\ncreate       Create a new conda environment from a list of specified packages.\nhelp         Displays a list of available conda commands and their help strings.\ninfo         Display information about current conda install.\ninit         Initialize conda for shell interaction. [Experimental]\ninstall      Installs a list of packages into a specified conda environment.\nlist         List linked packages in a conda environment.\npackage      Low-level conda package utility. (EXPERIMENTAL)\nremove       Remove a list of packages from a specified conda environment.\nuninstall    Alias for conda remove.\nrun          Run an executable in a conda environment. [Experimental]\nsearch       Search for packages and display associated information. The input is a MatchSpec, \n                   a query language     for conda packages. See examples below.\nupdate       Updates conda packages to the latest compatible version.\nupgrade      Alias for conda update.\nenv list       查看所有环境\n等进度条走完就可以用 conda 关键字使用了。\n初始化 §\nwindow下用powershell安装后会出现无法切换conda环境的问题，而且不会报错，但是你无法切换环境。我找了很多资料1后发现要使用 init 命令进行初始化，等执行完后。\nconda init powershell\n\n创建虚拟环境 §\n使用 create 命令就可以创建虚拟环境了，-n 设置虚拟环境名称。 后面可以指定安装各种环境包，可以同时安装多个环境。\nconda create -n vsdev python=3.8.6 nodejs=18.12.1\n激活虚拟环境 §\n使用activate激活虚拟环境\nconda activate vsdev\n安装 §\n建议统一使用conda来管理包，原因可以参见 pip install 和conda install的区别\nconda install nodejs\nconda install pymssql\nFootnotes §\n\n\nconda init — conda 22.11.1.post4+22d01b513 documentation ↩\n\n\n"},"Python/Python使用外部配置文件":{"title":"Python使用外部配置文件","links":[],"tags":["python"],"content":"一、 为什么要使用配置 §\n如果我们在较复杂的项目中不使用配置文件，我们可能会面临下面的情况：\n\n你决定更改你的项目中数据库的 host， 因为你要将项目从测试环境转移到实际的上产环境中。如果你的项目中多个位置用到了这个 host，那你不得不一个一个找到这些位置再修改成新的 host。花了半天，然后过了一天，你发现项目在生产环境有些问题，需要重新移回测试环境，你得再次修改，这样工作很繁琐很不优雅。\n你开发了一个很棒的开源项目，你想将其放到版本控制系统例如github上，但是你服务器的主机的地址、账号、密码也都上传上去了，但是你没有意识到，直到有个 bad guy 拿到了你的信息，从你的服务器窃取信息、攻击你的服务器，让你产生了极大的损失。然后你想把程序改动一下，把涉密的信息比如地址密码都删掉，可是由于版本控制的原因，别人依然能看到你以前版本的代码。于是你不得不改掉你的账户、密码等，真的是个悲伤的开源项目经历。\n\n但是，如果你使用了配置管理呢，那会有以下几个优点：\n\n这样就提高了代码的重用性，不再每次都去修改代码内部\n这意味着其他不太懂你代码内部的人也可以使用你的项目，只用根据需求更改配置即可\n有利于团队协作\n有利于安全数据/秘密数据的管理\n\n二、Python 中进行配置管理的几种方式 §\n由于使用 Python 较多，因此基于 Python 进行配置管理的相关说明，当然其他语言也都是大同小异，主要思想还是不变。\n2.1 使用 Python 内置的数据结构(如字典) §\n2.1.1单个文件下的单个配置 §\n我们很自然就能想到这一点，例如以下代码：\n# main.py\n \nimport pymysql\n \nDATABASE_CONFIG  = {\n    &#039;host&#039;:&#039;localhost&#039;,\n    &#039;dbname&#039;:&#039;db&#039;,\n    &#039;user&#039;:&#039;user&#039;,\n    &#039;password&#039;:&#039;pwd&#039;,\n    &#039;port&#039;:3306\n}\n \ndef connect_db_do_something1(dbname):\n    if dbname != config.DATABASE_CONFIG[&#039;dbname&#039;]:\n        raise ValueError(&quot;Couldn&#039;t not find DB with given name&quot;)\n    conn = pymysql.connect(host=config.DATABASE_CONFIG[&#039;host&#039;],\n                           user=config.DATABASE_CONFIG[&#039;user&#039;],\n                           password=config.DATABASE_CONFIG[&#039;password&#039;],\n                           db=config.DATABASE_CONFIG[&#039;dbname&#039;])\n    &#039;&#039;&#039;\n    do something 1\n    &#039;&#039;&#039;\n \ndef connect_db_do_something2(dbname):\n    if dbname != config.DATABASE_CONFIG[&#039;dbname&#039;]:\n        raise ValueError(&quot;Couldn&#039;t not find DB with given name&quot;)\n    conn = pymysql.connect(host=config.DATABASE_CONFIG[&#039;host&#039;],\n                           user=config.DATABASE_CONFIG[&#039;user&#039;],\n                           password=config.DATABASE_CONFIG[&#039;password&#039;],\n                           db=config.DATABASE_CONFIG[&#039;dbname&#039;])\n    &#039;&#039;&#039;\n    do something 2\n    &#039;&#039;&#039;\n \nconnect_db_do_something1(&#039;db&#039;)\nconnect_db_do_something2(&#039;db&#039;)\n在上面的代码中，我们可以看到，同一数据库配置，我们反复使用了两次，如果我们需要更改数据库相关的数据如password，我们不需要在两个方法内部修改，而是只用修改DATABASE_CONFIG字典中的相关值即可。和以前没有配置管理的时候相比，减少了太多的工作量了。\n2.1.2多个文件下的单个配置 §\n但是当你的项目开始变得复杂的时候，你的文件就不止一个这么简单了，这时候如果我需要在 main2.py 里面需要用 DATABASE_CONFIG 的时候就不是很方便了，因为如果直接 import main 的时候，虽然能够使用 main.DATABASE_CONFIG ，但同时 mian.py 中的\nconnect_db_do_something1(&#039;db&#039;)\nconnect_db_do_something2(&#039;db&#039;)\n也被执行了，这可不是我们想看到的，因此我们有了新的需求，能在同一个项目下的不同文件里简单快速的导入我们的数据库配置 DATABASE_CONFIG，于是我们想出了下面的方法来解决这个问题：\n# config.py\nDATABASE_CONFIG = {\n    &#039;host&#039;: &#039;localhost&#039;,\n    &#039;dbname&#039;: &#039;db&#039;,\n    &#039;user&#039;: &#039;user&#039;,\n    &#039;password&#039;: &#039;pwd&#039;,\n    &#039;port&#039;: 3306\n}\n \n# main1.py\nimport pymysql\nimport config\n \ndef connect_db_do_something1(dbname):\n    if dbname != config.DATABASE_CONFIG[&#039;dbname&#039;]:\n        raise ValueError(&quot;Couldn&#039;t not find DB with given name&quot;)\n    conn = pymysql.connect(host=config.DATABASE_CONFIG[&#039;host&#039;],\n                           user=config.DATABASE_CONFIG[&#039;user&#039;],\n                           password=config.DATABASE_CONFIG[&#039;password&#039;],\n                           db=config.DATABASE_CONFIG[&#039;dbname&#039;])\n    &#039;&#039;&#039;\n    do something 1\n    &#039;&#039;&#039;\nconnect_db_do_something1(&#039;db&#039;)\n \n# main2.py\nimport pymysql\nimport config\n \ndef connect_db_do_something2(dbname):\n    if dbname != config.DATABASE_CONFIG[&#039;dbname&#039;]:\n        raise ValueError(&quot;Couldn&#039;t not find DB with given name&quot;)\n    conn = pymysql.connect(host=config.DATABASE_CONFIG[&#039;host&#039;],\n                           user=config.DATABASE_CONFIG[&#039;user&#039;],\n                           password=config.DATABASE_CONFIG[&#039;password&#039;],\n                           db=config.DATABASE_CONFIG[&#039;dbname&#039;])\n    &#039;&#039;&#039;\n    do something 2\n    &#039;&#039;&#039;\nconnect_db_do_something2(&#039;db&#039;)\n按照上面的代码，我们可以在两个不同的文件 main1.py 和 main2.py 中分别引用 config.py 中配置了，我们的配置管理看起来更进一步了。\n2.1.3 单个文件下的多个配置 §\n有可能我们的项目需要多个配置文件，比如测试环境和生产环境。先从单个文件讲起，我们可以采用如下解决方案：\n# config.py\nclass Config:\n    APP_NAME = &#039;myapp&#039;\n    SECRET_KEY = &#039;secret-key-of-myapp&#039;\n    ADMIN_NAME = &#039;administrator&#039;\n \n    AWS_DEFAULT_REGION = &#039;ap-northeast-2&#039;\n    \n    STATIC_PREFIX_PATH = &#039;static&#039;\n    ALLOWED_IMAGE_FORMATS = [&#039;jpg&#039;, &#039;jpeg&#039;, &#039;png&#039;, &#039;gif&#039;]\n    MAX_IMAGE_SIZE = 5242880 # 5MB\n \n \nclass DevelopmentConfig(Config):\n    DEBUG = True\n    \n    AWS_ACCESS_KEY_ID = &#039;aws-access-key-for-dev&#039;\n    AWS_SECERT_ACCESS_KEY = &#039;aws-secret-access-key-for-dev&#039;\n    AWS_S3_BUCKET_NAME = &#039;aws-s3-bucket-name-for-dev&#039;\n    \n    DATABASE_URI = &#039;database-uri-for-dev&#039;\n \n \nclass TestConfig(Config):\n    DEBUG = True\n    TESTING = True\n    \n    AWS_ACCESS_KEY_ID = &#039;aws-access-key-for-test&#039;\n    AWS_SECERT_ACCESS_KEY = &#039;aws-secret-access-key-for-test&#039;\n    AWS_S3_BUCKET_NAME = &#039;aws-s3-bucket-name-for-test&#039;\n    \n    DATABASE_URI = &#039;database-uri-for-dev&#039;\n  \n \nclass ProductionConfig(Config):\n    DEBUG = False\n \n    AWS_ACCESS_KEY_ID = &#039;aws-access-key-for-prod&#039;\n    AWS_SECERT_ACCESS_KEY = &#039;aws-secret-access-key-for-prod&#039;\n    AWS_S3_BUCKET_NAME = &#039;aws-s3-bucket-name-for-prod&#039;\n \n    DATABASE_URI = &#039;database-uri-for-dev&#039;\n \n# main.py\nimport sys\nimport config\nimport sys\nimport config\n \n&#039;&#039;&#039;\ndo some important things\n&#039;&#039;&#039;\n \nif __name__ == &#039;__main__&#039;:\n    env = sys.argv[1] if len(sys.argv) &gt; 2 else &#039;dev&#039;\n    \n    if env == &#039;dev&#039;:\n        app.config = config.DevelopmentConfig\n    elif env == &#039;test&#039;:\n        app.config = config.TestConfig\n    elif env == &#039;prod&#039;:\n        app.config = config.ProductionConfig\n    else:\n        raise ValueError(&#039;Invalid environment name&#039;)\n这样我们就可以从一个配置文件中获取不同级别的不同配置了。\n2.1.4 多个文件下的多个配置 §\n和上面类似，只不过换成了从不同的文件中读取同一个配置文件的不同配置：\n# config.py\nclass Config:\n    APP_NAME = &#039;myapp&#039;\n    SECRET_KEY = &#039;secret-key-of-myapp&#039;\n    ADMIN_NAME = &#039;administrator&#039;\n \n    AWS_DEFAULT_REGION = &#039;ap-northeast-2&#039;\n    \n    STATIC_PREFIX_PATH = &#039;static&#039;\n    ALLOWED_IMAGE_FORMATS = [&#039;jpg&#039;, &#039;jpeg&#039;, &#039;png&#039;, &#039;gif&#039;]\n    MAX_IMAGE_SIZE = 5242880 # 5MB\n \n    \nclass DevelopmentConfig(Config):\n    DEBUG = True\n    \n    AWS_ACCESS_KEY_ID = &#039;aws-access-key-for-dev&#039;\n    AWS_SECERT_ACCESS_KEY = &#039;aws-secret-access-key-for-dev&#039;\n    AWS_S3_BUCKET_NAME = &#039;aws-s3-bucket-name-for-dev&#039;\n    \n    DATABASE_URI = &#039;database-uri-for-dev&#039;\n    \nclass TestConfig(Config):\n    DEBUG = True\n    TESTING = True\n    \n    AWS_ACCESS_KEY_ID = &#039;aws-access-key-for-test&#039;\n    AWS_SECERT_ACCESS_KEY = &#039;aws-secret-access-key-for-test&#039;\n    AWS_S3_BUCKET_NAME = &#039;aws-s3-bucket-name-for-test&#039;\n    \n    DATABASE_URI = &#039;database-uri-for-dev&#039;\n  \n \nclass ProductionConfig(Config):\n    DEBUG = False\n \n    AWS_ACCESS_KEY_ID = &#039;aws-access-key-for-prod&#039;\n    AWS_SECERT_ACCESS_KEY = &#039;aws-secret-access-key-for-prod&#039;\n    AWS_S3_BUCKET_NAME = &#039;aws-s3-bucket-name-for-prod&#039;\n \n    DATABASE_URI = &#039;database-uri-for-dev&#039;\n \n \nclass CIConfig:\n    SERVICE = &#039;travis-ci&#039;\n    HOOK_URL = &#039;web-hooking-url-from-ci-service&#039;\n \n \n# main1.py\nimport config\n \ndev_config = config.DevelopmentConfig\n&#039;&#039;&#039;\ndo something\n&#039;&#039;&#039;\n \n# main2.py\nimport config\n \napp.ci = config.CIConfig\n&#039;&#039;&#039;\ndo otherthing\n&#039;&#039;&#039;\n这样使用更加灵活了，从不同的文件里读取不同的配置，而我们对于配置的增删改只需要在 config.py 中进行，配置管理技能再次进阶！\n2.2 使用外部配置文件 §\n比起使用 Python 内建的数据结构，更加通用的方法是使用外部配置文件，因为这些文件只会被视为配置文件，而不会像 config.py 一样有代码的属性。外部配置文件的格式多种多样，我们在使用它的时候会根据文件格式有不同的读取方式。例如：*.yaml 或者 *.yml、*.json 、*.cfg 或 *.conf 、*.ini ， 甚至是你自定义的文件 *.yourname 。\n2.2.1 YAML §\n\nYAML（/ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达数据序列化的格式。YAML参考了其他多种语言，包括：C语言、Python、Perl，并从XML、电子邮件的数据格式（RFC 2822）中获得灵感。Clark Evans在2001年首次发表了这种语言[1]，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者[2]。当前已经有数种编程语言或脚本语言支持（或者说解析）这种语言。 ----- 中文维基百科\n\nYAML 看起来像下面这种格式：\nmysql:\n    host: localhost\n    dbname: db\n    user: user\n    passwd: pwb\n    port: 3306\nother:\n    host: other_host\n    dbname: other_db\n    user: other_user\n    passwd: other_pwb\n    port: 3306\n可以通过类似下面的代码来读取里面的内容：\nimport yaml\n \nwith open(&quot;config.yml&quot;, &#039;r&#039;) as ymlfile:\n    cfg = yaml.load(ymlfile)\n \nprint(cfg[&#039;mysql&#039;])\n将输出以下内容\n{&#039;host&#039;: &#039;localhost&#039;,\n &#039;dbname&#039;: &#039;db&#039;,\n &#039;user&#039;: &#039;user&#039;,\n &#039;password&#039;: &#039;pwd&#039;,\n &#039;port&#039;: 3306}\n如果需要从 python 写入配置到 YAML 也很容易，只需要使用 yaml.dump(dict) 即可，dict 指的是配置的字典。更加详细的内容可以查看 PyYAML Documentation\n2.2.2 INI §\n\nINI文件是一个无固定标准格式的配置文件。它以简单的文字与简单的结构组成，常常使用在Windows操作系统，或是其他操作系统上，许多程序也会采用INI文件做为设置程序之用。Windows操作系统后来以注册表的形式取代掉INI档。INI文件的命名来源，是取自英文“初始（Initial）”的首字缩写，正与它的用途——初始化程序相应。有时候，INI文件也会以不同的扩展名，如“.CFG”、“.CONF”、或是“.TXT”代替。 ----- 中文维基百科\n\n它长的像这样：\n[mysql]\nhost=localhost\ndbname=db\nuser=user\npasswd=pwd\nport=3306\n \n[other]\nhost=other_host\ndbname=other_db\nuser=other_user\npasswd=other_pwb\nport=3306\n通过以下代码可以读取它：\nimport configparser\n \nconfig = configparser.ConfigParser()\nconfig.read(&quot;config.ini&quot;)\nhost = config[&#039;mysql&#039;][&#039;host&#039;]\nprint(host)\n这将输出 INI 配置文件中的 mysql section 中的 host 值\n要写入 INI 配置文件也很简单，参考如下代码即可：\nimport configparser\nconfig = configparser.ConfigParser()\nconfig.read(&quot;config.ini&quot;)\nconfig[&#039;mysql&#039;][&#039;test_str&#039;] = &#039;a test string&#039;\nconfig.write(open(&quot;ini&quot;, &quot;w&quot;))\n现在的配置文件会变成：\n[mysql]\nhost = localhost\ndbname = db\nuser = user\npasswd = pwd\nport = 3306\ntest_str = a test string\n \n[other]\nhost=other_host\ndbname=other_db\nuser=other_user\npasswd=other_pwb\nport=3306\n2.2.3 JSON §\nJSON是JavaScript对象表示法的缩写。它非常广泛，因此对许多编程语言都有很好的支持。它的格式大家也很眼熟，看起来和 Python 中的字典很像：\n{\n    &quot;mysql&quot;:{\n        &quot;host&quot;: &quot;localhost&quot;,\n        &quot;dbname&quot;: &quot;db&quot;,\n        &quot;user&quot; : &quot;user&quot;,\n        &quot;password&quot;: &quot;pwd&quot;,\n        &quot;port&quot;: 3306\n    },\n    &quot;other&quot;:{\n        &quot;host&quot;: &quot;other_host&quot;,\n        &quot;dbname&quot;: &quot;other_db&quot;,\n        &quot;user&quot;: &quot;other_user&quot;,\n        &quot;passwd&quot;: &quot;other_pwb&quot;,\n        &quot;port&quot;: 3306\n    }\n你可以参考以下代码读取：\nimport json\n \nwith open(&#039;config.json&#039;) as json_data_file:\n    config = json.load(json_data_file)\n \nhost = config[&#039;mysql&#039;][&#039;host&#039;]\nprint(host)\n \n# output: localhost\n要将配置写入json中也很简单，参考以下代码：\nimport json\n\nwith open(&#039;config.json&#039;) as json_data_file:\n    config = json.load(json_data_file)\n\nconfig[&#039;mysql&#039;][&#039;test_str&#039;] = &#039;a test string&#039;\n\nwith open(&#039;config.json&#039;, &#039;w&#039;) as outfile:\n    json.dump(config, outfile)\n这样就会得到增加了配置的json文件了：\n{\n    &quot;mysql&quot;:{\n        &quot;host&quot;: &quot;localhost&quot;,\n        &quot;dbname&quot;: &quot;db&quot;,\n        &quot;user&quot; : &quot;user&quot;,\n        &quot;password&quot;: &quot;pwd&quot;,\n        &quot;port&quot;: 3306,\n        &quot;test_str&quot; : &quot;a test string&quot;\n    },\n    &quot;other&quot;:{\n        &quot;host&quot;: &quot;other_host&quot;,\n        &quot;dbname&quot;: &quot;other_db&quot;,\n        &quot;user&quot;: &quot;other_user&quot;,\n        &quot;passwd&quot;: &quot;other_pwb&quot;,\n        &quot;port&quot;: 3306\n    }\n}\n其他格式的文件大多如此，就不赘述了。并且外部的配置文件中也可以配置多个配置(mysql, other等)\n2.3 使用环境变量 §\n但是，回到我们开篇讲的问题，以上的两种配置管理方案(使用 Python 内置的数据结构、使用外部配置文件) 都忽略了两个问题：\n其一，我们如何应对安全数据直接曝光于公众的可能问题呢，如果我们需要使用版本控制系统例如 Github，或许我们可以尝试将 config.py 文件放到 .gitignore 里面，但我们如果哪一天修改了仓库，忘了将 config.py 忽略掉而 push 到了GitHub 上，那么我们的安全敏感信息仍然会向公众泄露，由于版本控制的存在，即使你删掉了还会有这条提交记录，处理起来会很麻烦。\n其二，如果我们要在我们本地新开一个项目，这个项目也需要引用一样的数据库配置文件，或许我们可以找到第一个项目的文件夹，复制出 config.py 到 新的项目文件夹。嗯，看起来可行，但是，如果你要新开十几个项目呢，几百个项目呢？\n因此我们可以引入下一种配置管理的方式，对解决上面提出的两个问题都是较为友好的解决方案，即使用环境变量，各种开发环境(Win、Mac、Linux)的系统环境变量的设置方式有所不同，可以参考这篇文章。\n另外 PyCharm 和 VS Code 有更加方便的配置方式，可以为不同的项目分配不同的设置。\nPyCharm 中，在菜单 Run-&gt;Edit configurations 中，手动设置Environment variables\nVS Code 中，在 Setting 中搜索 env ，在 Terminal 中选择你的操作系统相关的Terminal &gt; Integrated &gt; Env: Your OS ，点进 settings.json 进行添加\n使用环境变量配置值不用作为单独的文件进行管理，因此有较小的安全风险，它很容易使用，可以在你的开发环境中的任何项目任何代码库中使用，但是它的管理方式可能有些复杂。有些环境无法使用环境变量，比如Apache，Nginx等Web服务器，这时候就需要采用其他的方式。\n2.4 使用动态加载 §\n这种方法比利用 Python 内置的数据结构更加先进，内置数据结构的方法要求配置文件必须要在可以直接 import 的路径上。但是动态加载中，配置文件不必在可直接导入的路径上，甚至可以位于其他存储库中，这样的话，配置文件就和项目分隔开了，其他的项目也可以动态加载这个配置文件，例如：\n# /opt/settings/config.py\nDATABASE_CONFIG = {\n    &#039;host&#039;: &#039;localhost&#039;,\n    &#039;dbname&#039;: &#039;company&#039;,\n    &#039;user&#039;: &#039;user&#039;,\n    &#039;password&#039;: &#039;password&#039;,\n    &#039;port&#039;: 3306\n}\n\n# main.py\nimport sys\nimport pymysql\n\nsys.path.append(&#039;/opt/settings&#039;)\nimport config\n\ndef connect_db(dbname):\n    if dbname != config.DATABASE_CONFIG[&#039;dbname&#039;]:\n        raise ValueError(&quot;Couldn&#039;t not find DB with given name&quot;)\n    conn = pymysql.connect(host=config.DATABASE_CONFIG[&#039;host&#039;],\n                           user=config.DATABASE_CONFIG[&#039;user&#039;],\n                           password=config.DATABASE_CONFIG[&#039;password&#039;],\n                           db=config.DATABASE_CONFIG[&#039;dbname&#039;])\n    return conn\n\nconnect_db(&#039;company&#039;)\n三、总结 §\n以上归纳了四种配置管理的方式，总体来说没有优劣之分，看个人的需要，甚至上面的几种方法可以混合使用，对于一些软件项目，它自身可能就提供了相关的变量配置入口，比如 airbnb 的 Airflow 。而且，当系统规模非常大时，最好使用主要提供配置管理的第三方工具或服务。\n"},"Python/Python动态参数的使用":{"title":"Python动态参数的使用","links":[],"tags":["python"],"content":"1. ’ * ’ 的作用 §\n\n用在动态参数前，打包多个参数并将其转化为元组\n\ndef func(*args):\n    print(args)\n \nfunc(1, 2, 3)  # (1, 2, 3)\n输入参数为1, 2, 3，最后返回的结果是一个元组 (1, 2, 3)。\n\n用在可迭代对象前，进行自动解包转化为多个单变量参数\n\ndef func(a, b, c):\n    print(a, b, c)\n \nargs = [1, 2, 3]\nfunc(*args)  # 1 2 3\n输入参数为一个列表[1, 2, 3]，解释器自动进行解包然后分别传递给3个变量。\n2. ’ ** ’ 的作用 §\n\n用在动态参数前，打包多个赋值形式的参数并将其转化为字典\n\ndef func(**kwargs):\n    print(kwargs)\n \nfunc(a=1, b=2, c=3)  # {&#039;a&#039;: 1, &#039;b&#039;: 2, &#039;c&#039;: 3}\n函数接收类似于关键参数一样赋值形式的多个实参，并返回一个字典。\n\n用在字典前，解包字典中的数据项作为键值参数传给函数\n\ndef func(a, b, c):\n    print(a, b, c)\n \nkwargs = {&#039;a&#039;: 1, &#039;b&#039;: 2, &#039;c&#039;: 3}\nfunc(**kwargs)  # 1 2 3\n3. 参数类型 §\n\n位置参数\n\n所有参数的顺序必须一一对应，且数量一致。\ndef func(a, b, c):\n    print(a, b, c)\n \nfunc(1, 2, 3)  # 1 2 3\n\n关键字参数\n\n函数调用通过键值对形式加以指定。关键字参数之间不存在先后顺序；有位置参数时，位置参数必须在关键字参数的前面。\ndef func(a, b, c):\n    print(a, b, c)\n \nfunc(a=1, b=2, c=3)    # 1 2 3\nfunc(b=2, c=3, a=1)    # 1 2 3\nfunc(4, b=5, c=6)      # 4 5 6\n# 错误的调用方式\nfunc(a=4, b=5, 6)      # SyntaxError: positional argument follows keyword argument\n\n默认参数\n\n为参数提供默认值，调用函数时可传可不传。所有位置参数必须放在默认参数前面。\n# 正确的定义方式\ndef func(a, b=2):\n    print(a, b)\n \nfunc(1)     # 1 2\nfunc(1, 3)  # 1 3\n \n# 错误的定义方式\ndef func(a=1, b):\n    print(a, b)  # SyntaxError: non-default argument follows default argument\n4. ’ *args ’ 与 ’ **kwargs ’ §\n定义函数时，如果不确定调用的时候会传递多少个参数，可以打包位置参数或者关键字参数来进行参数传递。\n\n位置传递\n\ndef func(*args):\n    print(args)\n \nfunc(1)        # (1,)\nfunc(1, 2)     # (1, 2)\nfunc(1, 2, 3)  # (1, 2, 3)\n\n关键字传递\n\ndef func(**kwargs):\n    print(kwargs)\n \nfunc(a=1)            # {&#039;a&#039;: 1}\nfunc(a=1, b=2)       # {&#039;a&#039;: 1, &#039;b&#039;: 2}\nfunc(a=1, b=2, c=3)  # {&#039;a&#039;: 1, &#039;b&#039;: 2, &#039;c&#039;: 3}\n注意：*和**只有在传参时才有用。\n# 错误的使用方法\nargs = (1,2,3)\na, b, c = *args  # SyntaxError: can&#039;t use starred expression here\n5. 参数混合使用 §\n函数定义和调用时的参数类型必须一致；位置参数放在*args参数前，*args参数放在**kwargs参数前，**kwargs参数放在最后。\n# 位置参数 默认参数 *args **kwargs\ndef func(a, b, c=0, *args, **kwargs):\n    print(a, b, c, args, kwargs)\n \nfunc(1, 2, m=7, n=8)              # 1 2 0 () {&#039;n&#039;: 8, &#039;m&#039;: 7}\nfunc(1, 2, 3, 4, 5, 6, m=7, n=8)  # 1 2 3 (4, 5, 6) {&#039;m&#039;: 7, &#039;n&#039;: 8}\n \n# 位置参数 *args 默认参数 **kwargs\ndef func(a, b, *args, c=0, **kwargs):\n      print(a, b, c, args, kwargs)\n \nfunc(1, 2, 3, 4, 5, 6, m=7, n=8)       # 1 2 0 (3, 4, 5, 6) {&#039;m&#039;: 7, &#039;n&#039;: 8}\nfunc(1, 2, 3, 4, 5, 6, c=9, m=7, n=8)  # 1 2 9 (3, 4, 5, 6) {&#039;m&#039;: 7, &#039;n&#039;: 8}"},"Python/Python轻量级ORM框架peewee用法详解":{"title":"Python轻量级ORM框架peewee用法详解","links":[],"tags":["python"],"content":"本文中代码样例所使用的 Person 模型如下：\nclass Person(Model):    Name = CharField()    Age = IntegerField()    Birthday = DateTimeField()    Remarks = CharField(null=True)\n一、新增 §\n1、create §\nModel.create 向数据库中插入一条记录，并返回一个新的实例。\np = Person.create(Name=&#039;张三&#039;, Age=30, Birthday=date(1990, 1, 1))\n2、save §\n语法：\nsave(force_insert=False, only=None)\n参数：\n\nforce_insert：是否强制插入\nonly(list)：需要持久化的字段，当提供此参数时，只有提供的字段被持久化。\n\n示例：\np1 = Person(Name=&#039;王五&#039;, Age=50, Birthday=date(1970, 1, 1))p1.save()\n这里说的比较简单，下面会详细说明。\n3、insert §\ninsert 只插入数据而不创建模型实例，返回新行的主键。\nPerson.insert(Name=&#039;李四&#039;, Age=40, Birthday=date(1980, 1, 1)).execute()\n4、insert_many §\n语法：\ninsert_many(rows, fields=None)\n参数：\n\nrows：元组或字典列表，要插入的数据\nfields(list)：需要插入的字段名列表。\n\n\n说明： 1、当 rows 传递的是字典列表时，fields 是不需要传的，如果传了，那么，rows 中的字段在字典中必须存在，否则报错。如果没有传递 fields 参数，那么默认取所有字典的交集作为插入字段。这个也好理解，比如一个字典的键是\n\n示例：\nPerson.insert_many([    (&#039;张三&#039;, 30, date(1990, 1, 1)),    (&#039;李四&#039;, 40, date(1980, 1, 1)),    (&#039;王五&#039;, 50, date(1970, 1, 1))],    [&#039;Name&#039;, &#039;Age&#039;, &#039;Birthday&#039;]).execute()Person.insert_many([    {&#039;Name&#039;: &#039;张三&#039;, &#039;Age&#039;: 30, &#039;Birthday&#039;: date(1990, 1, 1)},    {&#039;Name&#039;: &#039;李四&#039;, &#039;Age&#039;: 40, &#039;Birthday&#039;: date(1980, 1, 1)},    {&#039;Name&#039;: &#039;王五&#039;, &#039;Age&#039;: 50, &#039;Birthday&#039;: date(1970, 1, 1)}]).execute()\n对于批量操作，应该放在事务中执行：\nwith db.atomic():    Person.insert_many(data, fields=fields).execute()\n\n在使用批量插入时，如果是 SQLite，SQLite3 版本必须为 3.7.11.0 或更高版本才能利用批量插入API。此外，默认情况下，SQLite 将 SQL 查询中的绑定变量数限制为 999。\n\nSQLite 中，当批量插入的行数超过 999 时，就需要使用循环来将数据批量分组：\nwith db.atomic():    for idx in range(0, len(data), 100):        Person.insert_many(data[idx: idx+100], fields=fields).execute()\nPeewee 中带有一个分块辅助函数 chunked()，使用它可以有效地将通用迭代块分块为一系列批量迭代的迭代：\nfrom peewee import chunked# 一次插入 100 行.with db.atomic():    for batch in chunked(data, 100):        Person.insert_many(batch).execute()\n5、bulk_create §\n语法：\nbulk_create(model_list, batch_size=None)\n参数：\n\nmodel_list (iterable)：未保存的模型实例的列表或其他可迭代对象。\nbatch_size (int)：每次批量插入的行数。如果未指定，则一次性全部插入。\n\n示例： 简单来说，insert_many 使用字典或元组列表作为参数，而 model_list 使用模型实例列表作为参数，就这区别。\ndata = [Person(Name=&#039;张三~&#039;, Age=30, Birthday=date(1990, 1, 1)),        Person(Name=&#039;李四~&#039;, Age=40, Birthday=date(1980, 1, 1))]with db.atomic():    Person.bulk_create(data)\n\n**注意：**如果使用的是 Postgresql（支持该RETURNING子句），则先前未保存的模型实例将自动填充其新的主键值。\n\n例如用的是 SQLite，执行上述代码之后，print(data[0].id) 显示的结果是 None。\n6、batch_commit §\n这不是一个好的方法，来看下面的例子\ndata_dict = [{&#039;Name&#039;: &#039;张三&#039;, &#039;Age&#039;: 30, &#039;Birthday&#039;: date(1990, 1, 1)},             {&#039;Name&#039;: &#039;李四&#039;, &#039;Age&#039;: 40, &#039;Birthday&#039;: date(1980, 1, 1)},             {&#039;Name&#039;: &#039;王五&#039;, &#039;Age&#039;: 50, &#039;Birthday&#039;: date(1970, 1, 1)}]for row in db.batch_commit(data_dict, 100):    p = Person.create(**row)\n查看 SQL 语句如下：\n(&#039;BEGIN&#039;, None)(&#039;INSERT INTO &quot;person&quot; (&quot;Name&quot;, &quot;Age&quot;, &quot;Birthday&quot;) VALUES (?, ?, ?)&#039;, [&#039;张三&#039;, 30, datetime.date(1990, 1, 1)])(&#039;INSERT INTO &quot;person&quot; (&quot;Name&quot;, &quot;Age&quot;, &quot;Birthday&quot;) VALUES (?, ?, ?)&#039;, [&#039;李四&#039;, 40, datetime.date(1980, 1, 1)])(&#039;INSERT INTO &quot;person&quot; (&quot;Name&quot;, &quot;Age&quot;, &quot;Birthday&quot;) VALUES (?, ?, ?)&#039;, [&#039;王五&#039;, 50, datetime.date(1970, 1, 1)])\n其实，batch_commit 就是自动添加了一个事务，然后一条条的插入，所以返回的模型实例中能获取到主键。 参数第一个是字典列表，第二个就是每多少条启用一个事务，大家可以把它改成 1 看下 SQL 语句就明白了。\n7、insert_from §\n使用 SELECT 查询作为源 INSERT 数据。此 API 应用于 INSERT INTO … SELECT FROM … 形式的查询。\n语法：\ninsert_from(query, fields)\n参数：\n\nquery：SELECT查询用作数据源\nfields：要将数据插入的字段，此参数必须要的 **示例：**我们将 Person 表按原结构复制一个 Person2 表出来，以做演示。\n\ndata = Person.select(Person.Name, Person.Age, Person.Birthday)Person2.insert_from(data, [&#039;Name&#039;, &#039;Age&#039;, &#039;Birthday&#039;]).execute()\n\n注意： 因为是 INSERT INTO … SELECT FROM … 形式的，所以数据源的列跟要插入的列必须保持一致。\n\n二、删除 §\n1、delete §\ndelete 后加 where 删除指定记录，如果不加 where，则删除全部记录。\nPerson.delete().where(Person.Name==&#039;王五&#039;).execute()\n2、delete_instance §\n删除给定的实例。 语法：\ndelete_instance(recursive=False, delete_nullable=False)\n示例：\np = Person.get(Person.Name==&#039;张三&#039;)p.delete_instance()\ndelete_instance 直接执行删除了，不用调用execute() 方法。\n参数： 一般我都是先讲参数再讲示例的，这次倒过来，示例其实很简单，一看就明白。但是这个参数缺需要好好讲下。\n这两个参数都跟外键有关。我们修改一下测试用的模型。假设有这样两个模型，一个人员，一个部门，人员属于部门。\nclass Department(Model):    Name = CharField()    class Meta:        database = dbclass Person(Model):    Name = CharField()    Age = IntegerField()    Birthday = DateTimeField()    Remarks = CharField(null=True)    Department = ForeignKeyField(Department, null=True) # 这里外键可为空和不可为空是不一样的，下面说明    class Meta:        database = db\n① 当 recursive=False 时，只删除了【部门】，【人员】没有影响，从 SQL 语句中可以看出。\nd = Department.get(1)d.delete_instance(recursive=False)# 执行的 SQL 语句(&#039;SELECT &quot;t1&quot;.&quot;id&quot;, &quot;t1&quot;.&quot;Name&quot; FROM &quot;department&quot; AS &quot;t1&quot; WHERE ? LIMIT ? OFFSET ?&#039;, [1, 1, 0])(&#039;DELETE FROM &quot;department&quot; WHERE (&quot;department&quot;.&quot;id&quot; = ?)&#039;, [1])\n② 当 recursive=True ，并且外键不可为空时，会先删除【部门】下的【人员】，再删除【部门】。\nd = Department.get(1)d.delete_instance(recursive=True)# 执行的 SQL 语句(&#039;SELECT &quot;t1&quot;.&quot;id&quot;, &quot;t1&quot;.&quot;Name&quot; FROM &quot;department&quot; AS &quot;t1&quot; WHERE ? LIMIT ? OFFSET ?&#039;, [1, 1, 0])(&#039;DELETE FROM &quot;person&quot; WHERE (&quot;person&quot;.&quot;Department_id&quot; = ?)&#039;, [1])(&#039;DELETE FROM &quot;department&quot; WHERE (&quot;department&quot;.&quot;id&quot; = ?)&#039;, [1])\n③ 当 recursive=True ，并且外键可为空时，先将【人员】的【部门ID（外键字段）】置为了 NULL，再删除【部门】。\nd = Department.get(1)d.delete_instance(recursive=True)# 执行的 SQL 语句(&#039;SELECT &quot;t1&quot;.&quot;id&quot;, &quot;t1&quot;.&quot;Name&quot; FROM &quot;department&quot; AS &quot;t1&quot; WHERE ? LIMIT ? OFFSET ?&#039;, [1, 1, 0])(&#039;UPDATE &quot;person&quot; SET &quot;Department_id&quot; = ? WHERE (&quot;person&quot;.&quot;Department_id&quot; = ?)&#039;, [None, 1])(&#039;DELETE FROM &quot;department&quot; WHERE (&quot;department&quot;.&quot;id&quot; = ?)&#039;, [1])\n④ delete_nullable 仅在 recursive=True 且外键可为空时有效，和 ③ 一样，当 delete_nullable=True 时，会删除【人员】，而不是将【人员的部门ID】置为 NULL。\nd = Department.get(1)d.delete_instance(recursive=True, delete_nullable=True)# 执行的 SQL 语句(&#039;SELECT &quot;t1&quot;.&quot;id&quot;, &quot;t1&quot;.&quot;Name&quot; FROM &quot;department&quot; AS &quot;t1&quot; WHERE ? LIMIT ? OFFSET ?&#039;, [1, 1, 0])(&#039;DELETE FROM &quot;person&quot; WHERE (&quot;person&quot;.&quot;Department_id&quot; = ?)&#039;, [1])(&#039;DELETE FROM &quot;department&quot; WHERE (&quot;department&quot;.&quot;id&quot; = ?)&#039;, [1])\n三、修改 §\n1、save §\n之前说过，save() 方法可以插入一条记录，一旦模型实例具有主键，任何后续调用 save() 都将导致 UPDATE 而不是另一个 INSERT。模型的主键不会改变。\np = Person(Name=&#039;王五&#039;, Age=50, Birthday=date(1970, 1, 1))p.save()print(p1.id)p.Remarks = &#039;abc&#039;p.save()\n这个例子，第一次执行的 save 是 INSERT，第二次是 UPDATE。\n\n这里解释一下，\n\n2、update §\nupdate 用于批量更新，方法相对简单，以下三种写法都可以\n# 方法一Person.update({Person.Name: &#039;赵六&#039;, Person.Remarks: &#039;abc&#039;}).where(Person.Name==&#039;王五&#039;).execute()# 方法二Person.update({&#039;Name&#039;: &#039;赵六&#039;, &#039;Remarks&#039;: &#039;abc&#039;}).where(Person.Name==&#039;张三&#039;).execute()# 方法三Person.update(Name=&#039;赵六&#039;, Remarks=&#039;abc&#039;).where(Person.Name==&#039;李四&#039;).execute()\n3、原子更新 §\n看这样的一个需求，有一张表，记录博客的访问量，每次有人访问博客的时候，访问量+1。\n因为懒得新建模型，我们就以 Person 模型的 Age + 1 来演示。\n我们可以这样来写：\nfor p in Person.select():    p.Age += 1    p.save()\n这样当然是可以实现的，但是这不仅速度慢，而且如果多个进程同时更新计数器，它也容易受到竞争条件的影响。\n我们可以用 update 方法来实现。\nPerson.update(Age=Person.Age+1).execute()\n四、查询 §\n1、get §\nModel.get() 方法检索与给定查询匹配的单个实例。 语法：\nget(*query, **filters)\n参数：\n\nquery：查询条件\nfilters：Mapping of field-name to value for Django-style filter. 我翻遍网上文章和官方文档都没找到这玩意怎么用！\n\n示例：\np1 = Person.get(Name=&#039;张三&#039;)\n或者\np2 = Person.get(Person.Name == &#039;李四&#039;)\n当获取的结果不存在时，报 Model.DoesNotExist 异常。如果有多条记录满足条件，则返回第一条。\n2、get_or_none §\n如果当获取的结果不存在时，不想报错，可以使用 Model.get_or_none() 方法，会返回 None，参数和 get 方法一致。\n3、get_by_id §\n对于主键查找，还可以使用快捷方法Model.get_by_id()。\nPerson.get_by_id(1)\n4、get_or_create §\nPeewee 有一个辅助方法来执行“获取/创建”类型的操作： Model.get_or_create() 首先尝试检索匹配的行。如果失败，将创建一个新行。\np, created = Person.get_or_create(Name=&#039;赵六&#039;, defaults={&#039;Age&#039;: 80, &#039;Birthday&#039;: date(1940, 1, 1)})print(p, created)# SQL 语句(&#039;SELECT &quot;t1&quot;.&quot;id&quot;, &quot;t1&quot;.&quot;Name&quot;, &quot;t1&quot;.&quot;Age&quot;, &quot;t1&quot;.&quot;Birthday&quot;, &quot;t1&quot;.&quot;Remarks&quot; FROM &quot;person&quot; AS &quot;t1&quot; WHERE (&quot;t1&quot;.&quot;Name&quot; = ?) LIMIT ? OFFSET ?&#039;, [&#039;赵六&#039;, 1, 0])(&#039;BEGIN&#039;, None)(&#039;INSERT INTO &quot;person&quot; (&quot;Name&quot;, &quot;Age&quot;, &quot;Birthday&quot;) VALUES (?, ?, ?)&#039;, [&#039;赵六&#039;, 80, datetime.date(1940, 1, 1)])\n参数： get_or_create 的参数是 **kwargs，其中 defaults 为非查询条件的参数，剩余的为尝试检索匹配的条件，这个看执行时的 SQL 语句就一目了然了。对于“创建或获取”类型逻辑，通常会依赖唯一 约束或主键来防止创建重复对象。但这并不是强制的，比如例子中，我以 Name 为条件，而 Name 并非主键。只是最好不要这样做。\n返回值： get_or_create 方法有两个返回值，第一个是“获取/创建”的模型实例，第二个是是否新创建。\n5、select §\n使用 Model.select() 查询获取多条数据。select 后可以添加 where 条件，如果不加则查询整个表。\n语法：\nselect(*fields)\n参数：\n\nfields：需要查询的字段，不传时返回所有字段。传递方式如下例所示。\n\n示例：\nps = Person.select(Person.Name, Person.Age).where(Person.Name == &#039;张三&#039;)\nselect() 返回结果是一个 ModelSelect 对象，该对象可迭代、索引、切片。当查询不到结果时，不报错，返回 None。并且 select() 结果是延时返回的。如果想立即执行，可以调用 execute() 方法。\n\n注意：where 中的条件不支持 Name=&#039;张三&#039; 这种写法，只能是 Person.Name == &#039;张三&#039;。\n\n6、获取记录条数 count 方法 §\n使用 .count() 方法可以获取记录条数。\nPerson.select().count()\n也许你会问，用 len() 方法可以吗？当然也是可以的，但是是一种不可取的方法。\nlen(Person.select())\n这两者的实现方式天差地远。用 count() 方法，执行的 SQL 语句是：\n(&#039;SELECT COUNT(1) FROM (SELECT 1 FROM &quot;person&quot; AS &quot;t1&quot;) AS &quot;_wrapped&quot;&#039;, [])\n而用 len() 方法执行的 SQL 语句却是：\n(&#039;SELECT &quot;t1&quot;.&quot;id&quot;, &quot;t1&quot;.&quot;Name&quot;, &quot;t1&quot;.&quot;Age&quot;, &quot;t1&quot;.&quot;Birthday&quot;, &quot;t1&quot;.&quot;Remarks&quot; FROM &quot;person&quot; AS &quot;t1&quot;&#039;, [])\n直接返回所有记录然后获取长度，这种方法是非常不可取的。\n7、排序 order_by 方法 §\nPerson.select().order_by(Person.Age)\n排序默认是升序排列，也可以用 + 或 asc() 来明确表示是升序排列：\nPerson.select().order_by(+Person.Age)Person.select().order_by(Person.Age.asc())\n用 - 或 desc() 来表示降序：\nPerson.select().order_by(-Person.Age)Person.select().order_by(Person.Age.desc())\n如要对多个字段进行排序，逗号分隔写就可以了。\n五、查询条件 §\n当查询条件不止一个，需要使用逻辑运算符连接，而 Python 中的 and、or 在 Peewee 中是不支持的，此时我们需要使用 Peewee 封装好的运算符，如下：\n\n\n特别注意：有多个条件时，每个条件必须用 () 括起来。\n\n当条件全为 and 时，也可以用逗号分隔，get 和 select 中都可以：\nPerson.get(Person.Name == &#039;张三&#039;, Person.Age == 30)\n六、支持的比较符 §\n\n\n注意：由于 SQLite 的 LIKE 操作默认情况下不区分大小写，因此 peewee 将使用 SQLite GLOB 操作进行区分大小写的搜索。glob 操作使用星号表示通配符，而不是通常的百分号。如果您正在使用 SQLite 并希望区分大小写的部分字符串匹配，请记住使用星号作为通配符。\n\n解释一下，在 SQLite 中，如果希望 like 的时候区分大小写，可以这么写：\nPerson.select().where(Person.Remarks % &#039;a*&#039;)\n如果不希望区分大小写，这么写：\nPerson.select().where(Person.Remarks ** &#039;a%&#039;)"},"Python/VSCode配合Pyenv":{"title":"VSCode配合Pyenv","links":[],"tags":["python","vscode","pyenv"],"content":"最近安装了Pyenv来管理python环境，不过在配合vscode的时候发现vscode默认调用的是我以前安装的3.10.5这个版本，查找了相关资料1后解决\n\nvscode安装python插件\n安装pyenv-win，推荐使用chocolatey安装\npyenv安装需要的python版本，安装后需要pyenv rehash\n创建工程文件夹\n在文件夹中输入以下命令生成.venv文件\n\npyenv local 3.8.2  #版本根据自己需要的python版本替换\npython -m venv .venv\n\n\n在vscode 右下角选择python版本即可\n\n\n\nFootnotes §\n\n\nwindows下，vscode配合pyenv-win使用python虚拟环境_赵钱孙李葱的博客-CSDN博客 ↩\n\n\n"},"Python/iloc-cannot-enlarge-its-target-object-错误处理":{"title":"“iloc cannot enlarge its target object”错误处理","links":[],"tags":["python"],"content":"这个是问题代码，报“iloc cannot enlarge its target object”，也就是说iloc越界了。\n# 去除非中文，与长度为一的字符\nfor index, row in pos.iterrows():\n    temp = []\n    for i in row[&#039;分词后&#039;].split(&#039; &#039;):\n        if &#039;\\u4e00&#039; &lt;= i &lt;= &#039;\\u9fff&#039; and len(i) &gt; 1:\n            temp.append(i)\n    pos.iloc[index, 4] = &quot; &quot;.join(temp)\n其实原因很简单，我先区分一下iloc和loc，写这俩的文章我感觉没有重点强调下面这点：\nimport pandas as pd\n \ndata = [[1, 10, &#039;A&#039;],\n        [2, 20, &#039;B&#039;],\n        [3, 30, &#039;C&#039;]]\n \ndf = pd.DataFrame(data, columns=[&#039;month&#039;, &#039;price&#039;, &#039;level&#039;])\n \nprint(df)\n#   month  price level\n#0      1     10     A\n#1      2     20     B\n#2      3     30     C\n \nprint(df.iloc[1])\n#month     2\n#price    20\n#level     B\n \nprint(df.loc[1])\n#month     2\n#price    20\n#level     B\n \ndf = df.drop(1)  # 删除索引为1的行 \n \nprint(df)\n#   month  price level\n#0      1     10     A\n#2      3     30     C\n \nprint(df.iloc[1])\n#month     3\n#price    30\n#level     C\n \nprint(df.loc[1])\n# 报错\n \nprint(df.loc[2])\n#month     3\n#price    30\n#level     C\n通过上面这个小实验，可以发现iloc[index]，这个index代表着是真正的第index行；loc[index]，这个index是代表着索引的标号为index的行。\n所以我上面的代码改成下面这样就可以正确运行了，需要注意的是loc列那里不能写数字，要写列名。这也再次说明：iloc[row，line]，行和列都是真正的位置；loc[row，line]，这里的行和列可以理解为是个str，loc是找和row和line相同字符所对应的地方。\npos.loc[index, &#039;分词后&#039;] = &quot; &quot;.join(temp)"},"Python/pip-install-和conda-install的区别":{"title":"pip install 和conda install的区别","links":[],"tags":["conda","python"],"content":"今天正好用到这部分的内容，做一些简单总结，欢迎大家指正：\n\nconda install xxx：这种方式安装的库都会放在anaconda3/pkgs目录下，这样的好处就是，当在某个环境下已经下载好了某个库，再在另一个环境中还需要这个库时，就可以直接从pkgs目录下将该库复制至新环境而不用重复下载。\npip install xxx：分两种情况，一种情况就是当前conda环境的python是conda安装的，和系统的不一样，那么xxx会被安装到anaconda3/envs/current_env/lib/python3.x/site-packages文件夹中，如果当前conda环境用的是系统的python，那么xxx会通常会被安装到~/.local/lib/python3.x/site-packages文件夹中\n\n这里引出一个问题：conda和pip安装同一个xxx库情况下，conda环境下python代码中import xxx时，谁安装的xxx优先级较高会被import，这个问题通过下面这条命令可以解决：\npython -m site\n在我的机器上，会有类似下面输出：\n(py3.6) [~/anaconda3/pkgs @ s64]$ python -m site\nsys.path = [\n    &#039;~/anaconda3/pkgs&#039;,\n    &#039;~/anaconda3/envs/py3.6/lib/python36.zip&#039;,\n    &#039;~/anaconda3/envs/py3.6/lib/python3.6&#039;,\n    &#039;~/anaconda3/envs/py3.6/lib/python3.6/lib-dynload&#039;,\n    &#039;~/anaconda3/envs/py3.6/lib/python3.6/site-packages&#039;,\n]\nUSER_BASE: &#039;~/.local&#039; (exists)\nUSER_SITE: &#039;~/.local/lib/python3.6/site-packages&#039; (doesn&#039;t exist)\nENABLE_USER_SITE: True\n这里的USER_BASE 和USER_SITE其实就是用户自定义的启用Python脚本和依赖安装包的基础路径，从上面的输出可以看到，import xxx时，先找的是anaconda3/pkgs目录，所以conda安装的包会被import进来。"},"Python/python-怎么打印Pandas的Groupby对象？":{"title":"python 怎么打印Pandas的Groupby对象？","links":[],"tags":["python","pandas"],"content":"如果直接打印grouby的结果默认是一个对象格式： §\nprint(df.groupby(&#039;A&#039;))\n&lt;pandas.core.groupby.DataFrameGroupBy object at 0x05416E90&gt;\n国外找到如下资料1： §\nIn Jupyter Notebook, if you do the following, it prints a nice grouped version of the object. The apply method helps in creation of a multiindex dataframe.\nby = &#039;A&#039;  # groupby &#039;by&#039; argument\ndf.groupby(by).apply(lambda a: a[:])\nOutput:\n             A  B\nA                \none   0    one  0\n      1    one  1\n      5    one  5\nthree 3  three  3\n      4  three  4\ntwo   2    two  2\nIf you want the by column(s) to not appear in the output, just drop the column(s), like so.\ndf.groupby(by).apply(lambda a: a.drop(by, axis=1)[:])\nOutput:\n         B\nA         \none   0  0\n      1  1\n      5  5\nthree 3  3\n      4  4\ntwo   2  2\nHere, I am not sure as to why .iloc[:] does not work instead of [:] at the end. So, if there are some issues in future due to updates (or at present), .iloc[:len(a)] also works.\nFootnotes §\n\n\npython - How to print a groupby object - Stack Overflow ↩\n\n\n"},"Python/vscode搭配conda切换python版本":{"title":"vscode搭配conda切换python版本","links":[],"tags":["python"],"content":"问题 §\nvs code中不切换conda环境会导致有些安装在特定虚拟环境的软件包无法被导入\n会出现如下错误\nException has occurred: ModuleNotFoundError\n\n解决 §\nvs code中选择切换conda环境的方法\nctrl+shift+p出现命令栏\n\n后输入\nPython：Select Interpreter\n然后就能选择想要选的环境了\n\n9312151.html"},"Windows/Powershell配置":{"title":"Powershell配置","links":[],"tags":["shell","配置"],"content":"一、安装Powershell §\n安装方式又很多种，我这里用的官方推荐的winget安装方式1：\nwinget search Microsoft.PowerShell\nwinget install --id Microsoft.Powershell --source winget\n\n二、安装oh-my-posh §\nwindows11的话直接用 Winget 执行安装命令2就可以了，还是相当方便的\nwinget install JanDeDobbeleer.OhMyPosh -s winget\n三、修改配置文件 §\n使用 notepad $profile 打开配置文件，在开头部分增加以下代码：\n#配置oh-my-posh自动加载，并且设置主题为 catppuccin_frappe \noh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\\catppuccin_frappe.omp.json&quot; | Invoke-Expression\n \n# 下面是配置自动完成和自动提示\n# Shows navigable menu of all options when hitting Tab\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete\n# Autocompletion for arrow keys\nSet-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward\nSet-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward\n# auto suggestions\nImport-Module PSReadLine\nSet-PSReadLineOption -PredictionSource History\n \nFootnotes §\n\n\nWindows | Oh My Posh ↩\n\n\n在 Windows 上安装 PowerShell - PowerShell | Microsoft Learn ↩\n\n\n"},"Windows/SQLServer-错误-15404-无法获取有关-Windows-NT-组-用户":{"title":"SQLServer 错误: 15404，无法获取有关 Windows NT 组/用户","links":[],"tags":["sqlserver"],"content":"最近 检查到SqlServer备份发现备份失败了于是检查 sql代理日志发现如下报错 ：\n核心提示：SQLServer 错误: 15404，无法获取有关 Windows NT 组/用户 ‘WIN-I556UB3ODG2\\Administrator’ 的信息，错误代码 0x534。 [SQLSTATE 42000] (ConnIsLoginSysAdmin)\n如图：\n\n突然想起因为SqlServer改用登录方式和用户的原因：\n解决步骤：\n一、改变任务计划的权限，因为不是以之前登录的名字登录了，所以执行备份的时候会报错。\n打开sql管理器-点开sql server代理 -任务计划-展开计划-点击计划属性-修改备份用户权限，点确定完成。\n\n重新设置用户权限之后重新测试 执行备份，如没有报错则设置成功，故障解除。"},"Windows/WSL2配置代理":{"title":"WSL2配置代理","links":[],"tags":["wsl2","代理"],"content":"1. Windows下打开代理 §\n1.1 允许局域网 §\n以Clash为例，购买相关配置，选择主页选项卡，开启允许局域网：\n\n1.2 开启防火墙 §\n打开Windows Defender 防火墙，选择允许应用或功能通过 Windows Defender 防火墙：\n\n点击更改设置，找到Clash for Windows，然后勾选专用和公用：\n\n\n如果找不到\n\n2. 配置WSL2 §\n2.1 单次配置 §\n这种配置方法适用于单次配置，也就是在重启终端后会失效。在终端中输入如下语句：\n如果是采用HTTP协议：\n      export hostip=$(cat /etc/resolv.conf |grep -oP &#039;(?&lt;=nameserver\\ ).*&#039;)export https_proxy=&quot;http://${hostip}:7890&quot;;export http_proxy=&quot;http://${hostip}:7890&quot;;\n\n其中后两行的\n\n如果采用socket5协议：\n      export hostip=$(cat /etc/resolv.conf |grep -oP &#039;(?&lt;=nameserver\\ ).*&#039;)export http_proxy=&quot;socks5://${hostip}:7890&quot;export https_proxy=&quot;socks5://${hostip}:7890&quot;\n如果端口号一样则可以合并成为一句话：\nexport all_proxy=&quot;socks5://${hostip}:7890&quot;\n使用curl即可验证代理是否成功，如果有返回值则说明代理成功。\ncurl www.google.com\n2.2 长期配置 §\n这种配置方法适用于长期配置，也就是写一个脚本，然后可以通过命令启动代理。新建proxy.sh脚本如下：\n      #!/bin/shhostip=$(cat /etc/resolv.conf | grep nameserver | awk &#039;{ print $2 }&#039;)wslip=$(hostname -I | awk &#039;{print $1}&#039;)port=7890 PROXY_HTTP=&quot;http://${hostip}:${port}&quot; set_proxy(){  export http_proxy=&quot;${PROXY_HTTP}&quot;  export HTTP_PROXY=&quot;${PROXY_HTTP}&quot;   export https_proxy=&quot;${PROXY_HTTP}&quot;  export HTTPS_proxy=&quot;${PROXY_HTTP}&quot;   export ALL_PROXY=&quot;${PROXY_SOCKS5}&quot;  export all_proxy=${PROXY_SOCKS5}   git config --global http.https://github.com.proxy ${PROXY_HTTP}  git config --global https.https://github.com.proxy ${PROXY_HTTP}   echo &quot;Proxy has been opened.&quot;} unset_proxy(){  unset http_proxy  unset HTTP_PROXY  unset https_proxy  unset HTTPS_PROXY  unset ALL_PROXY  unset all_proxy  git config --global --unset http.https://github.com.proxy  git config --global --unset https.https://github.com.proxy   echo &quot;Proxy has been closed.&quot;} test_setting(){  echo &quot;Host IP:&quot; ${hostip}  echo &quot;WSL IP:&quot; ${wslip}  echo &quot;Try to connect to Google...&quot;  resp=$(curl -I -s --connect-timeout 5 -m 5 -w &quot;%{http_code}&quot; -o /dev/null www.google.com)  if [ ${resp} = 200 ]; then    echo &quot;Proxy setup succeeded!&quot;  else    echo &quot;Proxy setup failed!&quot;  fi} if [ &quot;$1&quot; = &quot;set&quot; ]then  set_proxy elif [ &quot;$1&quot; = &quot;unset&quot; ]then  unset_proxy elif [ &quot;$1&quot; = &quot;test&quot; ]then  test_settingelse  echo &quot;Unsupported arguments.&quot;fi\n\n注意：其中第4行的\n\n\nsource ./proxy.sh set：开启代理\nsource ./proxy.sh unset：关闭代理\nsource ./proxy.sh test：查看代理状态\n\n2.1 任意路径下开启代理 §\n可以在~/.bashrc中添加如下内容，并将其中的路径修改为上述脚本的路径：\nalias proxy=&quot;source /path/to/proxy.sh&quot;\n然后输入如下命令：\nsource ~/.bashrc\n那么可以直接在任何路径下使用如下命令：\n\nproxy set：开启代理\nproxy unset：关闭代理\nproxy test：查看代理状态\n\n2.2 自动设置代理 §\n也可以添加如下内容，即在每次shell启动时自动设置代理，同样的，更改其中的路径为自己的脚本路径：\n. /path/to/proxy.sh set"},"Windows/Win10系统-默认以管理员权限运行所有程序":{"title":"Win10系统 默认以管理员权限运行所有程序","links":[],"tags":["windows"],"content":"非原创，用的是网址 win10如何默认所有软件以管理员身份运行－系统城 的方法。\n百度上类似的修改管理员方式有很多，但都不是很彻底，有时会出现两个管理员共存，你还要看另一个管理员心情执行操作的情况。\n具体方法如下:\n一、 win+R, 输入 regedit 运行注册表\n二、 在注册表地址栏输入 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n\n三、 选中左边System文件夹，在右侧找到 EnableLUA，将值从1改为0\n\n四、 重启系统即可，然后就可以看到管理员就变成了你现操作的系统。执行的各种程序也都是直接以管理员权限执行\n\n这样就不会出现百度的一些管理员修改方法，修改后还是要右键点管理员运行的情况。\n网上还有些方法因为家庭版没组策略表不能执行（不过家庭版也可以可以用bea41d43dec21ab4c41be645.html 的方法添加组策略表就是）\n本文的这个方法是改注册表，家庭版可以直接用。\n再次申明此文章非原创，只是分享出来给饱受管理员权限困扰的大家看看。每次重装系统我都要百度找各种方法，这次安心收藏起来躺备忘录，省得以后再一直百度找这个了。"},"Windows/Windows-Server-2016中文版安装docker的详细步骤":{"title":"Windows Server 2016中文版安装docker的详细步骤","links":[],"tags":[],"content":"实验环境： §\n一台Windows Server 2016中文版，关闭防火墙，IP地址192.168.10.1/24\n还需要一张网卡，需要连接外网，给Windows Server 2016下载更新文件 12\n下载更新 §\n\nsconfig                # 打开参数菜单\n\n\n下载最新版的安装包，安装并重启\n\n 选择数字6，下载并安装更新，弹出黑色对话框后，选择A\n\n 让它下载更新并重启，此操作必须进行，否则后续安装会失败或者各种报错类似于linux各种软件版本依 赖\n打开 powershell 以管理员方式运行\n\n\n 由于Windows Server 2016中文版不支持安装的NuGet，需要使用命令将原有的Tls一级，修改成二 级，才能安装NuGet服务\n[System.Net.ServicePointManager]::SecurityProtocol =  \n[System.Net.SecurityProtocolType]::Tls12; #修改成二级\n\n安装NuGet服务  §\nInstall-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force\n#指定 NuGet安装包最小版本\n\nInstall-Module -Name DockerMsftProvider -Force #安装docker模块\n\nInstall-Package -Name docker -ProviderName DockerMsftProvider -Force #安装 docker包\n\n 注意：如果这一步没有安装成功的话，报错如下\n\n 去C盘下面找到这个路径，如果是空白的，需要下载补丁包\n\n\nhttps://dockermsft.blob.core.windows.net/dockercontainer/docker-1-12-2-cs2-ws-beta.zip\n以上是补丁包文件，把它下载下来后放入刚刚空白的文件夹下\n\n 然后重新运行上面的docker包就可以安装了\nRestart-Computer -Force #安装完成后重启计算机生效\n\n 重启好了之后，打开powershell输入docker info\n\n\ndocker version #查看docker版本\n\ndocker安装就完成了\n总结 §\n到此这篇关于Windows Server 2016中文版安装docker的文章就介绍到这了,更多相关Windows Server安装docker内容请搜索脚本之家以前的文章或继续浏览下面的相关文章希望大家以后多多支持脚本之家！\n您可能感兴趣的文章:\n\nwindows server 2016安装docker的方法步骤\nWindows Server 2016 安装 Docker的过程及遇到问题\nWindows Server 2012 R2 安装 Docker的详细步骤\n"},"Windows/Windows11下安装Smartdns":{"title":"Windows11下安装Smartdns","links":[],"tags":[],"content":"WSL §\n\n\n\n安装 WSL\n安装 WSL 运行环境，发行版本选择 Ubuntu 系统为例。安装步骤请参考 WSL 安装说明\n\n\n安装 SmartDNS\n下载适用于 WSL 的安装包，并解压到如 D 盘根目录。解压后目录如下：\nD:\\SMARTDNS\n├─etc\n│  ├─default\n│  ├─init.d\n│  └─smartdns\n├─package\n│  └─windows\n├─src\n└─systemd\n双击 D:\\smartdns\\package\\windows 目录下的 install.bat 进行安装。要求输入密码时，请输入 WLS ubuntu 的密码。\n\n\n修改配置\n用记事本等打开 D:\\smartdns\\etc\\smartdns 目录中的 smartdns.conf 配置文件配置 SmartDNS。\n一般情况下，只需要增加 server [IP]:port 和 server-tcp [IP]:port 配置项， 尽可能配置多个上游DNS服务器，包括国内外的服务器。\n具体配置请参考配置文件说明。 smartdns.conf 配置包含如下基本内容：\n# 指定监听的端口号\nbind []:53 \n# 指定上游服务器\nserver 1.1.1.1\nserver-tls 8.8.8.8\n# 指定域名规则\naddress /example.com/1.2.3.4\ndomain-rule /example.com/ -address 1.2.3.4\n\n\n\n重新加载配置\n双击 D:\\smartdns\\package\\windows 目录下的 reload.bat 进行重新加载。要求输入密码时，请输入 WLS ubuntu 的密码。\n\n\n将 DNS 请求转发到 SmartDNS 解析\n将 Windows 的默认 DNS 服务器修改为 127.0.0.1，具体步骤参考 Windows IP 设置。\n\n\n检测服务是否配置成功\n执行\n$ nslookup -querytype=ptr smartdns\n查看命令结果中的 name 是否为 smartdns 或你的主机名，如果是则表示生效\n$ nslookup -querytype=ptr smartdns\nServer:         192.168.1.1\nAddress:        192.168.1.1#53\nNon-authoritative answer:\nsmartdns        name = smartdns.\n\n"},"Windows/Windows系统使用make-执行makefile-指令进行项目启动-编译-运行-腾讯云开发者社区-腾讯云":{"title":"Windows系统使用make 执行makefile 指令进行项目启动,编译,运行 - 腾讯云开发者社区-腾讯云","links":[],"tags":[],"content":"最近需要开始开启一个go语言写的项目,项目开启需要使用make指令,但在windows上需要配置一些东西.\n使用make指令在windows上推荐安装mingw 官网下载 releases\n\n点击下载,下载后直接安装, 安装目录选默认的\n\n\n\n\n\n\n\n\n在minggw的bin目录里将\n很关键的一步 到此 make的指令就能在windows使用了\nmingw32-make.exe 复制一份修改为 make.exe\n本文参与 腾讯云自媒体分享计划 ，欢迎热爱写作的你一起参与！\n本文分享自作者个人站点/博客：github\\_35631540?spm=1011.2124.3001.5343[复制](javascript:)\n如有侵权，请联系 cloudcommunity@tencent.com 删除。"},"Windows/windows-server-添加开机不用登录自启动服务":{"title":"windows server 添加开机不用登录自启动服务","links":[],"tags":["windows"],"content":"服务器管理器  ~&gt;  工具（右上角） ~&gt; 任务计划程序  ~&gt; 创建任务\n\n设置不登录可运行\n \n设置服务器启动时运行：\n\n指定自启动脚本目录：\n\n启动设置：\n\n上述都设置完成后重启服务器，若预设的服务未启动，可以继续到计划中去查看执行情况：\n\n上图为正常执行的结果，若执行报错“任务尚未运行（0x41303）”的状态\n打开“本地安全策略-&gt;安全设置-&gt;本地策略-&gt;用户权限分配”：\n\n2、在右侧列表双击“作为批处理作业登录”：\n\n点击“添加用户或组”按钮，将执行批处理作业的用户添加进去。"},"Windows/windows下使用makefile":{"title":"windows下使用makefile","links":[],"tags":[],"content":"1      Makefile\n一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个 Shell脚本一样，其中也可以执行操作系统的 命令。\n2      MinGW\nMinGW，是Minimalist  GNUforWindows的缩写。它是一个可自由使用和自由发布的Windows特定 头文件和使用GNU工具集导入库的集合，允许你在 GNU/ Linux和 Windows平台生成本地的Windows程序而不需要第三方C运行时（C Runtime）库。MinGW 是一组包含文件和端口库，其功能是允许控制台模式的程序使用微软的标准C运行时（C Runtime）库（ MSVCRT.DLL）,该库在所有的 NT OS 上有效，在所有的  Windows 95发行版以上的 Windows OS 有效，使用基本运行时，你可以使用 GCC 写控制台模式的符合美国标准化组织（ANSI）程序，可以使用微软提供的 C 运行时（C Runtime）扩展，与基本运行时相结合，就可以有充分的权利既使用 CRT（C Runtime）又使用 Windows API功能。\n3      下载地址：\n download?source=files\nmingw-get-setup.exe\nl  安装选上C和C++编译器。\nl  将路径C:\\MinGW\\bin中的mingw32-make.exe改成make.exe\nl  将路径C:\\MinGW\\bin加到PATH环境变量上。\n在控制台输入测试，如下：\ngcc\ngcc: fatal error: no input files\ncompilation terminated.\nmake\nC:\\MinGW\\bin"},"Windows/右键菜单-用VSCode打开文件和文件夹":{"title":"右键菜单，用VSCode打开文件和文件夹","links":[],"tags":["window","注册表"],"content":"修改注册表 §\n右键打开文件 §\n1, Win+R 打开运行，输入regedit，打开注册表，找到HKEY_CLASSES_ROOT\\*\\shell分支，如果没有shell分支，则在*下点击右键，选择“新建－项”，建立shell分支。\n2, 在shell下新建“VisualCode”项，在右侧窗口的“默认”双击，在数据里输入“用VSCode打开”。这是右键上显示的文字，可以随便写，只是为了方便查看\n3, 在“VisualCode”下再新建Command项，在右侧窗口的“默认”键值栏内输入程序所在的安装路径，我的是：&quot;D:\\anzhuang\\Microsoft VS Code\\Code.exe&quot; &quot;%1&quot;。其中的%1表示要打开的文件参数。\n4, 配置缩略图。在VisualCode项上新建可扩充字符串值，命名为Icon，双击，把&quot;D:\\anzhuang\\Microsoft VS Code\\Code.exe&quot;放进数据就可以了。\n5, 关闭注册表，即可生效。\n\n注册表设置\n\nCommand 设置\n\n右键打开文件夹 §\n1, Win+R 打开运行，输入regedit，打开注册表，找到HKEY_CLASSES_ROOT\\Directory\\shell分支\n2, 同上面的2一样，数据内的值为“用VSCode打开文件夹”\n3、4、5、步骤完全一样，不再重复说明了。\n\nimage.png\n\nimage.png\n\n右键文件夹空白处，打开文件夹 §\n\nWin+R 打开运行，输入regedit，打开注册表，找到HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\分支\n\n2、同上面的2完全一样\n3、同上，把 %1 改为%V，例如：&quot;D:\\anzhuang\\Microsoft VS Code\\Code.exe&quot; &quot;%V&quot;\n4、5同上，完全一样\n\nimage.png\n\n注意是 “%V”\n最终效果如下： §\n\n"},"Windows/手动安装wsl2-ubuntu20-指定安装位置-小亮yuu":{"title":"手动安装wsl2-ubuntu20(指定安装位置)--小亮yuu","links":[],"tags":["windows"],"content":"系统版本: win10家庭中文版-20H2\n1、检查windows版本\n    若要更新到 WSL 2，需要运行 Windows 10。\n对于 x64 系统：版本 1903 或更高版本，采用 内部版本 18362 或更高版本。\n对于 ARM64 系统：版本 2004 或更高版本，采用 内部版本 19041 或更高版本。\n低于 18362 的版本不支持 WSL 2。 使用 Windows Update 助手更新 Windows 版本。\n小亮的是x64版本20H2，可以安装wsl2。\n原文地址: 15506352.html\n2、需要先启用“适用于 Linux 的 Windows 子系统”可选功能，然后才能在 Windows 上安装 Linux 分发。以管理员身份打开 PowerShell 并运行：\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n3、安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。 计算机需要虚拟化功能才能使用此功能。 以管理员身份打开 PowerShell 并运行：\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n4、重启计算机\n5、安装 wsl_update_x64. msi。下载地址: 适用于 x64 计算机的 WSL2 Linux 内核更新包\nWin10 系统下安装 TortoiseSvn、Node. js 时（. msi 后缀的安装文件），在点击安装时老是提示 2503，2502 错误，因此无法安装上。\n搜索了下一般都提到是权限不够引起的该问题。但是右键点击时发现msi是没有“以管理员身份运行”的选项的，而使用“取得管理员权限”选项也没有任何作用。\n解决办法：\n管理员身份运行模式的命令行的窗口了，输入如下的命令：\nmsiexec /package &quot;your msi file path&quot;\n\n然后就弹出软件的安装窗口，一路安装，就OK了。\n6、将 WSL 2 设置为默认版本\nwsl --set-default-version 2\n7、下载发行版，可以参考 下载发行版，小亮这里下载的是 Ubuntu 20.04\n8、将下载的文件复制到想要安装的位置,修改文件后缀名: Ubuntu_2004.2020.424.0_x64.appx -&gt; Ubuntu_2004.2020.424.0_x64.zip\n9、解压文件，并双击 ubuntu2004.exe 安装。安装成功后设置用户名密码,安装成功。可以看到在安装目录下，有一个 *.vhdx 文件，即是linux的磁盘镜像文件。\n原文地址: 15506352.html\n10、其他\n     10.1 验证wsl是否是 wsl2 的命令: wsl -l -v\n     10.2 启动方法。\n          方法一:命令行:cmd进入命令行。输入 wsl 进入。  \n          方法二:双击 ubuntu2004.exe 启动  \n          方法三:开始菜单启动: 安装到开始菜单:随便找一个开始菜单应用 右键-打开所在文件夹 在start menu文件夹下添加ubuntu2004.exe的快捷方式\n     10.3 卸载 1、wsl —unregister &lt;要卸载的发行版&gt;   2、删除安装目录"},"Windows/桌面窗口管理器占用内存过高-解决方案":{"title":"桌面窗口管理器占用内存过高 - 解决方案","links":[],"tags":[],"content":"问题 §\n桌面窗口管理器英文名为Desktop Window Manager，简称DWM，后文使用简称来描述桌面窗口管理器。在2020年以后发布的Win10系统版本中，例如20H1（2004）、20H2、等等，DWM存在内存泄露问题，会占用大量内存，本人40G内存被DWM占用4G的内存，如下图。\n\n关于原因方面，有2个可能，1个是英特尔核心显卡驱动的原因，1个是微软系统的原因。有人发现没有核显也出现了DWM内存泄露的问题，因此大概率是微软系统的原因。\n后果 §\n若放任该问题不管，则DWM占用的内存会越来越高，后果及其严重，最直接的影响便是内存不足。同时，还会使电脑发热、卡顿、占用CPU使用率。若玩游戏，则出现的掉帧、发热、卡顿现象更为严重，甚至会造成游戏闪退或电脑系统崩溃。因此强烈建议各位解决该问题。\n解决方案 §\n概述 §\n目前的解决方案有多种，不想详细了解以下各个方案的各位，可以直接查看升级核显驱动方案，强烈推荐各位使用该方案，因为该方案可以永久性从根源解决问题。\n结束进程（不推荐） §\n这是一种临时解决方案，需要在任务管理器中手动结束DWM进程。该方案的优点很明显，就是方便快速。但缺点也很明显，就是无法永久性解决问题，DWM还是存在内存泄露问题，每次占用内存过高都需要手动清理。下面介绍步骤：\n右键任务栏打开任务管理器，点击任务管理器的名称部分使进程按照名称升序排列，在列表最后可以找到DWM进程（因为Z排序在最后），即桌面窗口管理器进程，选中该进程，如下图。\n\n点击右下角的结束任务按钮，DWM进程的内存将会被释放。\n注意： 结束任务后系统可能会暂时黑屏，但会自动恢复，不用担心。\n关闭快速启动（不推荐） §\n该方案有人说好用，但本人即使关闭快速启动后问题依旧没有解决。各位可以自行尝试，也可以直接查看升级核显驱动的推荐方案。\n步骤：\n打开控制面板，进入电源选项，点击左侧选择电源按钮的功能。\n点击更改当前不可用设置，取消勾选启用快速启动，点击保存修改，如下图。\n\n升级核显驱动（推荐） §\n推荐各位使用该方案，因为该方案可以永久性解决问题。前段时间英特尔发布的 Intel 核显驱动 30.0.101.1191 版本修复了 DWM 内存泄漏的问题，详情请见如下链接：DWM使用核显驱动生成内存泄露 。\n因此我们只需要将自己电脑的核显驱动更新至30.0.101.1191或更高版本，点击下方的驱动下载链接即可下载并安装更新。若想查看电脑显卡已安装的驱动版本可以在控制面板的设备管理器的显示适配器中查看。\n核显驱动下载链接：\nWindows DCH Driver V30.0.101.1191 。\n步骤：\n打开核显驱动下载链接后，点击Download xxx.exe按钮，或者选择更新的驱动版本进行下载，如下图：\n\n下载后先关闭360等安全软件，防止安装失败。然后右键下载好的exe文件，选择以管理员身份运行，进行安装即可，如下图：\n\n值得一提的是，安装驱动前需同意英特尔软件许可协议，需要把协议拉倒最底端才能成功点击我同意按钮，如下图：\n\n安装成功后需要重启电脑。若安装失败可以重启电脑再次安装，在软件安装程序的设置步骤选择修复，如下图：\n\n若还是安装失败，则可以在软件安装程序的设置步骤勾选进行全新安装，然后选择修复，如下图：\n（或者在控制面板的设备管理器中卸载显卡驱动，再运行驱动安装程序安装驱动）\n\n直至安装成功即可。\n降级核显驱动（不推荐） §\n此方案是保底方案，若升级核显驱动方案不起作用，则可以尝试此方案，原理很简单，当前的核显驱动会出现问题，那么将核显驱动降级到2020年初的旧版本的驱动即可。\n旧版驱动下载链接：\nWindows DCH Driver V26.20.100.8141\n步骤：\n首先在控制面板的设备管理器的显示适配器中卸载显卡的驱动程序。\n然后在驱动下载链接中下载对应的版本的核显驱动程序。\n进行驱动程序的安装，步骤同升级核显驱动。"},"advanced/architecture":{"title":"Architecture","links":["configuration","advanced/paths","layout","features/SPA-Routing","advanced/making-plugins"],"tags":[],"content":"Quartz is a static site generator. How does it work?\nThis question is best answered by tracing what happens when a user (you!) runs npx quartz build in the command line:\nOn the server §\n\nAfter running npx quartz build, npm will look at package.json to find the bin entry for quartz which points at ./quartz/bootstrap-cli.mjs.\nThis file has a shebang line at the top which tells npm to execute it using Node.\nbootstrap-cli.mjs is responsible for a few things:\n\nParsing the command-line arguments using yargs.\nTranspiling and bundling the rest of Quartz (which is in Typescript) to regular JavaScript using esbuild. The esbuild configuration here is slightly special as it also handles .scss file imports using esbuild-sass-plugin v2. Additionally, we bundle ‘inline’ client-side scripts (any .inline.ts file) that components declare using a custom esbuild plugin that runs another instance of esbuild which bundles for the browser instead of node. Modules of both types are imported as plain text.\nRunning the local preview server if --serve is set. This starts two servers:\n\nA WebSocket server on port 3001 to handle hot-reload signals. This tracks all inbound connections and sends a ‘rebuild’ message a server-side change is detected (either content or configuration).\nAn HTTP file-server on a user defined port (normally 8080) to serve the actual website files.\n\n\nIf the --serve flag is set, it also starts a file watcher to detect source-code changes (e.g. anything that is .ts, .tsx, .scss, or packager files). On a change, we rebuild the module (step 2 above) using esbuild’s rebuild API which drastically reduces the build times.\nAfter transpiling the main Quartz build module (quartz/build.ts), we write it to a cache file .quartz-cache/transpiled-build.mjs and then dynamically import this using await import(cacheFile). However, we need to be pretty smart about how to bust Node’s import cache so we add a random query string to fake Node into thinking it’s a new module. This does, however, cause memory leaks so we just hope that the user doesn’t hot-reload their configuration too many times in a single session :)) (it leaks about ~350kB memory on each reload). After importing the module, we then invoke it, passing in the command line arguments we parsed earlier along with a callback function to signal the client to refresh.\n\n\nIn build.ts, we start by installing source map support manually to account for the query string cache busting hack we introduced earlier. Then, we start processing content:\n\nClean the output directory.\nRecursively glob all files in the content folder, respecting the .gitignore.\nParse the Markdown files.\n\nQuartz detects the number of threads available and chooses to spawn worker threads if there are &gt;128 pieces of content to parse (rough heuristic). If it needs to spawn workers, it will invoke esbuild again to transpile the worker script quartz/worker.ts. Then, a work-stealing workerpool is then created and batches of 128 files are assigned to workers.\nEach worker (or just the main thread if there is no concurrency) creates a unified parser based off of the plugins defined in the configuration.\nParsing has three steps:\n\nRead the file into a vfile.\nApplied plugin-defined text transformations over the content.\nSlugify the file path and store it in the data for the file. See the page on paths for more details about how path logic works in Quartz (spoiler: its complicated).\nMarkdown parsing using remark-parse (text to mdast).\nApply plugin-defined Markdown-to-Markdown transformations.\nConvert Markdown into HTML using remark-rehype (mdast to hast).\nApply plugin-defined HTML-to-HTML transformations.\n\n\n\n\nFilter out unwanted content using plugins.\nEmit files using plugins.\n\nGather all the static resources (e.g. external CSS, JS modules, etc.) each emitter plugin declares.\nEmitters that emit HTML files do a bit of extra work here as they need to transform the hast produced in the parse step to JSX. This is done using hast-util-to-jsx-runtime with the Preact runtime. Finally, the JSX is rendered to HTML using preact-render-to-string which statically renders the JSX to HTML (i.e. doesn’t care about useState, useEffect, or any other React/Preact interactive bits). Here, we also do a bunch of fun stuff like assemble the page layout from quartz.layout.ts, assemble all the inline scripts that actually get shipped to the client, and all the transpiled styles. The bulk of this logic can be found in quartz/components/renderPage.tsx. Other fun things of note:\n\nCSS is minified and transformed using Lightning CSS to add vendor prefixes and do syntax lowering.\nScripts are split into beforeDOMLoaded and afterDOMLoaded and are inserted in the &lt;head&gt; and &lt;body&gt; respectively.\n\n\nFinally, each emitter plugin is responsible for emitting and writing it’s own emitted files to disk.\n\n\nIf the --serve flag was detected, we also set up another file watcher to detect content changes (only .md files). We keep a content map that tracks the parsed AST and plugin data for each slug and update this on file changes. Newly added or modified paths are rebuilt and added to the content map. Then, all the filters and emitters are run over the resulting content map. This file watcher is debounced with a threshold of 250ms. On success, we send a client refresh signal using the passed in callback function.\n\n\n\nOn the client §\n\nThe browser opens a Quartz page and loads the HTML. The &lt;head&gt; also links to page styles (emitted to public/index.css) and page-critical JS (emitted to public/prescript.js)\nThen, once the body is loaded, the browser loads the non-critical JS (emitted to public/postscript.js)\nOnce the page is done loading, the page will then dispatch a custom synthetic browser event &quot;nav&quot;. This is used so client-side scripts declared by components can ‘setup’ anything that requires access to the page DOM.\n\nIf the enableSPA option is enabled in the configuration, this &quot;nav&quot; event is also fired on any client-navigation to allow for components to unregister and reregister any event handlers and state.\nIf it’s not, we wire up the &quot;nav&quot; event to just be fired a single time after page load to allow for consistency across how state is setup across both SPA and non-SPA contexts.\n\n\n\nThe architecture and design of the plugin system was intentionally left pretty vague here as this is described in much more depth in the guide on making your own plugin."},"advanced/creating-components":{"title":"Creating your own Quartz components","links":["advanced/making-plugins","features/SPA-Routing","configuration"],"tags":[],"content":"\n\n                  \n                  Warning \n                  \n                \nThis guide assumes you have experience writing JavaScript and are familiar with TypeScript.\n\nNormally on the web, we write layout code using HTML which looks something like the following:\n&lt;article&gt;\n  &lt;h1&gt;An article header&lt;/h1&gt;\n  &lt;p&gt;Some content&lt;/p&gt;\n&lt;/article&gt;\nThis piece of HTML represents an article with a leading header that says “An article header” and a paragraph that contains the text “Some content”. This is combined with CSS to style the page and JavaScript to add interactivity.\nHowever, HTML doesn’t let you create reusable templates. If you wanted to create a new page, you would need to copy and paste the above snippet and edit the header and content yourself. This isn’t great if we have a lot of content on our site that shares a lot of similar layout. The smart people who created React also had similar complaints and invented the concept of Components — JavaScript functions that return JSX — to solve the code duplication problem.\nIn effect, components allow you to write a JavaScript function that takes some data and produces HTML as an output. While Quartz doesn’t use React, it uses the same component concept to allow you to easily express layout templates in your Quartz site.\nAn Example Component §\nConstructor §\nComponent files are written in .tsx files that live in the quartz/components folder. These are re-exported in quartz/components/index.ts so you can use them in layouts and other components more easily.\nEach component file should have a default export that satisfies the QuartzComponentConstructor function signature. It’s a function that takes in a single optional parameter opts and returns a Quartz Component. The type of the parameters opts is defined by the interface Options which you as the component creator also decide.\nIn your component, you can use the values from the configuration option to change the rendering behaviour inside of your component. For example, the component in the code snippet below will not render if the favouriteNumber option is below 0.\ninterface Options {\n  favouriteNumber: number\n}\n \nconst defaultOptions: Options = {\n  favouriteNumber: 42,\n}\n \nexport default ((userOpts?: Options) =&gt; {\n  const opts = { ...userOpts, ...defaultOpts }\n  function YourComponent(props: QuartzComponentProps) {\n    if (opts.favouriteNumber &lt; 0) {\n      return null\n    }\n \n    return &lt;p&gt;My favourite number is {opts.favouriteNumber}&lt;/p&gt;\n  }\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nProps §\nThe Quartz component itself (lines 11-17 highlighted above) looks like a React component. It takes in properties (sometimes called props) and returns JSX.\nAll Quartz components accept the same set of props:\nquartz/components/types.ts// simplified for sake of demonstration\nexport type QuartzComponentProps = {\n  fileData: QuartzPluginData\n  cfg: GlobalConfiguration\n  tree: Node&lt;QuartzPluginData&gt;\n  allFiles: QuartzPluginData[]\n  displayClass?: &quot;mobile-only&quot; | &quot;desktop-only&quot;\n}\n\nfileData: Any metadata plugins may have added to the current page.\n\nfileData.slug: slug of the current page.\nfileData.frontmatter: any frontmatter parsed.\n\n\ncfg: The configuration field in quartz.config.ts.\ntree: the resulting HTML AST after processing and transforming the file. This is useful if you’d like to render the content using hast-util-to-jsx-runtime (you can find an example of this in quartz/components/pages/Content.tsx).\nallFiles: Metadata for all files that have been parsed. Useful for doing page listings or figuring out the overall site structure.\ndisplayClass: a utility class that indicates a preference from the user about how to render it in a mobile or desktop setting. Helpful if you want to conditionally hide a component on mobile or desktop.\n\nStyling §\nQuartz components can also define a .css property on the actual function component which will get picked up by Quartz. This is expected to be a CSS string which can either be inlined or imported from a .scss file.\nNote that inlined styles must be plain vanilla CSS:\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p class=&quot;red-text&quot;&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = `\n  p.red-text {\n    color: red;\n  }\n  `\n \n  return YourComponent\n}) satisfies QuartzComponentConstructor\nImported styles, however, can be from SCSS files:\nquartz/components/YourComponent.tsx// assuming your stylesheet is in quartz/components/styles/YourComponent.scss\nimport styles from &quot;./styles/YourComponent.scss&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;p&gt;Example Component&lt;/p&gt;\n  }\n \n  YourComponent.css = styles\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Warning \n                  \n                \nQuartz does not use CSS modules so any styles you declare here apply globally. If you only want it to apply to your component, make sure you use specific class names and selectors.\n\nScripts and Interactivity §\nWhat about interactivity? Suppose you want to add an-click handler for example. Like the .css property on the component, you can also declare .beforeDOMLoaded and .afterDOMLoaded properties that are strings that contain the script.\nquartz/components/YourComponent.tsxexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.beforeDOM = `\n  console.log(&quot;hello from before the page loads!&quot;)\n  `\n \n  YourComponent.afterDOM = `\n  document.getElementById(&#039;btn&#039;).onclick = () =&gt; {\n    alert(&#039;button clicked!&#039;)\n  }\n  `\n  return YourComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Tip \n                  \n                \nFor those coming from React, Quartz components are different from React components in that it only uses JSX for templating and layout. Hooks like useEffect, useState, etc. are not rendered and other properties that accept functions like onClick handlers will not work. Instead, do it using a regular JS script that modifies the DOM element directly.\n\nAs the names suggest, the .beforeDOMLoaded scripts are executed before the page is done loading so it doesn’t have access to any elements on the page. This is mostly used to prefetch any critical data.\nThe .afterDOMLoaded script executes once the page has been completely loaded. This is a good place to setup anything that should last for the duration of a site visit (e.g. getting something saved from local storage).\nIf you need to create an afterDOMLoaded script that depends on page specific elements that may change when navigating to a new page, you can listen for the &quot;nav&quot; event that gets fired whenever a page loads (which may happen on navigation if SPA Routing is enabled).\ndocument.addEventListener(&quot;nav&quot;, () =&gt; {\n  // do page specific logic here\n  // e.g. attach event listeners\n  const toggleSwitch = document.querySelector(&quot;#switch&quot;) as HTMLInputElement\n  toggleSwitch.removeEventListener(&quot;change&quot;, switchTheme)\n  toggleSwitch.addEventListener(&quot;change&quot;, switchTheme)\n})\nIt is best practice to also unmount any existing event handlers to prevent memory leaks.\nImporting Code §\nOf course, it isn’t always practical (nor desired!) to write your code as a string literal in the component.\nQuartz supports importing component code through .inline.ts files.\nquartz/components/YourComponent.tsx// @ts-ignore: typescript doesn&#039;t know about our inline bundling system\n// so we need to silence the error\nimport script from &quot;./scripts/graph.inline&quot;\n \nexport default (() =&gt; {\n  function YourComponent() {\n    return &lt;button id=&quot;btn&quot;&gt;Click me&lt;/button&gt;\n  }\n \n  YourComponent.afterDOM = script\n  return YourComponent\n}) satisfies QuartzComponentConstructor\nquartz/components/scripts/graph.inline.ts// any imports here are bundled for the browser\nimport * as d3 from &quot;d3&quot;\n \ndocument.getElementById(&quot;btn&quot;).onclick = () =&gt; {\n  alert(&quot;button clicked!&quot;)\n}\nAdditionally, like what is shown in the example above, you can import packages in .inline.ts files. This will be bundled by Quartz and included in the actual script.\nUsing a Component §\nAfter creating your custom component, re-export it in quartz/components/index.ts:\nquartz/components/index.tsimport ArticleTitle from &quot;./ArticleTitle&quot;\nimport Content from &quot;./pages/Content&quot;\nimport Darkmode from &quot;./Darkmode&quot;\nimport YourComponent from &quot;./YourComponent&quot;\n \nexport { ArticleTitle, Content, Darkmode, YourComponent }\nThen, you can use it like any other component in quartz.layout.ts via Component.YourComponent(). See the layout section for more details.\nAs Quartz components are just functions that return React components, you can compositionally use them in other Quartz components.\nquartz/components/AnotherComponent.tsximport YourComponent from &quot;./YourComponent&quot;\n \nexport default (() =&gt; {\n  function AnotherComponent(props: QuartzComponentProps) {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;It&#039;s nested!&lt;/p&gt;\n        &lt;YourComponent {...props} /&gt;\n      &lt;/div&gt;\n    )\n  }\n \n  return AnotherComponent\n}) satisfies QuartzComponentConstructor\n\n\n                  \n                  Tip \n                  \n                \nLook in quartz/components for more examples of components in Quartz as reference for your own components!\n"},"advanced/making-plugins":{"title":"Making your own plugins","links":["build","configuration","advanced/paths","features/Latex","advanced/creating-components"],"tags":[],"content":"\n\n                  \n                  Warning \n                  \n                \nThis part of the documentation will assume you have working knowledge in TypeScript and will include code snippets that describe the interface of what Quartz plugins should look like.\n\nQuartz’s plugins are a series of transformations over content. This is illustrated in the diagram of the processing pipeline below:\n\nAll plugins are defined as a function that takes in a single parameter for options type OptionType = object | undefined and return an object that corresponds to the type of plugin it is.\ntype OptionType = object | undefined\ntype QuartzPlugin&lt;Options extends OptionType = undefined&gt; = (opts?: Options) =&gt; QuartzPluginInstance\ntype QuartzPluginInstance =\n  | QuartzTransformerPluginInstance\n  | QuartzFilterPluginInstance\n  | QuartzEmitterPluginInstance\nThe following sections will go into detail for what methods can be implemented for each plugin type. Before we do that, let’s clarify a few more ambiguous types:\n\nBuildCtx is defined in quartz/ctx.ts. It consists of\n\nargv: The command line arguments passed to the Quartz build command\ncfg: The full Quartz configuration\nallSlugs: a list of all the valid content slugs (see paths for more information on what a ServerSlug is)\n\n\nStaticResources is defined in quartz/resources.tsx. It consists of\n\ncss: a list of URLs for stylesheets that should be loaded\njs: a list of scripts that should be loaded. A script is described with the JSResource type which is also defined in quartz/resources.tsx. It allows you to define a load time (either before or after the DOM has been loaded), whether it should be a module, and either the source URL or the inline content of the script.\n\n\n\nTransformers §\nTransformers map over content, taking a Markdown file and outputting modified content or adding metadata to the file itself.\nexport type QuartzTransformerPluginInstance = {\n  name: string\n  textTransform?: (ctx: BuildCtx, src: string | Buffer) =&gt; string | Buffer\n  markdownPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  htmlPlugins?: (ctx: BuildCtx) =&gt; PluggableList\n  externalResources?: (ctx: BuildCtx) =&gt; Partial&lt;StaticResources&gt;\n}\nAll transformer plugins must define at least a name field to register the plugin and a few optional functions that allow you to hook into various parts of transforming a single Markdown file.\n\ntextTransform performs a text-to-text transformation before a file is parsed into the Markdown AST.\nmarkdownPlugins defines a list of remark plugins. remark is a tool that transforms Markdown to Markdown in a structured way.\nhtmlPlugins defines a list of rehype plugins. Similar to how remark works, rehype is a tool that transforms HTML to HTML in a structured way.\nexternalResources defines any external resources the plugin may need to load on the client-side for it to work properly.\n\nNormally for both remark and rehype, you can find existing plugins that you can use to . If you’d like to create your own remark or rehype plugin, checkout the guide to creating a plugin using unified (the underlying AST parser and transformer library).\nA good example of a transformer plugin that borrows from the remark and rehype ecosystems is the Latex plugin:\nquartz/plugins/transformers/latex.tsimport remarkMath from &quot;remark-math&quot;\nimport rehypeKatex from &quot;rehype-katex&quot;\nimport rehypeMathjax from &quot;rehype-mathjax/svg.js&quot;\nimport { QuartzTransformerPlugin } from &quot;../types&quot;\n \ninterface Options {\n  renderEngine: &quot;katex&quot; | &quot;mathjax&quot;\n}\n \nexport const Latex: QuartzTransformerPlugin&lt;Options&gt; = (opts?: Options) =&gt; {\n  const engine = opts?.renderEngine ?? &quot;katex&quot;\n  return {\n    name: &quot;Latex&quot;,\n    markdownPlugins() {\n      return [remarkMath]\n    },\n    htmlPlugins() {\n      if (engine === &quot;katex&quot;) {\n        // if you need to pass options into a plugin, you\n        // can use a tuple of [plugin, options]\n        return [[rehypeKatex, { output: &quot;html&quot; }]]\n      } else {\n        return [rehypeMathjax]\n      }\n    },\n    externalResources() {\n      if (engine === &quot;katex&quot;) {\n        return {\n          css: [&quot;https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.css&quot;],\n          js: [\n            {\n              src: &quot;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/contrib/copy-tex.min.js&quot;,\n              loadTime: &quot;afterDOMReady&quot;,\n              contentType: &quot;external&quot;,\n            },\n          ],\n        }\n      } else {\n        return {}\n      }\n    },\n  }\n}\nAnother common thing that transformer plugins will do is parse a file and add extra data for that file:\nexport const AddWordCount: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;AddWordCount&quot;,\n    markdownPlugins() {\n      return [\n        () =&gt; {\n          return (tree, file) =&gt; {\n            // tree is an `mdast` root element\n            // file is a `vfile`\n            const text = file.value\n            const words = text.split(&quot; &quot;).length\n            file.data.wordcount = words\n          }\n        },\n      ]\n    },\n  }\n}\n \n// tell typescript about our custom data fields we are adding\n// other plugins will then also be aware of this data field\ndeclare module &quot;vfile&quot; {\n  interface DataMap {\n    wordcount: number\n  }\n}\nFinally, you can also perform transformations over Markdown or HTML ASTs using the visit function from the unist-util-visit package or the findAndReplace function from the mdast-util-find-and-replace package.\nexport const TextTransforms: QuartzTransformerPlugin = () =&gt; {\n  return {\n    name: &quot;TextTransforms&quot;,\n    markdownPlugins() {\n      return [() =&gt; {\n        return (tree, file) =&gt; {\n          // replace _text_ with the italics version\n          findAndReplace(tree, /_(.+)_/, (_value: string, ...capture: string[]) =&gt; {\n            // inner is the text inside of the () of the regex\n            const [inner] = capture\n            // return an mdast node\n            // https://github.com/syntax-tree/mdast\n            return {\n              type: &quot;emphasis&quot;,\n              children: [{ type: &#039;text&#039;, value: inner }]\n            }\n          })\n \n         // remove all links (replace with just the link content)\n         // match by &#039;type&#039; field on an mdast node\n         // https://github.com/syntax-tree/mdast#link in this example\n          visit(tree, &quot;link&quot;, (link: Link) =&gt; {\n            return {\n              type: &quot;paragraph&quot;\n              children: [{ type: &#039;text&#039;, value: link.title }]\n            }\n          })\n        }\n      }]\n    }\n  }\n}\nAll transformer plugins can be found under quartz/plugins/transformers. If you decide to write your own transformer plugin, don’t forget to re-export it under quartz/plugins/transformers/index.ts\nA parting word: transformer plugins are quite complex so don’t worry if you don’t get them right away. Take a look at the built in transformers and see how they operate over content to get a better sense for how to accomplish what you are trying to do.\nFilters §\nFilters filter content, taking the output of all the transformers and determining what files to actually keep and what to discard.\nexport type QuartzFilterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzFilterPluginInstance\n \nexport type QuartzFilterPluginInstance = {\n  name: string\n  shouldPublish(ctx: BuildCtx, content: ProcessedContent): boolean\n}\nA filter plugin must define a name field and a shouldPublish function that takes in a piece of content that has been processed by all the transformers and returns a true or false depending on whether it should be passed to the emitter plugins or not.\nFor example, here is the built-in plugin for removing drafts:\nquartz/plugins/filters/draft.tsimport { QuartzFilterPlugin } from &quot;../types&quot;\n \nexport const RemoveDrafts: QuartzFilterPlugin&lt;{}&gt; = () =&gt; ({\n  name: &quot;RemoveDrafts&quot;,\n  shouldPublish(_ctx, [_tree, vfile]) {\n    // uses frontmatter parsed from transformers\n    const draftFlag: boolean = vfile.data?.frontmatter?.draft ?? false\n    return !draftFlag\n  },\n})\nEmitters §\nEmitters reduce over content, taking in a list of all the transformed and filtered content and creating output files.\nexport type QuartzEmitterPlugin&lt;Options extends OptionType = undefined&gt; = (\n  opts?: Options,\n) =&gt; QuartzEmitterPluginInstance\n \nexport type QuartzEmitterPluginInstance = {\n  name: string\n  emit(\n    ctx: BuildCtx,\n    content: ProcessedContent[],\n    resources: StaticResources,\n    emitCallback: EmitCallback,\n  ): Promise&lt;FilePath[]&gt;\n  getQuartzComponents(ctx: BuildCtx): QuartzComponent[]\n}\nAn emitter plugin must define a name field an emit function and a getQuartzComponents function. emit is responsible for looking at all the parsed and filtered content and then appropriately creating files and returning a list of paths to files the plugin created.\nCreating new files can be done via regular Node fs module (i.e. fs.cp or fs.writeFile) or via the emitCallback if you are creating files that contain text. The emitCallback function is the 4th argument of the emit function. It’s interface looks something like this:\nexport type EmitCallback = (data: {\n  // the name of the file to emit (not including the file extension)\n  slug: ServerSlug\n  // the file extension\n  ext: `.${string}` | &quot;&quot;\n  // the file content to add\n  content: string\n}) =&gt; Promise&lt;FilePath&gt;\nThis is a thin wrapper around writing to the appropriate output folder and ensuring that intermediate directories exist. If you choose to use the native Node fs APIs, ensure you emit to the argv.output folder as well.\nIf you are creating an emitter plugin that needs to render components, there are three more things to be aware of:\n\nYour component should use getQuartzComponents to declare a list of QuartzComponents that it uses to construct the page. See the page on creating components for more information.\nYou can use the renderPage function defined in quartz/components/renderPage.tsx to render Quartz components into HTML.\nIf you need to render an HTML AST to JSX, you can use the toJsxRuntime function from hast-util-to-jsx-runtime library. An example of this can be found in quartz/components/pages/Content.tsx.\n\nFor example, the following is a simplified version of the content page plugin that renders every single page.\nquartz/plugins/emitters/contentPage.tsxexport const ContentPage: QuartzEmitterPlugin = () =&gt; {\n  // construct the layout\n  const layout: FullPageLayout = {\n    ...sharedPageComponents,\n    ...defaultContentPageLayout,\n    pageBody: Content(),\n  }\n  const { head, header, beforeBody, pageBody, left, right, footer } = layout\n  return {\n    name: &quot;ContentPage&quot;,\n    getQuartzComponents() {\n      return [head, ...header, ...beforeBody, pageBody, ...left, ...right, footer]\n    },\n    async emit(ctx, content, resources, emit): Promise&lt;FilePath[]&gt; {\n      const cfg = ctx.cfg.configuration\n      const fps: FilePath[] = []\n      const allFiles = content.map((c) =&gt; c[1].data)\n      for (const [tree, file] of content) {\n        const slug = canonicalizeServer(file.data.slug!)\n        const externalResources = pageResources(slug, resources)\n        const componentData: QuartzComponentProps = {\n          fileData: file.data,\n          externalResources,\n          cfg,\n          children: [],\n          tree,\n          allFiles,\n        }\n \n        const content = renderPage(slug, componentData, opts, externalResources)\n        const fp = await emit({\n          content,\n          slug: file.data.slug!,\n          ext: &quot;.html&quot;,\n        })\n \n        fps.push(fp)\n      }\n      return fps\n    },\n  }\n}\nNote that it takes in a FullPageLayout as the options. It’s made by combining a SharedLayout and a PageLayout both of which are provided through the quartz.layout.ts file.\n\n\n                  \n                  Tip \n                  \n                \nLook in quartz/plugins for more examples of plugins in Quartz as reference for your own plugins!\n"},"advanced/paths":{"title":"Paths in Quartz","links":[],"tags":[],"content":"Paths are pretty complex to reason about because, especially for a static site generator, they can come from so many places.\nThe current browser URL? Technically a path. A full file path to a piece of content? Also a path. What about a slug for a piece of content? Yet another path.\nIt would be silly to type these all as string and call it a day as it’s pretty common to accidentally mistake one type of path for another. Unfortunately, TypeScript does not have nominal types for type aliases meaning even if you made custom types of a server-side slug or a client-slug slug, you can still accidentally assign one to another and TypeScript wouldn’t catch it.\nLuckily, we can mimic nominal typing using brands.\n// instead of\ntype ClientSlug = string\n \n// we do\ntype ClientSlug = string &amp; { __brand: &quot;client&quot; }\n \n// that way, the following will fail typechecking\nconst slug: ClientSlug = &quot;some random slug&quot;\nWhile this prevents most typing mistakes within our nominal typing system (e.g. mistaking a server slug for a client slug), it doesn’t prevent us from accidentally mistaking a string for a client slug when we forcibly cast it.\nThus, we still need to be careful when casting from a string to one of these nominal types in the ‘entrypoints’, illustrated with hexagon shapes in the diagram below.\nThe following diagram draws the relationships between all the path sources, nominal path types, and what functions in quartz/path.ts convert between them.\ngraph LR\n    Browser{{Browser}} --&gt; Window{{Window}} &amp; LinkElement{{Link Element}}\n    Window --&quot;getCanonicalSlug()&quot;--&gt; Canonical[Canonical Slug]\n    Window --&quot;getClientSlug()&quot;--&gt; Client[Client Slug]\n    LinkElement --&quot;.href&quot;--&gt; Relative[Relative URL]\n    Client --&quot;canonicalizeClient()&quot;--&gt; Canonical\n    Canonical --&quot;pathToRoot()&quot;--&gt; Relative\n    Canonical --&quot;resolveRelative()&quot; --&gt; Relative\n    MD{{Markdown File}} --&gt; FilePath{{File Path}} &amp; Links[Markdown links]\n    Links --&quot;transformLink()&quot;--&gt; Relative\n    FilePath --&quot;slugifyFilePath()&quot;--&gt; Server[Server Slug]\n    Server --&gt; HTML[&quot;HTML File&quot;]\n    Server --&quot;canonicalizeServer()&quot;--&gt; Canonical\n    style Canonical stroke-width:4px\n\nHere are the main types of slugs with a rough description of each type of path:\n\nClientSlug: client-side slug, usually obtained through window.location. Contains the protocol (i.e. starts with https://)\nCanonicalSlug: should be used whenever you need to refer to the location of a file/note. Shouldn’t be a relative path and shouldn’t have leading or trailing slashes / either. Also shouldn’t have /index as an ending or a file extension.\nRelativeURL: must start with . or .. to indicate it’s a relative URL. Shouldn’t have /index as an ending or a file extension.\nServerSlug: cannot be relative and may not have leading or trailing slashes.\nFilePath: a real file path to a file on disk. Cannot be relative and must have a file extension.\n\nTo get a clearer picture of how these relate to each other, take a look at the path tests in quartz/path.test.ts."},"features/Latex":{"title":"Latex","links":[],"tags":["plugin/transformer"],"content":"Quartz uses Katex by default to typeset both inline and block math expressions at build time.\nSyntax §\nBlock Math §\nBlock math can be rendered by delimiting math expression with $$.\n$$\nf(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n\nf(x)=∫−∞∞​f(^​ξ),e2πiξxdξ\na​=b+c=e+f​\n[1a​2b​3c​]\nInline Math §\nSimilarly, inline math can be rendered by delimiting math expression with a single $. For example, $e^{i\\pi} = -1$ produces eiπ=−1\nEscaping symbols §\nThere will be cases where you may have more than one $ in a paragraph at once which may accidentally trigger MathJax/Katex.\nTo get around this, you can escape the dollar sign by doing \\$ instead.\nFor example:\n\nIncorrect: I have $1 and you have $2 produces I have 1andyouhave2\nCorrect: I have \\$1 and you have \\$2 produces I have $1 and you have $2\n\nMathJax §\nIn quartz.config.ts, you can configure Quartz to use MathJax SVG rendering by replacing Plugin.Latex({ renderEngine: &#039;katex&#039; }) with Plugin.Latex({ renderEngine: &#039;mathjax&#039; })\nCustomization §\n\nRemoving Latex support: remove all instances of Plugin.Latex() from quartz.config.ts.\nPlugin: quartz/plugins/transformers/latex.ts\n"},"features/Mermaid-diagrams":{"title":"Mermaid diagrams","links":["features/Obsidian-compatibility"],"tags":[],"content":"Quartz supports Mermaid which allows you to add diagrams and charts to your notes. Mermaid supports a range of diagrams, such as flow charts, sequence diagrams, and timelines. This is enabled as a part of Obsidian compatibility and can be configured and enabled/disabled from that plugin.\nBy default, Quartz will render Mermaid diagrams to match the site theme.\n\n\n                  \n                  Warning \n                  \n                \nWondering why Mermaid diagrams may not be showing up even if you have them enabled? You may need to reorder your plugins so that Plugin.ObsidianFlavoredMarkdown() is after Plugin.SyntaxHighlighting().\n\nSyntax §\nTo add a Mermaid diagram, create a mermaid code block.\n```mermaid\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n```\n\nsequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n"},"features/Obsidian-compatibility":{"title":"Obsidian compatibility","links":["features/wikilinks","features/Mermaid-diagrams","features/callouts"],"tags":["plugin/transformer"],"content":"Quartz was originally designed as a tool to publish Obsidian vaults as websites. Even as the scope of Quartz has widened over time, it hasn’t lost the ability to seamlessly interoperate with Obsidian.\nBy default, Quartz ships with Plugin.ObsidianFlavoredMarkdown which is a transformer plugin that adds support for Obsidian Flavored Markdown. This includes support for features like wikilinks and Mermaid diagrams.\nIt also ships with support for frontmatter parsing with the same fields that Obsidian uses through the Plugin.FrontMatter transformer plugin.\nFinally, Quartz also provides Plugin.CrawlLinks which allows you to customize Quartz’s link resolution behaviour to match Obsidian.\nConfiguration §\n\nFrontmatter parsing:\n\nDisabling: remove all instances of Plugin.FrontMatter() from quartz.config.ts.\nCustomize default values for frontmatter: edit quartz/plugins/transformers/frontmatter.ts\n\n\nObsidian Flavored Markdown:\n\nDisabling: remove all instances of Plugin.ObsidianFlavoredMarkdown() from quartz.config.ts\nCustomizing features: Plugin.ObsidianFlavoredMarkdown has several other options to toggle on and off:\n\ncomments: whether to enable %% style Obsidian comments. Defaults to true\nhighlight: whether to enable == style highlights. Defaults to true\nwikilinks: whether to enable turning wikilinks into regular links. Defaults to true\ncallouts: whether to enable callouts. Defaults to true\nmermaid: whether to enable Mermaid diagrams. Defaults to true\nparseTags: whether to try and parse tags in the content body. Defaults to true\nenableInHtmlEmbed: whether to try and parse Obsidian flavoured markdown in raw HTML. Defaults to false\n\n\n\n\nLink resolution behaviour:\n\nDisabling: remove all instances of Plugin.CrawlLinks() from quartz.config.ts\nChanging link resolution preference: set markdownLinkResolution to one of absolute, relative or shortest\n\n\n"},"features/RSS-Feed":{"title":"RSS Feed","links":["configuration"],"tags":[],"content":"Quartz creates an RSS feed for all the content on your site by generating an index.xml file that RSS readers can subscribe to. Because of the RSS spec, this requires the baseUrl property in your configuration to be set properly for RSS readers to pick it up properly.\nConfiguration §\n\nRemove RSS feed: set the enableRSS field of Plugin.ContentIndex in quartz.config.ts to be false.\n"},"features/SPA-Routing":{"title":"SPA Routing","links":["configuration"],"tags":[],"content":"Single-page-app style rendering. This prevents flashes of unstyled content and improves the smoothness of Quartz.\nUnder the hood, this is done by hijacking page navigations and instead fetching the HTML via a GET request and then diffing and selectively replacing parts of the page using micromorph. This allows us to change the content of the page without fully refreshing the page, reducing the amount of content that the browser needs to load.\nConfiguration §\n\nDisable SPA Routing: set the enableSPA field of the configuration in quartz.config.ts to be false.\n"},"features/backlinks":{"title":"Backlinks","links":["features/popover-previews"],"tags":["component"],"content":"A backlink for a note is a link from another note to that note. Links in the backlink pane also feature rich popover previews if you have that feature enabled.\nCustomization §\n\nRemoving backlinks: delete all usages of Component.Backlinks() from quartz.layout.ts.\nComponent: quartz/components/Backlinks.tsx\nStyle: quartz/components/styles/backlinks.scss\nScript: quartz/components/scripts/search.inline.ts\n"},"features/callouts":{"title":"Callouts","links":[],"tags":["plugin/transformer"],"content":"Quartz supports the same Admonition-callout syntax as Obsidian.\nThis includes\n\n12 Distinct callout types (each with several aliases)\nCollapsable callouts\n\n&gt; [!info] Title\n&gt; \n&gt; This is a callout!\n\nSee documentation on supported types and syntax here.\n\n\n                  \n                  Warning \n                  \n                \nWondering why callouts may not be showing up even if you have them enabled? You may need to reorder your plugins so that Plugin.ObsidianFlavoredMarkdown() is after Plugin.SyntaxHighlighting().\n\nCustomization §\n\nDisable callouts: simply pass callouts: false to the plugin: Plugin.ObsidianFlavoredMarkdown({ callouts: false })\nEditing icons: quartz/plugins/transformers/ofm.ts\n\nShowcase §\n\n\n                  \n                  Info \n                  \n                \nDefault title\n\n\n\n                  \n                  Can callouts be nested? \n                  \n                  \n                \n                \n\n\n                  \n                  Yes!, they can. \n                  \n                  \n                \n                \n\n\n                  \n                  You can even use multiple layers of nesting. \n                  \n                \n\n\n\n\n\n                  \n                  Examples \n                  \n                \nAliases: example\n\n\n\n                  \n                  Notes \n                  \n                \nAliases: note\n\n\n\n                  \n                  Summaries \n                  \n                \nAliases: abstract, summary, tldr\n\n\n\n                  \n                  Info \n                  \n                \nAliases: info, todo\n\n\n\n                  \n                  Hint \n                  \n                \nAliases: tip, hint, important\n\n\n\n                  \n                  Success \n                  \n                \nAliases: success, check, done\n\n\n\n                  \n                  Question \n                  \n                \nAliases: question, help, faq\n\n\n\n                  \n                  Warning \n                  \n                \nAliases: warning, caution, attention\n\n\n\n                  \n                  Failure \n                  \n                \nAliases: failure, fail, missing\n\n\n\n                  \n                  Error \n                  \n                \nAliases: danger, error\n\n\n\n                  \n                  Bug \n                  \n                \nAliases: bug\n\n\n\n                  \n                  Quote \n                  \n                \nAliases: quote, cite\n"},"features/darkmode":{"title":"Darkmode","links":[],"tags":["component"],"content":"Quartz supports darkmode out of the box that respects the user’s theme preference. Any future manual toggles of the darkmode switch will be saved in the browser’s local storage so it can be persisted across future page loads.\nCustomization §\n\nRemoving darkmode: delete all usages of Component.Darkmode() from quartz.layout.ts.\nComponent: quartz/components/Darkmode.tsx\nStyle: quartz/components/styles/darkmode.scss\nScript: quartz/components/scripts/darkmode.inline.ts\n"},"features/folder-and-tag-listings":{"title":"Folder and Tag Listings","links":["authoring-content","advanced/creating-components"],"tags":["plugin/emitter"],"content":"Quartz creates listing pages for any folders and tags you have.\nFolder Listings §\nQuartz will generate an index page for all the pages under that folder. This includes any content that is multiple levels deep.\nAdditionally, Quartz will also generate pages for subfolders. Say you have a note in a nested folder content/abc/def/note.md. Then, Quartz would generate a page for all the notes under abc and a page for all the notes under abc/def.\nBy default, Quartz will title the page Folder: &lt;name of folder&gt; and no description. You can override this by creating an index.md file in the folder with the title frontmatter field. Any content you write in this file will also be used in the description of the folder.\nTag Listings §\nQuartz will also create an index page for each unique tag in your vault and render a list of all notes with that tag.\nQuartz also supports tag hierarchies as well (e.g. plugin/emitter) and will also render a separate tag page for each layer of the tag hierarchy. It will also create a default global tag index page at /tags that displays a list of all the tags in your Quartz.\nCustomization §\nThe layout for both the folder and content pages can be customized. By default, they use the defaultListPageLayout in quartz.layouts.ts. If you’d like to make more involved changes to the layout and don’t mind editing some Quartz components, you can take a look at quartz/components/pages/FolderContent.tsx and quartz/components/pages/TagContent.tsx respectively.\n\nRemoving folder listings: remove Plugin.FolderPage() from emitters in quartz.config.ts\nRemoving tag listings: remove Plugin.TagPage() from emitters in quartz.config.ts\n"},"features/full-text-search":{"title":"Full-text Search","links":["configuration"],"tags":["component"],"content":"Full-text search in Quartz is powered by Flexsearch. It’s fast enough to return search results in under 10ms for Quartzs as large as half a million words.\nIt can be opened by either clicking on the search bar or pressing ⌘+K. The top 5 search results are shown on each query. Matching subterms are highlighted and the most relevant 30 words are excerpted. Clicking on a search result will navigate to that page.\nThis component is also keyboard accessible: Tab and Shift+Tab will cycle forward and backward through search results and Enter will navigate to the highlighted result (first result by default).\n\n\n                  \n                  Info \n                  \n                \nSearch requires the ContentIndex emitter plugin to be present in the configuration.\n\nIndexing Behaviour §\nBy default, it indexes every page on the site with Markdown syntax removed. This means link URLs for instance are not indexed.\nIt properly tokenizes Chinese, Korean, and Japenese characters and constructs separate indexes for the title and content, weighing title matches above content matches.\nCustomization §\n\nRemoving search: delete all usages of Component.Search() from quartz.layout.ts.\nComponent: quartz/components/Search.tsx\nStyle: quartz/components/styles/search.scss\nScript: quartz/components/scripts/search.inline.ts\n\nYou can edit contextWindowWords or numSearchResults to suit your needs\n\n\n"},"features/graph-view":{"title":"Graph View","links":["configuration"],"tags":["component"],"content":"Quartz features a graph-view that can show both a local graph view and a global graph view.\n\nThe local graph view shows files that either link to the current file or are linked from the current file. In other words, it shows all notes that are at most one hop away.\nThe global graph view can be toggled by clicking the graph icon on the top-right of the local graph view. It shows all the notes in your graph and how they connect to each other.\n\nBy default, the node radius is proportional to the total number of incoming and outgoing internal links from that file.\nAdditionally, similar to how browsers highlight visited links a different colour, the graph view will also show nodes that you have visited in a different colour.\n\n\n                  \n                  Info \n                  \n                \nGraph View requires the ContentIndex emitter plugin to be present in the configuration.\n\nCustomization §\nMost configuration can be done by passing in options to Component.Graph().\nFor example, here’s what the default configuration looks like:\nquartz.layout.tsComponent.Graph({\n  localGraph: {\n    drag: true, // whether to allow panning the view around\n    zoom: true, // whether to allow zooming in and out\n    depth: 1, // how many hops of notes to display\n    scale: 1.1, // default view scale\n    repelForce: 0.5, // how much nodes should repel each other\n    centerForce: 0.3, // how much force to use when trying to center the nodes\n    linkDistance: 30, // how long should the links be by default?\n    fontSize: 0.6, // what size should the node labels be?\n    opacityScale: 1, // how quickly do we fade out the labels when zooming out?\n  },\n  globalGraph: {\n    drag: true,\n    zoom: true,\n    depth: -1,\n    scale: 0.9,\n    repelForce: 0.5,\n    centerForce: 0.3,\n    linkDistance: 30,\n    fontSize: 0.6,\n    opacityScale: 1,\n  },\n})\nWhen passing in your own options, you can omit any or all of these fields if you’d like to keep the default value for that field.\nWant to customize it even more?\n\nRemoving graph view: delete all usages of Component.Graph() from quartz.layout.ts.\nComponent: quartz/components/Graph.tsx\nStyle: quartz/components/styles/graph.scss\nScript: quartz/components/scripts/graph.inline.ts\n"},"features/popover-previews":{"title":"Popover Previews","links":["advanced/creating-components"],"tags":[],"content":"Like Wikipedia, when you hover over a link in Quartz, there is a popup of a page preview that you can scroll to see the entire content. Links to headers will also scroll the popup to show that specific header in view.\nBy default, Quartz only fetches previews for pages inside your vault due to CORS. It does this by selecting all HTML elements with the popover-hint class. For most pages, this includes the page title, page metadata like words and time to read, tags, and the actual page content.\nWhen creating your own components, you can include this popover-hint class to also include it in the popover.\nConfiguration §\n\nRemove popovers: set the enablePopovers field in quartz.config.ts to be false.\nStyle: quartz/components/styles/popover.scss\nScript: quartz/components/scripts/popover.inline.ts\n"},"features/private-pages":{"title":"Private Pages","links":["advanced/making-plugins","configuration"],"tags":["plugin/filter"],"content":"There may be some notes you want to avoid publishing as a website. Quartz supports this through two mechanisms which can be used in conjunction:\nFilter Plugins §\nFilter plugins are plugins that filter out content based off of certain criteria. By default, Quartz uses the Plugin.RemoveDrafts plugin which filters out any note that has drafts: true in the frontmatter.\nIf you’d like to only publish a select number of notes, you can instead use Plugin.ExplicitPublish which will filter out all notes except for any that have publish: true in the frontmatter.\nignoreFiles §\nThis is a field in quartz.config.ts under the main configuration which allows you to specify a list of patterns to effectively exclude from parsing all together. Any valid glob pattern works here.\nCommon examples include:\n\nsome/folder: exclude the entire of some/folder\n*.md: exclude all files with a .md extension\n!*.md exclude all files that don’t have a .md extension\n**/private: exclude any files or folders named private at any level of nesting\n\n\n\n                  \n                  Warning \n                  \n                \nMarking something as private via either a plugin or through the ignoreFiles pattern will only prevent a page from being included in the final built site. If your GitHub repository is public, also be sure to include an ignore for those in the .gitignore of your Quartz. See the git documentation for more information.\n"},"features/syntax-highlighting":{"title":"Syntax Highlighting","links":[],"tags":["plugin/transformer"],"content":"Syntax highlighting in Quartz is completely done at build-time. This means that Quartz only ships pre-calculated CSS to highlight the right words so there is no heavy client-side bundle that does the syntax highlighting.\nAnd, unlike some client-side highlighters, it has a full TextMate parser grammar instead of using Regexes, allowing for highly accurate code highlighting.\nIn short, it generates HTML that looks exactly like your code in an editor like VS Code. Under the hood, it’s powered by Rehype Pretty Code which uses Shiki.\n\n\n                  \n                  Warning \n                  \n                \nSyntax highlighting does have an impact on build speed if you have a lot of code snippets in your notes.\n\nFormatting §\nText inside backticks on a line will be formatted like code.\n```ts\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n\n  return cleanPath + anchor\n}\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nTitles §\nAdd a file title to your code block, with text inside double quotes (&quot;&quot;):\n```js title=&quot;...&quot;\n\n```\n\nquartz/path.tsexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nLine highlighting §\nPlace a numeric range inside {}.\n```js {1-3,4}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nWord highlighting §\nA series of characters, like a literal regex.\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n\nconst [age, setAge] = useState(50)\nconst [name, setName] = useState(&quot;Taylor&quot;)\nLine numbers §\nSyntax highlighting has line numbers configured automatically. If you want to start line numbers at a specific number, use showLineNumbers{number}:\n```js showLineNumbers{number}\n\n```\n\nexport function trimPathSuffix(fp: string): string {\n  fp = clientSideSlug(fp)\n  let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2)\n  anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor\n \n  return cleanPath + anchor\n}\nEscaping code blocks §\nYou can format a codeblock inside of a codeblock by wrapping it with another level of backtick fences that has one more backtick than the previous fence.\n````\n```js /useState/\nconst [age, setAge] = useState(50);\nconst [name, setName] = useState(&#039;Taylor&#039;);\n```\n````\n\nCustomization §\n\nRemoving syntax highlighting: delete all usages of Plugin.SyntaxHighlighting() from quartz.config.ts.\nStyle: By default, Quartz uses derivatives of the GitHub light and dark themes. You can customize the colours in the quartz/styles/syntax.scss file.\nPlugin: quartz/plugins/transformers/syntax.ts\n"},"features/table-of-contents":{"title":"Table of Contents","links":[],"tags":["component","plugin/transformer"],"content":"Quartz can automatically generate a table of contents from a list of headings on each page. It will also show you your current scroll position on the site by marking headings you’ve scrolled through with a different colour.\nBy default, it will show all headers from H1 (# Title) all the way to H3 (### Title) and will only show the table of contents if there is more than 1 header on the page.\n\n\n                  \n                  Info \n                  \n                \nThis feature requires both Plugin.TableOfContents in your quartz.config.ts and Component.TableOfContents in your quartz.layout.ts to function correctly.\n\nCustomization §\n\nRemoving table of contents: remove all instances of Plugin.TableOfContents() from quartz.config.ts. and Component.TableOfContents() from quartz.layout.ts\nChanging the max depth: pass in a parameter to Plugin.TableOfContents({ maxDepth: 4 })\nChanging the minimum number of entries in the Table of Contents before it renders: pass in a parameter to Plugin.TableOfContents({ minEntries: 3 })\nComponent: quartz/components/TableOfContents.tsx\nStyle:\n\nModern (default): quartz/components/styles/toc.scss\nLegacy Quartz 3 style: quartz/components/styles/legacyToc.scss\n\n\nScript: quartz/components/scripts/toc.inline.ts\n"},"features/wikilinks":{"title":"Wikilinks","links":["features/Obsidian-compatibility"],"tags":[],"content":"Wikilinks were pioneered by earlier internet wikis to make it easier to write links across pages without needing to write Markdown or HTML links each time.\nQuartz supports Wikilinks by default and these links are resolved by Quartz using Plugin.CrawlLinks. See the Obsidian Help page on Internal Links for more information on Wikilink syntax.\nThis is enabled as a part of Obsidian compatibility and can be configured and enabled/disabled from that plugin.\nSyntax §\n\n[[Path to file]]: produces a link to Path to file with the text Path to file\n[[Path to file | Here&#039;s the title override]]: produces a link to Path to file with the text Here&#039;s the title override\n[[Path to file#anchor|Anchor]]: produces a link to the anchor Anchor in the file Path to file\n\n\n\n                  \n                  Warning \n                  \n                \nCurrently, Quartz does not support block references or note embed syntax.\n"},"tags/component":{"title":"Components","links":["advanced/creating-components"],"tags":[],"content":"Want to create your own custom component? Check out the advanced guide on creating components for more information."},"其他/How-To-Be-Successful-→-30-条":{"title":"How To Be Successful → 30 条","links":[],"tags":[],"content":"how-to-be-successful\n之前看 YC 前总裁、现 OpenAI CEO Sam Altman 的这篇标题简单粗暴的 How To Be Successful ，摘抄出了其中一些观点，一共 30 条，Google 翻译 + 人工修改。\n推荐去看全文，虽然标题很鸡血，但其中的一些观点也很有启发性，常看常新，所以就在社交网路上记录一下：\n\n\n在一个几乎没有人采取真正长远眼光的世界里，市场会丰厚回报那些这样做的人。\n自信心是非常强大的，我认识的最成功的人几乎相信自己到了错觉的地步。\n自信必须与自我意识相平衡，我曾经讨厌任何形式的批评并积极避免，现在我总是试着假设它是真的，然后决定是否要采取行动。\n找到简单、快速的方法，在现实世界中测试这些想法。\n“我会失败很多次，但我会真正成功一次”，你必须给自己很多机会才能获得幸运。\n我的另一个重要销售技巧是，在重要的时候亲自出现。\n大多数人高估风险而低估回报，冒险很重要，因为不可能一直都是对的，你必须尝试很多事情，并随着了解的更多而迅速调整。\n你可以跟随你的直觉，花时间做一些可能真的很有趣的事情。\n尽可能长时间地保持廉价和灵活的生活是一种有效的方法，但显然需要权衡取舍。\n做正确的事比工作好几个小时重要得多，大多数人将大部分时间浪费在无关紧要的事情上。\n一旦你弄清楚了该做什么，就势不可挡地快速完成其中一小部分优先事项。\n你必须弄清楚如何努力工作而不精疲力尽，几乎总能奏效的一个方法是，找到你喜欢花很多时间在一起的人一起做的工作。\n事实上，工作耐力似乎是长期成功的最大因素之一。\n如果你在一个重要问题上取得进展，就会有源源不断的人帮助你，让自己变得更有野心，不要害怕从事真正想从事的工作。\n跟随你的好奇心，对你来说令人兴奋的事情，对其他人来说往往也会令人兴奋。\n一个很大的秘密是，你可以以惊人的比例让世界屈服于你的意志 —— 大多数人甚至不去尝试，只是接受事情本来的样子。\n人们拥有使事情发生的巨大能力，自我怀疑、过早放弃、不够努力的结合使大多数人无法发挥他们的潜力。\n设法生存足够长的时间，好运将如愿以偿。\n要任性，就必须乐观。这可通过实践提升，我从未见过一个非常成功的悲观者。\n伟大的工作需要团队，建立一个有才华的网络（紧密或松散）是伟大事业的重要组成部分，建立网络的有效方法是尽可能多地帮助人们。\n每个人在某件事情上都会比其他人做得更好，用你的长处定义自己，而不是你的弱点。\n最简单的学习方法就是结识很多人，并记录谁给你留下了深刻印象，谁没有。请记住，不要高估经验或当前成就。\n我小时候最大的误解是以为人们靠高薪致富，尽管有一些例外（例如艺人），但在福布斯榜单历史上，几乎没有人拿过薪水。\n让事物快速增值的最佳方法是大规模生产人们想要的东西。\n大多人靠外部驱动，他们做事是想给别人留下深刻印象，这很糟糕。\n你会非常在意他人是否认为你在做正确的事，你会非常专注于跟上他人的脚步，这会阻止你做真正有趣的事。\n我认识的最成功的人主要靠内部驱动，他们所做的事是为了给自己留下深刻印象，因为他们觉得有必要让世界发生一些事情。\n这就是为何动机如此重要，这是我试图了解他人的第一件事，正确动机很难定义，但看到时你就会知道。\n在你不痴迷的任何事情上都很难取得巨大成功。\n机会分配如此不均，显然是令人难以置信的耻辱和浪费，但我亲眼目睹很多人一出生就面临糟糕筹码，却取得难以置信的成功，从而知道这是可能的。\n123\n"},"其他/S905L3A-刷机教程与资源整理-N1-半价代替品":{"title":"S905L3A 刷机教程与资源整理 (N1 半价代替品)","links":[],"tags":[],"content":"可以刷 armbian, coreelec , emuelec, openwrt ,个人亲测刷了前 3 个,效果可以看文尾截图.\nCPU 支持 aes 指令,可以 ss 硬解.\n配置: §\nUNT M403A: S905L3A, 4 核 1.9 GHz, GPU G31\nN1: S905D, 4 核 1.5 GHz, GPU Mali-450\n缺点: 无 wifi, 有线网卡百 M.\n\n8205317169\n7946272183\nphicomm-n1-tv-box-linux-distributions\n\n价格方面: §\n个人是 40 收到单机无配件, PDD 上面的 S905L3A 机器差不多在 50 左右也能收到单机无配件的.\n电源用的是旧路由的 12v1a 电源,遥控器靠键盘与游戏手柄来代替.\n刷机准备: §\n虽然卡刷只要 u 盘或 sd 卡就行了,但最好准备线刷的工具,个人就卡刷失败导致开机卡死,最终还是靠线刷解决的.\n\n双公头 USB 线(必备)\n昌晨刷机神器(可选),没有就靠 adb reboot update ,或开机前按 reset 5 秒来触发进 recovery ,这个时候就会触发 U 盘启动了.\n\n线刷教程: §\n主要第三方改的 Rom ,默认帮忙开启 adb, 且有 reboot to libreelec (root) 应用,可以直接从电视启动应用再重启到 u 盘(等于 adb reboot update).\n\n启动刷机软件,并加载好镜像按开始.\n拔了电脑上不需要的其它 usb 设备(防干拔).\n拔了盒子的所有线\n插上晶晨刷机神器,或按住 reset 按钮.\n插上双公线,等 5 秒放开(没发现多试几次,或换个 usb 端口试试).\n\n\n122232733 (固件推荐下载百度网盘里的,s905l3a 文件夹,或其它对应品牌的文件夹)\ntv-1226135-1-1.html\nav502294380\n?id=13851\n\n刷 armbian: §\n\n下载镜像 releases, 选 Armbian_23.02.0_amlogic_s905l3a_bullseye_5.15.87_server_2023.01.13.img.gz (s905l3a, 5.15 内核,6.0 的内核没试过,不晓得能不能启动)\n解压镜像\n使用 rufus 把镜像刷到 u 盘\n打开 u 盘的 fat32 格式的启动分区(找不到就在磁盘管理里分区盘符)\n修改 uEnv.txt 文件的 dtb 为 meson-g12a-u200.dtb, 复制 u-boot-e900v22c.bin 到根目录,重命名为 u-boot.ext (参考 M401A 的配置 amlogic_model_database.md)\n弹出 u 盘,插到机顶盒,使用 adb reboot update ,或接电启动前按 reset ,或运行 reboot to libreelec 来启动 u 盘里的系统.不行就换个 usb 口多试几下.\n\n\nDWFprWWxZa290VXNk\namlogic_model_database.md\nREADME.cn.md\n\n刷 CoreELEC §\n\n去官网下载, 选 Devices with SoC S905X2, 2G (100MBit)\n解压用 rufus 刷到 u 盘\n打开 u 盘 fat 启动分区,复制 g12a_s905x2_2g.dtb 文件到根目录, 重命名为 dtb.img\n弹出 u 盘,插到机顶盒,使用 adb reboot update ,或接电启动前按 reset ,或运行 reboot to libreelec 来启动 u 盘里的系统.不行就换个 usb 口多试几下.\n\n\ncoreelec.org\ntv-1171747-1-1.html\n\nEmuELEC §\n\nEmuELEC 与 CoreELEC 刷机一样的,毕竟 EmuELEC 是基于 CoreELEC 的.\n默认没有 BIOS 与 游戏 ROM ,懒人可以考虑下载第三方打包好的.\n\n\nreleases\n460.html\n\n解决启动 EmuELEC 后,无法启动 U 盘的 armbian §\n由于安装 emuelec 后 导致无法 u 盘启动 openwrt armbian, 省流版操作流程:\n\n电脑安装 adb\nadb connect 192. ×. ×. ×: 5555\nadb shell\nls /dev/block/env #非必要步骤\ncat /dev/block/env #非必须步骤\ndd if=/dev/zero of=/dev/block/env #清空变量\nreboot update\n"},"软件/PM更新包-PM-Lav-codec-ball-更新日志-绿色版":{"title":"PM更新包 | PM-Lav codec ball 更新日志 绿色版","links":[],"tags":[],"content":"    PM更新包是一款自定义强，自由度高，功能齐全，操作简单的播放器DIY整合包，也是一个自用的绿色版。包含了PotPlayer（已精简无用组件）、MPC-HC、LAVFilters等主流的播放组件，支持简繁英三语切换。 提供配置工具，支持傻瓜式一键设置（可选），连小白也能轻松使用。\n\n\nPM-Lav codec ball\n\n下载之前，建议先看说明：传送门（有任何疑问也请先看一看说明）\n解压示例图：\n\n\n（向导是为了更方便选择，请不要怀疑它的绿色属性ԅ(¯﹃¯ԅ)）\n\n版本概括：\n\nPotPlayer         1.7.21827.0 （32：1.7.21024）\n\nMPC-HC            1.7.13.119\n\nLAV               0.77.1.1\n\nLentoid HEVC      2.2.0.0\n\nMediaInfo         22.9.0.0\n\nMediaInfokGUI     1.1.0.1\n\nAssocSet          3.3.1.0\n\nXyVSFilter        3.0.0.343\n\nXySubFilter       3.1.0.752\n\n\n更新说明：\n\n… …\n2022.11.16.64/32:\n1、更新 LAV 0.77.1.1 （0.77.0.1基础上改了个版本号，故不集成进来，但可通过lav独立包进行更新）\n2022.11.12.64:\n1、更新 PotPlayer 1.7.21827.0\n2、更新 LAV 0.77.0.1\n3、更新 MediaInfo 22.9.0.0\n2021.09.05.64:\n1、更新 PotPlayer 1.7.21546.0\n2、更新 LAV 0.75.1.0\n2021.06.15.64:\n1、更新 PotPlayer 1.7.21493.0\n2021.05.17.64:\n1、更新 PotPlayer 1.7.21483.0\n2、更新 LAV 0.75.0.2\n3、更新 MediaInfo 21.3.0.0\n2020.09.29.64:\n1、更新 PotPlayer 1.7.21290.0\n2、更新 LAV 0.74.1.75\n3、更新 MediaInfo 20.8.0.0\n…\n2020.01.16.32:\n1、更新 PotPlayer 1.7.21024.0\n2、更新 Lentoid HEVC Decoder 2.2.0.0\n3、更新 XyVSFilter 3.1.0.752\n4、更新 MediaInfo 19.9.0.0\n… …\n2015.11.23.32:\n1、更新 PotPlayer 1.6.57243\n2、更新 MPC-HC 1.7.10.19\n3、更新 LAV 0.67.0.3\n4、更新 AssocSet 3.3.0.0（新增启动器模式，支持加载相似文件）\n2015.11.23.64:\n1、更新 MPC-HC 1.7.10.19\n2、更新 LAV 0.67.0.3\n3、更新 AssocSet 3.3.0.0（同32位）\n… …\n2014.01.22.32：\n1、更新 PotPlayer 1.5.44655\n2、更新 MPC-HC 1.7.1.383\n3、更新 LAV 0.60.1.4\n4、更新 MediaInfo 0.7.67\n\n完整更新历史：32位、64位\n\n\n系统环境：\n\n32位：WinXP SP3/Vista/Win7/8/8.1/10/11 (x86/x64)\n64位：Win7/8/8.1/10/11(x64)\n\n运行环境：\n\nVC2008(xp)/VC2013/ VC2019 + .NET Framework 4.x\n（下载推荐）\n\n下载\n\n网盘：度盘 (提取码：oakt )| 备用1(蓝奏79s1） | 备用2 提取码:cv4A 备用3（城通）\n旧版本（提取码：5lzj）\n（其他相关文件，直接见网盘，出现度鸡F5刷新。相关补丁见网盘）\n压缩包如有出现密码，请尝试：123456\n度盘下载缓慢请换备份链接。度盘抽了同样请换备份链接，度盘经常性分享失败（这锅不背的ヽ(ｏ`皿′ｏ)ﾉ）不一定能及时补上（其中，主分流盘1 文件列表比较全）。\nPotplayer支持HEVC软解的版本：1.7.hevc（密码:ema6） (2020.05.16更新) | 备用-提取码:cSbz\n最新版DTS/AC3解码问题请到 滤镜-音频解码器 里确认是否使用了lav。没有该项请往下看。\nmadVR：下载 使用\nLAV独立包说明\nFFmpeg.dll下载：1-密码:dpic\n\n2015.05.19 全面支持64位版本，如果出现不兼容的情况，推荐你用回32位。\n2019.12.23 推荐你使用64位，除非32位系统。\n大概是因为版权费的问题，自1.7.20538开始PotplayerH.265软解，Pot官方推荐直接使用外部解码器作为替代，如LAV。\n温馨提示：为了避免类似的解码器版权规避问题，这里建议一个一劳永逸的办法，将Lavfilters全套注册到系统。具体操作：打开potset64进入到注册组件功能菜单\n2020.09.29 x86暂时停更。不过你可以直接更新 x86版的Lavfilters\n注意，打开链接对话框卡顿是因为URL文件夹里有被墙的网站文件, 小白教程\n说说为什么我会追崇非注册方式使用解码滤镜"},"软件/RunningCheese-Edge-绿色版":{"title":"RunningCheese Edge 108.0 稳定版","links":[],"tags":["windows","chrome"],"content":"\n多年以后，面对统计表，谷歌会回想起当年称霸浏览器市场的荣光。\n2018 年 12 月 8 日 微软宣布 Edge 浏览器放弃自家的 EdgeHTML 内核，转而使用谷歌的 Chromium 内核，表明了向自己的对手投降。时隔两年，微软终于推出了 Edge 浏览器正式版，那条搅动浏览器市场的“鲶鱼”也终于出现了。\n一、Edge 浏览器使用体验 §\n1、浏览器内核。\n浏览器内核是重中之重，简单来说，新版 Edge 浏览器，就是微软魔改了谷歌已经研发了十几年的 Chrome 浏览器。所以 Chrome 有的功能，Edge 会有，Chrome 有的优点，Edge 也会有。\n比如超快的网页加载速度，全面的兼容性，当然还有丰富的拓展库，虽然 Edge 浏览器目前自身的应用商店拓展数量极少，但好在支持从 Chrome 的应用商店上安装拓展。\n2、界面设计。\n要说 Edge 的界面设计如何，我觉得可以用“简洁大气”四个字来概括。无论是菜单还是图标，都明显是冲着跨平台多设备使用去的，所以整体的 UI 看上去比较“大”，这也是为触屏设备而设计的。\n但缺点也明显，Edge 没有为普通的屏幕做相应优化，比如在我的 19 寸 1080P 的屏幕里就显得比较“粗大”，没有在 2K、4K 屏幕下的那种精致感。可供用户自定义的选项也很少，不支持主题皮肤，内置的深色主题也像是一个半成品。\n3、多平台支持。\nEdge 浏览器已经上线了所有平台。\n浏览器登陆使用的是微软服务框架，解决了国内用户无法正常使用谷歌服务的问题。对于国内用户来说，想找一个“纯粹”的浏览器同步服务，除了 Firefox 外，现在又多了一个选择。\n4、大声朗读。\n如果要问有没有什么功能可以让用户感到惊喜，那么“大声朗读”会第一个被提到。它的语音仿真程度真的很高，无论是中英文切换，还是语气停顿都恰到好处，细品，你甚至还觉到它有情感，让人听起来十分愉悦。\n5、阅读模式。\nEdge 浏览器自带的阅读模式也十分优秀，或者可以说是目前最优秀的。不仅支持调整字体和颜色，特有的“语法工具”还可以显示名词、动词、形容词，对于英语阅读很有帮助。\n6、翻译功能。\n和 Chrome 浏览器一样，Edge 浏览器也内置了自家的必应翻译。虽然整体水平不如谷歌翻译，但应付一般的网页翻译还是绰绰有余的，而且翻译速度快，翻译是将文字直接替换为中文，从观感上看体验更好。\n7、缺点和不足。\n选择是有代价的，既然选择了 Chromium 内核，那么它的优点和缺点，Edge 浏览器也都会一并拥有。比如内存占用大、字体渲染发虚、功能限制多等问题 Edge 也会有。\n新版 Edge 浏览器甚至还把旧版 Edge 浏览器的诸多优势也一并丢弃了，比如旧版 Edge 超快的启动速度、低能耗、低内存占用、清晰的字体渲染、还有绝佳的 PDF 阅读体验也都不复存在了。\n8、总结\n总的来说，Edge 浏览器是一款“微软化”的 Chrome 浏览器，也是一款可以比肩 Chrome 的浏览器。\n二、RunningCheese Edge 定制版 §\n新版 Edge 浏览器安装后会自动卸载旧版 Edge，无法像之前那样新旧共存，所以我制作了一个 Edge 定制版。\n\n特色内容：\n1、最新 Chroium 内核，采用了 GreenChrome 的便携方式。\n2、操作逻辑与之前的 Chrome、Firefox 定制版浏览器保持一致。\n3、各项功能均已配置完成，可以用作日常使用。\n4、便携版，不会与系统自身就有的 Edge 冲突。\n下载链接：7bzA-wzxOd\n使用手册：chrome-usage（内核相同，大部分使用方法也相同）。\n三、RunningCheese Edge 更新 §\n更新内容：\n\n\n此次更新：cV4a7eL3qcNZQTRIjg97BQ\n\n\n历史更新：100.0\n\n\n历史更新：99.0、97.0、96.0、95.0、94.0、93.0、91.0、90.0\n\n\n历史更新：89.0、88.0、87.0、85.0、84.0、80.0、79.0、78.0\n\n\nMac 版本：chrome-for-mac（Chrome 和 Edge 一样）\n\n\n升级方法：\nEdge 和 Chrome 浏览器的数据通用，迁移配置文件夹下相应的数据就可以无损 转移到 Edge 上，比如：\n书签数据：../User Data/Default/Bookmarks\n书签图标：../User Data/Default/Favicons\n历史记录：../User Data/Default/History\n搜索引擎：../User Data/Default/Web Data\n如何更新浏览器内核？\n因为便携化功能的需求，定制版 Edge 浏览器的内核无法自动更新，如果需要升级内核的话，下载下面的压缩包，用里面的 86.0.4240.111 文件夹，还有 msedge.exe 文件替换原来的就可以了。\n如何设置为默认浏览器？\n参考 Chrome 使用手册里的 常见问题篇 chrome-usage\n结尾 §\n如果要我预测一下 Edge 的未来，我认为 Edge 未来会抢去 Chrome 的一大部分市场份额，同时也会对谷歌形成制衡作用，如果谷歌做出了什么出格行为，微软就会另立山头，要知道当年 Chrome 浏览器也是这样出来的。\n但 Edge 也不会超过 Chrome 成为新的龙头老大，毕竟这可是谷歌的核心利益，谷歌会一直处于领头的位置。"},"黑苹果/黑苹果-macOS-12-Monterey-原版-OC-引导安装教程":{"title":"【黑苹果】macOS 12 Monterey 原版 OC 引导安装教程","links":[],"tags":[],"content":"最新原版黑苹果安装教程，图文并茂简单详尽。附带安装工具、原版引导镜像及各电脑EFI驱动合集，图片较多，请耐心等待加载。\n远程服务：点击开始远程          视频教程：点击查看视频\n准备工作： §\n\nU盘： 大于等于16GB的U盘\n镜像： 可引导 macOS 原版镜像\n工具： Etcher（刻录镜像）、DiskGenius（分区、引导）、EFI驱动文件\n\n\n\n安装工具获取链接：macx 提取码：qs05\n安装镜像百度网盘：macx 提取码：macx\n安装镜像天翼云盘：RF7Nj26JF7nq\n\n一、刻录镜像 §\n1、将您的U盘插入电脑，为保证成功，首先将U盘以默认值格式化一次；\n\n2.打开balenaEtcher软件，点击“Select image”选择你刚才下载好的安装镜像；\n\n打开balenaEtcher软件\n\n选择下载好的安装镜像\n3.然后点击“Select drive”选择你的U盘，如果你直插有一个U盘，软件会自动选择；\n\n4.接着点击“Flsh！”开始刻录黑苹果安装镜像到U盘；\n\n刻录中。。。\n5.刻录完成后会进行一次完整性检测；\n\n检测中。。。\n6.等到提示“Flash Complete！”Successful device 就完成安装镜像的制作了，把U盘弹出并拔出。\n\n7.至此，黑苹果镜像就刻录完成！\n二、制作引导 §\n1.打开分区工具DiskGenius，找到U盘上的OC分区（我们是三分区原版黑苹果镜像，自带Clover、OC与WinPE分区），删除自带的EFI文件。\n\n2.把适合自己电脑EFI引导并拷贝至相应的EFI分区。\n\n这里有我远程安装收集的一些EFI资源（六年老店，辛苦远程，原创合集），集合多种电脑配好的EFI驱动文件，除三代处理器以下或更低配置的电脑，部分更新支持最新Big Sur 11.4，基本主流配置的电脑都有收集，可直接替换使用。\n注： EFI只有实机安装才能收集，凭空无法配置。网上有流出的旧版资源（淘宝、闲鱼、GitHub），文件不全且年久失修，不保证适合新系统，旧电脑装旧系统勉强可用，新电脑新系统，请务必获取最新合集。\n\nEFI下载： §\n隐藏内容，仅限以下用户组阅读\n如果您未在其中，可以升级\n终身会员\n登录 注册\n三、制作Mac系统盘 §\n制作Mac系统盘分为分区安装与整个磁盘安装两种情况，其实大同小异，但问的人很多，这里就都讲一下。分区安装的意思就是我一块磁盘几个分区中的一个用来装Mac系统，跟Windows系统的C盘D盘一样，数据互不影响。整个磁盘安装就是我一整块磁盘都用来装Mac系统，我个人建议，有条件的还是选整个磁盘安装。\nPS：鉴于硬盘的设置多种多样，此处仅描述两个常见的分区方案，如您属于其他情况请在此处查看\n3.1 单硬盘装macOS与Windows双系统： §\na.计算机右键&gt;管理&gt;磁盘管理\n\n\nb.首先检查磁盘是否符合要求，磁盘格式必须为GPT格式(GUID)，即右键这个磁盘，“转换为MRB磁盘”为灰色就是GPT格式。\n\nc.另外磁盘不能有小于200M的分区且必须有EFI分区（EFI分区也必须大于200M），满足这两个基本条件后，右键压缩卷（用分区工具查看）。\n\nd.输入压缩大小，根据自己情况及要求输入，最小30G。\n\ne.接下来选中被压缩的分区，右键新建简单卷。\n\nf.然后就一路默认下一步，但注意有一项要选择“不要格式化这个卷”；\n\ng.一路默认下一步即可；\n\n\n注意：这一步必须要选“不要格式化这个卷”；\n\nh.继续默认下一步直至完成；\n\nI.最终结果是这样的：\n\n3.2 单硬盘安装macOS系统 §\na.整个磁盘只装mac系统，那就删除磁盘所有分区，变成一个全新的磁盘即可。如下图：\n\nb.在系统磁盘管理中会显示未分配：\n\n至此安装盘搞定，黑苹果完成了85%。\n四、安装系统 §\n1.设置BIOS，重启按ESC进入BIOS （电脑不同，快按键不一样，BIOS界面也会不同，小编用的是微星的主板）;\n\n2.然后关闭安全启动Secure Boot或者选择其他操作系统（这是微软为了防止安装Windows操作系统的电脑改装其他系统而设置的，不关闭无法启动到引导界面）；\n\n3.第一启动项选择为U盘启动：\n\n4.设置U盘的启动项（我们是多引导镜像，所以刻录到U盘会有多个引导）\n\n5.选择到U盘启动中的OC引导启动项（我们镜像设置第二个引导分区为OC引导，反正把U盘启动项都试过，肯定可以去到正确的引导项）\n\n6.设置好保存重启（不同BIOS可能设置的选项有所出入）\n\n7.重启进入OC引导界面，选择 install macOS Monterey ，并回车进入；\n\n8.过一会儿会进入如下界面，耐心等待进入安装界面（顺利的话5-15分钟，超过一般就是EFI不匹配卡住了）;\n\nPS：有的人可能是跑代码界面，去掉 -v 就是苹果界面了。\n9.如果首次进入不是中文界面，点击左上角苹果logo右边第二个选项，修改语言：\n\n10.选择你想使用的语言进行安装系统，也可以装完进入系统再修改语言。\n\n11.设置好语言后，选择磁盘工具；\n\n12.选中自己做的Mac系统盘，一般名字颜色比较浅，灰色的那个（看清楚千万不要选错）；\n\n13.然后抹掉磁盘，名字随便输，格式选APFS格式，方案GUID；\n\n**提示：**如果摸盘失败，提示空间不足，就是你的磁盘格式没处理好，重新进win修改格式；\n\n14.抹掉磁盘之后，关闭“磁盘工具”，选择“安装MAC OS ”;\n\n15.点击【继续】，进入使用条款界面；\n\n一路同意默认下一步即可；\n\n16.选择安装磁盘（选择刚才抹掉的磁盘），开始安装macOS\n\n第一次安装界面：\n\n17.第一次安装完后会重启，进入OC引导界面后选择 macOS Installer，过一会儿会进入二次安装界面。\n\n二次安装界面：\n\n18.二次安装完，黑苹果就安装到你的硬盘了，重启后进入OC引导选择 X（你抹掉磁盘的名字），进入苹果系统；\n\n19.设置好账户密码等，就可以进入桌面了；\n\n初次进入系统建议不要联网：\n\n\n20.进入系统后检查各项驱动，对于未驱动的硬件可在本站查找相关驱动教程来驱动；\n\n五、更改硬盘启动 §\n1.打开分区工具，把刚刚的EFI引导文件拷贝到硬盘的ESP分区（有的显示“EFI”）；\n\n2.点击【工具】选择设【设置UEFI BIOS 启动项】\n\n3.点击【添加】，新建OC引导项；\n\n4.选择到硬盘的EFI分区；\n\n5.选择BOOTx64.efi文件，路径：EFI\\BOOT\\BOOTx64.efi；\n\n6.选择好后点击【打开】，新建完成\n\n7.然后输入新建的OC引导的启动项名称（注意英文输入法输入）；\n\n8.选择新建好的OC引导并上移至第一项；\n\n9.部分电脑还需要进BIOS设置一下新建的启动项为第一启动项。至此黑苹果安装教程写完，祝各位尽早吃上黑苹果！\n\n这里有我远程安装收集的一些EFI资源（六年老店，辛苦远程，原创合集），集合多种电脑配好的EFI驱动文件，除三代处理器以下或更低配置的电脑，部分更新支持最新 Monterey ，基本主流配置的电脑都有收集，可直接替换使用。\n隐藏内容，仅限以下用户组阅读\n如果您未在其中，可以升级\n终身会员\n登录 注册\n注：EFI只有实机安装才能收集，凭空无法配置。网上有流出的旧版资源（淘宝、闲鱼、GitHub），文件不全且年久失修，不保证适合新系统，旧电脑装旧系统勉强可用，新电脑新系统，请务必获取最新合集。\n远程服务：点击开始远程          视频教程：点击查看视频\n下载权限 §\n\n\n终身会员：\n免费下载\n\n\n黑苹果EFI合集 §\n\n苹果地带： 原创合集\n\n您当前的等级为 游客\n请先登录\nEFI下载\n**声明：**如遇资源链接失效，请评论反馈或私信happy。如若本站内容侵犯了您的合法权益，请发送邮件至【www.macx.top@qq.com】进行处理。"},"黑苹果/黑苹果工具和驱动下载":{"title":"黑苹果工具和驱动下载","links":[],"tags":["黑苹果","工具"],"content":"黑苹果工具和驱动下载 §\n360驱动大师.zipwindows的360驱动大师\nAMIBIOS修改工具.rarAMI BIOS修改工具\nAiDA64Business.zipACPI提取工具\nAtiFlash.zipA卡刷BIOS工具\nBIOS工具.zipBIOS提取工具包\nBOOTICE.zipUEFI修改工具，制作黑苹果legacy启动盘\nBroadcom_drivers.zipBCM94360X系列Windows驱动\nCPU-S_v4.3.1.dmgmacos变频测试工具\nCloverV2.zipBIOS的ACPI提取工具\nDiskGenius_X64.zip磁盘精灵\nDism++.zip修改磁盘的ESP分区后重恢复引导\nEEDID_Editor_Win64.zip提取EDID工具，解决8个苹果的问题\nEasyUEFI.zipUEFI引导修改工具\nFingerMgmt.zip触摸板压力测试工具\nGPU-Z.exeGPU检测工具\nHDAU_TOOL.zipWindows下声卡提取工具\nKextUtility.zip10.15及以下版本安装驱动的工具，自动修复签名和权限\nMaciASL.zipDSL编辑工具\nNET_Framework_v2.0.zipUSBTool运行库\nPlistEdit.dmgPlist编辑器\nRFind.zip第三方万能引导工具\nRealtek_USB_WIFI驱动.zipOC直接用的Kext驱动，支持到11.x\nSSDTTime-master.zip修复HPET和EC工具\nTeamViewerQS.exe远程控制客户端\nUSBDeviceTreeViewer.zipusb端口查看器\nUSBMap-master.zipUSB定制工具\nWinUTCOn.reg.zip双系统Windows时间补丁\nWireless.USB.OC.Big.Sur.zipUSB网卡驱动，支持11.x和12.x\ncpu-z.zipCPU检测工具\ninstools-r.zip恢复安装黑苹果的工具集\ninstools-u.zipU盘安装黑苹果的工具集\nioreg-201.zipmacOS查看组件加载的工具，主要用于触摸板驱动\nioreg-302.zip查看组件加载的工具，主要用于触摸板驱动\nnet_PE.zip带有网络支持的PE\nrufus-3.17.zipWindows下启动U盘制作工具\nssdtPRGen.sh-17.0.zipCPU睿频工具\nusbtoolbox.exewindows下定制USB的工具\nvc_redist.x64.exeParagon Hard Disk Manager运行库\nwePEX64.exe微PE\nwinrar-x64-sc.exewinrar_X64烈火版\n微软常用运行库合集2021.exeVC运行库，提示丢失dll文件时安装\n显卡UEFIgop更新工具.zip 修改老显卡 BIOS 添加 UEFI 支持\nLoading…\nNew opened\nwaiting for update\n                    Automatic\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    Times New Roman\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n\n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                            \n\n\n                            \n\n                            \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                            \n\n\n                            \n\n                            \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                            \n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n    \n    \n\n        \n\n            \n\n                \n\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n   \n    \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n                \n\n                    SUM\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n                \n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                    \n\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n                \n\n                    \n\n                    \n\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n\n                \n\n                    \n\n                    \n\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n                \n\n                    \n\n                        \n\n                        \n\n                    \n\n                \n\n            \n\n        \n\n    \n\n    \n\n        \n\n            \n\n\n                \n\n                    \n\n                    \n\n                \n\n                \n\n                \n\n            \n\n        \n\n    \n\n     \n\n                    \n\n                        \n\n\n                        \n\n                            \n\n                                \n\n                                    \n\n\n                                \n\n                            \n\n                            \n\n                                \n                            \n\n                        \n\n                        \n\n                            \n                        \n\n                        \n\n                            \n                        \n\n                        \n\n                             \n                        \n\n                        \n\n                            \n\n                                \n\n                                    \n\n\n                                \n\n                            \n\n                        \n\n                    \n\n                \n\n                \n\n                    \n\n                        \n\n\n                        \n\n                             \n                             \n                                 \n                                     \n                                         \n                                            \n\n\n                                         \n                                         \n                                            \n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n\n\n\n\n                                            \n\n                                        \n                                    \n                                    \n                                         \n                                            \n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n\n\n                                            \n\n                                          \n                                        \n                                            \n\n                                                \n\n                                                    \n                                                    \n                                                \n\n                                            \n\n                                            \n\n\n                                            \n\n\n                                            \n\n\n                                            \n\n                                                \n\n\n                                                \n\n                                                    \n\n\n                                                    \n\n\n                                                    \n\n\n                                                    \n\n\n                                                    \n\n\n                                                \n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n                                                    \n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                    \n\n                                                \n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n                                                    \n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                        \n\n                                                        \n\n                                                            \n                                                                \n                                                            \n                                                            \n                                                                \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n\n                                                    \n\n                                                    \n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n\n                                                        \n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                            \n\n\n                                                        \n\n                                                        \n\n                                                            \n                                                                \n                                                            \n                                                            \n                                                                \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n\n                                                    \n\n                                                    \n\n\n                                                    \n\n                                                        \n                                                    \n\n                                                \n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\nAdd(more rows at bottom) Back to the top\n100%"}}